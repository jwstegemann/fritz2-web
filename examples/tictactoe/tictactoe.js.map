{"version":3,"file":"tictactoe.js","mappings":"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","sources":["webpack://tictactoe/webpack/universalModuleDefinition","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Events.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/RenderContext.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Standard.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Mount.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Maps.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Transform.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/SafeCollector.common.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Tags.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Listener.kt","webpack://tictactoe/../../../../core/src/commonMain/kotlin/dev/fritz2/core/Id.kt","webpack://tictactoe/../../../../core/src/commonMain/kotlin/dev/fritz2/core/Inspector.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Foundation.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Arrays.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Strings.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Handlers.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/dynamic.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Collections.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Scope.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Myer.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Patch.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Store.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Merge.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Library.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Lazy.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/StringBuilder.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collectionJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_ArraysJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Collections.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Job.kt","webpack://tictactoe/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Attributes.kt","webpack://tictactoe/../../../../core/src/commonMain/kotlin/dev/fritz2/validation/Validation.kt","webpack://tictactoe/../../../../examples/tictactoe/src/commonMain/kotlin/dev/fritz2/examples/tictactoe/Logic.kt","webpack://tictactoe/../../../../examples/tictactoe/src/commonMain/kotlin/dev/fritz2/examples/tictactoe/Model.kt","webpack://tictactoe/../../../../examples/tictactoe/src/jsMain/kotlin/dev/fritz2/examples/tictactoe/TicTacToe.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/js/math.polyfills.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/globalThis.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/math.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/ArrayBuffer.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/js.arrays/fill.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/CoroutineContext.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/js-builtin-sources/core/builtins/native/kotlin/Number.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/js-builtin-sources/core/builtins/src/kotlin/Unit.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Ranges.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Char.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Enum.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Primitives.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/BitMask.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/arrays.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/bitUtils.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/runtimeForStdLib.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/charSequenceJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/CharCode.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/numberConversion.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/unsigned/src/kotlin/UShort.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/collectionsHacks.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/compareTo.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/coreRuntime.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/typeCheckUtils.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/hacks.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/longJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/NumbersJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/metadataUtils.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/rangeTo.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/reflectRuntime.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/metadataUtilsOld.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Preconditions.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/kotlin.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_DigitChars.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableList.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/ArrayFunctions.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/ArrayList.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashMap.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/InternalHashMap.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashMapEntry.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashSet.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/LinkedHashMap.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/LinkedHashSet.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/CoroutineImpl.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/InterceptedCoroutine.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/cancellation/CancellationException.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/exceptions.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/random/PlatformRandom.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/math.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/random/Random.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/random/XorWowRandom.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/KClassImpl.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/primitives.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/reflection.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/StringBuilderJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/charJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_WhitespaceChars.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/numberConversions.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/stringJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_ComparisonsJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractCollection.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractList.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractMap.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractSet.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/ArrayDeque.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/IndexedValue.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Iterables.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Iterators.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/MutableCollections.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/PrimitiveIterators.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/SequenceBuilder.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Sequences.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/ContinuationInterceptor.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/CoroutineContextImpl.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/intrinsics/Intrinsics.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/internal/progressionUtil.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/PrimitiveRanges.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/ProgressionIterators.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/Progressions.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Appendable.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Result.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Tuples.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/HashCode.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/Continuation.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Strings.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/InternalMap.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/coroutineInternalJS.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_CollectionsJs.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/noPackageHacks.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/StringNumberConversions.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/throwableExtensions.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/libraries/stdlib/js/src/kotlinx/dom/Mutations.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/88b0986a7186d029/atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/88b0986a7186d029/atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/Trace.common.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/88b0986a7186d029/atomicfu/src/jsAndWasmSharedMain/kotlin/kotlinx/atomicfu/AtomicFU.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Job.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/Channel.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/AbstractCoroutine.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Builders.common.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CancellableContinuation.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CancellableContinuationImpl.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/DispatchedTask.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CompletionState.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineDispatcher.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineExceptionHandler.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineScope.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineStart.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/EventLoop.common.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/ThreadLocal.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Exceptions.common.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/JobSupport.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/Concurrent.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/LinkedList.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/Synchronized.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/MainCoroutineDispatcher.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/NonCancellable.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Supervisor.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Unconfined.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Yield.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/DispatchedContinuation.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/BufferOverflow.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/BufferedChannel.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/ConcurrentLinkedList.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/InlineList.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/ChannelCoroutine.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/Channels.common.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/ConflatedBufferedChannel.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/Produce.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/Builders.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/Channels.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/Flow.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/StateFlow.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/AbstractSharedFlow.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/ChannelFlow.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/ThreadContext.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/Combine.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/FlowCoroutine.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/Merge.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/NopCollector.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/NullSurrogate.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/SendingCollector.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Distinct.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Emitters.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Errors.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Share.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/terminal/Collect.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/Concurrent.common.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/CoroutineExceptionHandlerImpl.common.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/CoroutineExceptionHandlerImpl.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/CoroutineContext.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/OnUndeliveredElement.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/Scopes.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/Symbol.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/SystemProps.common.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/SystemProps.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/intrinsics/Cancellable.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/intrinsics/Undispatched.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/selects/Select.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/sync/Mutex.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/sync/Semaphore.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/CoroutineContext.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/Debug.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/JSDispatcher.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/Window.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/internal/CoroutineExceptionHandlerImpl.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmJsShared/src/EventLoop.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmJsShared/src/internal/JSDispatcher.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/Dispatchers.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/Exceptions.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/SchedulerTask.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/flow/internal/FlowExceptions.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/flow/internal/SafeCollector.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Sets.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/LocalAtomics.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/StackTraceRecovery.kt","webpack://tictactoe/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/ProbesSupport.kt","webpack://tictactoe/../../../../../examples/tictactoe/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Sequences.kt","webpack://tictactoe/webpack/bootstrap","webpack://tictactoe/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tictactoe\"] = factory();\n\telse\n\t\troot[\"tictactoe\"] = factory();\n})(globalThis, () => {\nreturn ","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.browser.window\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.*\nimport org.w3c.dom.Window\nimport org.w3c.dom.clipboard.ClipboardEvent\nimport org.w3c.dom.events.*\nimport org.w3c.xhr.ProgressEvent\n\n/**\n * Contains all javascript event types.\n * Take a look [here](https://www.w3schools.com/jsref/dom_obj_event.asp).\n *\n * Sometimes it is necessary to use a more generic type (like [Event])\n * because the type that is offered to the listener is not always consistent\n * (on different browsers, different actions, etc.)\n */\ninterface WithEvents<out T : EventTarget> {\n\n    companion object {\n        private const val ABORT = \"abort\"\n        private const val AFTERPRINT = \"afterprint\"\n        private const val ANIMATIONEND = \"animationend\"\n        private const val ANIMATIONITERATION = \"animationiteration\"\n        private const val ANIMATIONSTART = \"animationstart\"\n        private const val BEFOREPRINT = \"beforeprint\"\n        private const val BEFOREUNLOAD = \"beforeunload\"\n        private const val BLUR = \"blur\"\n        private const val CANPLAY = \"canplay\"\n        private const val CANPLAYTHROUGH = \"canplaythrough\"\n        private const val CHANGE = \"change\"\n        private const val CLICK = \"click\"\n        private const val CONTEXTMENU = \"contextmenu\"\n        private const val COPY = \"copy\"\n        private const val CUT = \"cut\"\n        private const val DBLCLICK = \"dblclick\"\n        private const val DRAG = \"drag\"\n        private const val DRAGEND = \"dragend\"\n        private const val DRAGENTER = \"dragenter\"\n        private const val DRAGLEAVE = \"dragleave\"\n        private const val DRAGOVER = \"dragover\"\n        private const val DRAGSTART = \"dragstart\"\n        private const val DROP = \"drop\"\n        private const val DURATIONCHANGE = \"durationchange\"\n        private const val ENDED = \"ended\"\n        private const val ERROR = \"error\"\n        private const val FOCUS = \"focus\"\n        private const val FOCUSIN = \"focusin\"\n        private const val FOCUSOUT = \"focusout\"\n        private const val FULLSCREENCHANGE = \"fullscreenchange\"\n        private const val FULLSCREENERROR = \"fullscreenerror\"\n        private const val HASHCHANGE = \"hashchange\"\n        private const val INPUT = \"input\"\n        private const val INVALID = \"invalid\"\n        private const val KEYDOWN = \"keydown\"\n        private const val KEYPRESS = \"keypress\"\n        private const val KEYUP = \"keyup\"\n        private const val LOAD = \"load\"\n        private const val LOADEDDATA = \"loadeddata\"\n        private const val LOADEDMETADATA = \"loadedmetadata\"\n        private const val MOUSEENTER = \"mouseenter\"\n        private const val MOUSELEAVE = \"mouseleave\"\n        private const val MOUSEMOVE = \"mousemove\"\n        private const val MOUSEOVER = \"mouseover\"\n        private const val MOUSEOUT = \"mouseout\"\n        private const val MOUSEUP = \"mouseup\"\n        private const val OFFLINE = \"offline\"\n        private const val ONLINE = \"online\"\n        private const val OPEN = \"open\"\n        private const val PAGEHIDE = \"pagehide\"\n        private const val PAGESHOW = \"pageshow\"\n        private const val PASTE = \"paste\"\n        private const val LOADSTART = \"loadstart\"\n        private const val MESSAGE = \"message\"\n        private const val MOUSEDOWN = \"mousedown\"\n        private const val PAUSE = \"pause\"\n        private const val PLAY = \"play\"\n        private const val PLAYING = \"playing\"\n        private const val POPSTATE = \"popstate\"\n        private const val PROGRESS = \"progress\"\n        private const val RATECHANGE = \"ratechange\"\n        private const val RESIZE = \"resize\"\n        private const val RESET = \"reset\"\n        private const val SCROLL = \"scroll\"\n        private const val SEARCH = \"search\"\n        private const val SEEKED = \"seeked\"\n        private const val SEEKING = \"seeking\"\n        private const val SELECT = \"select\"\n        private const val SHOW = \"show\"\n        private const val STALLED = \"stalled\"\n        private const val STORAGE = \"storage\"\n        private const val SUBMIT = \"submit\"\n        private const val SUSPEND = \"suspend\"\n        private const val TIMEUPDATE = \"timeupdate\"\n        private const val TOGGLE = \"toggle\"\n        private const val TOUCHCANCEL = \"touchcancel\"\n        private const val TOUCHEND = \"touchend\"\n        private const val TOUCHMOVE = \"touchmove\"\n        private const val TOUCHSTART = \"touchstart\"\n        private const val TRANSITIONEND = \"transitionend\"\n        private const val UNLOAD = \"unload\"\n        private const val VOLUMECHANGE = \"volumechange\"\n        private const val WAITING = \"waiting\"\n        private const val WHEEL = \"wheel\"\n    }\n\n    /**\n     * Creates an [Listener] for the given event [eventName].\n     *\n     * @param eventName the [DOM-API name](https://developer.mozilla.org/en-US/docs/Web/API/Element#events) of an event.\n     * Can be a custom name.\n     * @param capture if `true`, activates capturing mode, else remains in `bubble` mode (default)\n     * @param selector optional lambda expression to select specific events with option to manipulate it\n     * (e.g. `preventDefault` or `stopPropagation`).\n     *\n     * @return a [Listener]-object, which is more or less a [Flow] of the specific `Event`-type.\n     */\n    fun <X : Event> subscribe(\n        eventName: String,\n        capture: Boolean = false,\n        selector: X.() -> Boolean = { true }\n    ): Listener<X, T>\n\n    /**\n     * occurs when the loading of a media is aborted\n     */\n    val aborts: Listener<Event, T> get() = subscribe(ABORT)\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun aborts(init: Event.() -> Unit): Listener<Event, T> = subscribe(ABORT) { init(); true }\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun abortsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ABORT, selector = selector)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     */\n    val afterprints: Listener<Event, T> get() = subscribe(AFTERPRINT)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprints(init: Event.() -> Unit): Listener<Event, T> = subscribe(AFTERPRINT) { init(); true }\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprintsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(AFTERPRINT, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val animationends: Listener<Event, T> get() = subscribe(ANIMATIONEND)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationends(init: Event.() -> Unit): Listener<Event, T> = subscribe(ANIMATIONEND) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationendsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONEND, selector = selector)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     */\n    val animationiterations: Listener<Event, T> get() = subscribe(ANIMATIONITERATION)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterations(init: Event.() -> Unit): Listener<Event, T> = subscribe(ANIMATIONITERATION) { init(); true }\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterationsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONITERATION, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has started\n     */\n    val animationstarts: Listener<Event, T> get() = subscribe(ANIMATIONSTART)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstarts(init: Event.() -> Unit): Listener<Event, T> = subscribe(ANIMATIONSTART) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has started\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstartsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONSTART, selector = selector)\n\n    /**\n     * occurs when a page is about to be printed\n     */\n    val beforeprints: Listener<Event, T> get() = subscribe(BEFOREPRINT)\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprints(init: Event.() -> Unit): Listener<Event, T> = subscribe(BEFOREPRINT) { init(); true }\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprintsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(BEFOREPRINT, selector = selector)\n\n    /**\n     * occurs before the document is about to be unloaded\n     */\n    val beforeunloads: Listener<Event, T> get() = subscribe(BEFOREUNLOAD)\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloads(init: Event.() -> Unit): Listener<Event, T> = subscribe(BEFOREUNLOAD) { init(); true }\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloadsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(BEFOREUNLOAD, selector = selector)\n\n    /**\n     * occurs when an element loses focus\n     */\n    val blurs: Listener<FocusEvent, T> get() = subscribe(BLUR)\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blurs(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(BLUR) { init(); true }\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blursIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> = subscribe(BLUR, selector = selector)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     */\n    val canplays: Listener<Event, T> get() = subscribe(CANPLAY)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplays(init: Event.() -> Unit): Listener<Event, T> = subscribe(CANPLAY) { init(); true }\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaysIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(CANPLAY, selector = selector)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     */\n    val canplaythroughs: Listener<Event, T> get() = subscribe(CANPLAYTHROUGH)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughs(init: Event.() -> Unit): Listener<Event, T> = subscribe(CANPLAYTHROUGH) { init(); true }\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CANPLAYTHROUGH, selector = selector)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     */\n    val changes: Listener<Event, T> get() = subscribe(CHANGE)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changes(init: Event.() -> Unit): Listener<Event, T> = subscribe(CHANGE) { init(); true }\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(CHANGE, selector = selector)\n\n    /**\n     * occurs when the user clicks on an element\n     */\n    val clicks: Listener<MouseEvent, T> get() = subscribe(CLICK)\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicks(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(CLICK) { init(); true }\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicksIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> = subscribe(CLICK, selector = selector)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     */\n    val contextmenus: Listener<MouseEvent, T> get() = subscribe(CONTEXTMENU)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenus(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(CONTEXTMENU) { init(); true }\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenusIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(CONTEXTMENU, selector = selector)\n\n    /**\n     * occurs when the user copies the content of an element\n     */\n    val copys: Listener<ClipboardEvent, T> get() = subscribe(COPY)\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copys(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> = subscribe(COPY) { init(); true }\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copysIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(COPY, selector = selector)\n\n    /**\n     * occurs when the user cuts the content of an element\n     */\n    val cuts: Listener<ClipboardEvent, T> get() = subscribe(CUT)\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cuts(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> = subscribe(CUT) { init(); true }\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cutsIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(CUT, selector = selector)\n\n    /**\n     * occurs when the user double-clicks on an element\n     */\n    val dblclicks: Listener<MouseEvent, T> get() = subscribe(DBLCLICK)\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicks(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(DBLCLICK) { init(); true }\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicksIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(DBLCLICK, selector = selector)\n\n    /**\n     * occurs when an element is being dragged\n     */\n    val drags: Listener<DragEvent, T> get() = subscribe(DRAG)\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun drags(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAG) { init(); true }\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> = subscribe(DRAG, selector = selector)\n\n    /**\n     * occurs when the user has finished dragging an element\n     */\n    val dragends: Listener<DragEvent, T> get() = subscribe(DRAGEND)\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragends(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGEND) { init(); true }\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragendsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> = subscribe(DRAGEND, selector = selector)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     */\n    val dragenters: Listener<DragEvent, T> get() = subscribe(DRAGENTER)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragenters(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGENTER) { init(); true }\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragentersIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGENTER, selector = selector)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     */\n    val dragleaves: Listener<DragEvent, T> get() = subscribe(DRAGLEAVE)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleaves(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGLEAVE) { init(); true }\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleavesIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGLEAVE, selector = selector)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     */\n    val dragovers: Listener<DragEvent, T> get() = subscribe(DRAGOVER)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragovers(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGOVER) { init(); true }\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragoversIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGOVER, selector = selector)\n\n    /**\n     * occurs when the user starts to drag an element\n     */\n    val dragstarts: Listener<DragEvent, T> get() = subscribe(DRAGSTART)\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstarts(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGSTART) { init(); true }\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstartsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGSTART, selector = selector)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     */\n    val drops: Listener<DragEvent, T> get() = subscribe(DROP)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun drops(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DROP) { init(); true }\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dropsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> = subscribe(DROP, selector = selector)\n\n    /**\n     * occurs when the duration of the media is changed\n     */\n    val durationchanges: Listener<Event, T> get() = subscribe(DURATIONCHANGE)\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(DURATIONCHANGE) { init(); true }\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchangesIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(DURATIONCHANGE, selector = selector)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     */\n    val endeds: Listener<Event, T> get() = subscribe(ENDED)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endeds(init: Event.() -> Unit): Listener<Event, T> = subscribe(ENDED) { init(); true }\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endedsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ENDED, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val errors: Listener<Event, T> get() = subscribe(ERROR)\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errors(init: Event.() -> Unit): Listener<Event, T> = subscribe(ERROR) { init(); true }\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errorsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ERROR, selector = selector)\n\n    /**\n     * occurs when an element gets focus\n     */\n    val focuss: Listener<FocusEvent, T> get() = subscribe(FOCUS)\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focuss(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUS) { init(); true }\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focussIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> = subscribe(FOCUS, selector = selector)\n\n    /**\n     * occurs when an element is about to get focus\n     */\n    val focusins: Listener<FocusEvent, T> get() = subscribe(FOCUSIN)\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusins(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUSIN) { init(); true }\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusinsIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSIN, selector = selector)\n\n    /**\n     * occurs when an element is about to lose focus\n     */\n    val focusouts: Listener<FocusEvent, T> get() = subscribe(FOCUSOUT)\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusouts(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUSOUT) { init(); true }\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusoutsIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSOUT, selector = selector)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     */\n    val fullscreenchanges: Listener<Event, T> get() = subscribe(FULLSCREENCHANGE)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(FULLSCREENCHANGE) { init(); true }\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchangesIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENCHANGE, selector = selector)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     */\n    val fullscreenerrors: Listener<Event, T> get() = subscribe(FULLSCREENERROR)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrors(init: Event.() -> Unit): Listener<Event, T> = subscribe(FULLSCREENERROR) { init(); true }\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrorsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENERROR, selector = selector)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     */\n    val hashchanges: Listener<HashChangeEvent, T> get() = subscribe(HASHCHANGE)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchanges(init: HashChangeEvent.() -> Unit): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE) { init(); true }\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchangesIf(selector: HashChangeEvent.() -> Boolean): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE, selector = selector)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     */\n    val inputs: Listener<Event, T> get() = subscribe(INPUT)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputs(init: Event.() -> Unit): Listener<Event, T> = subscribe(INPUT) { init(); true }\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(INPUT, selector = selector)\n\n    /**\n     * occurs when an element is invalid\n     */\n    val invalids: Listener<Event, T> get() = subscribe(INVALID)\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalids(init: Event.() -> Unit): Listener<Event, T> = subscribe(INVALID) { init(); true }\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalidsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(INVALID, selector = selector)\n\n    /**\n     * occurs when the user is pressing a key\n     */\n    val keydowns: Listener<KeyboardEvent, T> get() = subscribe(KEYDOWN)\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydowns(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> = subscribe(KEYDOWN) { init(); true }\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydownsIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYDOWN, selector = selector)\n\n    /**\n     * occurs when the user presses a key\n     */\n    val keypresss: Listener<KeyboardEvent, T> get() = subscribe(KEYPRESS)\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresss(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> = subscribe(KEYPRESS) { init(); true }\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresssIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYPRESS, selector = selector)\n\n    /**\n     * occurs when the user releases a key\n     */\n    val keyups: Listener<KeyboardEvent, T> get() = subscribe(KEYUP)\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyups(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> = subscribe(KEYUP) { init(); true }\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyupsIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYUP, selector = selector)\n\n    /**\n     * occurs when an object has loaded\n     */\n    val loads: Listener<Event, T> get() = subscribe(LOAD)\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loads(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOAD) { init(); true }\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(LOAD, selector = selector)\n\n    /**\n     * occurs when media data is loaded\n     */\n    val loadeddatas: Listener<Event, T> get() = subscribe(LOADEDDATA)\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatas(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOADEDDATA) { init(); true }\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatasIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(LOADEDDATA, selector = selector)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     */\n    val loadedmetadatas: Listener<Event, T> get() = subscribe(LOADEDMETADATA)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatas(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOADEDMETADATA) { init(); true }\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatasIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(LOADEDMETADATA, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     */\n    val mouseenters: Listener<MouseEvent, T> get() = subscribe(MOUSEENTER)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseenters(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEENTER) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseentersIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEENTER, selector = selector)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     */\n    val mouseleaves: Listener<MouseEvent, T> get() = subscribe(MOUSELEAVE)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleaves(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSELEAVE) { init(); true }\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleavesIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSELEAVE, selector = selector)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     */\n    val mousemoves: Listener<MouseEvent, T> get() = subscribe(MOUSEMOVE)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemoves(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEMOVE) { init(); true }\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemovesIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEMOVE, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     */\n    val mouseovers: Listener<MouseEvent, T> get() = subscribe(MOUSEOVER)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseovers(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEOVER) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoversIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOVER, selector = selector)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     */\n    val mouseouts: Listener<MouseEvent, T> get() = subscribe(MOUSEOUT)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseouts(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEOUT) { init(); true }\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoutsIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOUT, selector = selector)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     */\n    val mouseups: Listener<MouseEvent, T> get() = subscribe(MOUSEUP)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseups(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEUP) { init(); true }\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseupsIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEUP, selector = selector)\n\n    /**\n     * occurs when the browser starts to work offline\n     */\n    val offlines: Listener<Event, T> get() = subscribe(OFFLINE)\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlines(init: Event.() -> Unit): Listener<Event, T> = subscribe(OFFLINE) { init(); true }\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlinesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(OFFLINE, selector = selector)\n\n    /**\n     * occurs when the browser starts to work online\n     */\n    val onlines: Listener<Event, T> get() = subscribe(ONLINE)\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlines(init: Event.() -> Unit): Listener<Event, T> = subscribe(ONLINE) { init(); true }\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlinesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ONLINE, selector = selector)\n\n    /**\n     * occurs when a connection with the event source is opened\n     */\n    val opens: Listener<Event, T> get() = subscribe(OPEN)\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opens(init: Event.() -> Unit): Listener<Event, T> = subscribe(OPEN) { init(); true }\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opensIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(OPEN, selector = selector)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     */\n    val pagehides: Listener<PageTransitionEvent, T> get() = subscribe(PAGEHIDE)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehides(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE) { init(); true }\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehidesIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE, selector = selector)\n\n    /**\n     * occurs when the user navigates to a webpage\n     */\n    val pageshows: Listener<PageTransitionEvent, T> get() = subscribe(PAGESHOW)\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshows(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW) { init(); true }\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshowsIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW, selector = selector)\n\n    /**\n     * occurs when the user pastes some content in an element\n     */\n    val pastes: Listener<ClipboardEvent, T> get() = subscribe(PASTE)\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastes(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> = subscribe(PASTE) { init(); true }\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastesIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(PASTE, selector = selector)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     */\n    val loadstarts: Listener<ProgressEvent, T> get() = subscribe(LOADSTART)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstarts(init: ProgressEvent.() -> Unit): Listener<ProgressEvent, T> = subscribe(LOADSTART) { init(); true }\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstartsIf(selector: ProgressEvent.() -> Boolean): Listener<ProgressEvent, T> =\n        subscribe(LOADSTART, selector = selector)\n\n    /**\n     * occurs when a message is received through the event source\n     */\n    val messages: Listener<Event, T> get() = subscribe(MESSAGE)\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messages(init: Event.() -> Unit): Listener<Event, T> = subscribe(MESSAGE) { init(); true }\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messagesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(MESSAGE, selector = selector)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     */\n    val mousedowns: Listener<MouseEvent, T> get() = subscribe(MOUSEDOWN)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedowns(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEDOWN) { init(); true }\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedownsIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEDOWN, selector = selector)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     */\n    val pauses: Listener<Event, T> get() = subscribe(PAUSE)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pauses(init: Event.() -> Unit): Listener<Event, T> = subscribe(PAUSE) { init(); true }\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pausesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PAUSE, selector = selector)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     */\n    val plays: Listener<Event, T> get() = subscribe(PLAY)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun plays(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAY) { init(); true }\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PLAY, selector = selector)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     */\n    val playings: Listener<Event, T> get() = subscribe(PLAYING)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playings(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAYING) { init(); true }\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playingsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PLAYING, selector = selector)\n\n    /**\n     * occurs when the window's history changes\n     */\n    val popstates: Listener<PopStateEvent, T> get() = subscribe(POPSTATE)\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstates(init: PopStateEvent.() -> Unit): Listener<PopStateEvent, T> = subscribe(POPSTATE) { init(); true }\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstatesIf(selector: PopStateEvent.() -> Boolean): Listener<PopStateEvent, T> =\n        subscribe(POPSTATE, selector = selector)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     */\n    val progresss: Listener<Event, T> get() = subscribe(PROGRESS)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresss(init: Event.() -> Unit): Listener<Event, T> = subscribe(PROGRESS) { init(); true }\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresssIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PROGRESS, selector = selector)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     */\n    val ratechanges: Listener<Event, T> get() = subscribe(RATECHANGE)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(RATECHANGE) { init(); true }\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechangesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(RATECHANGE, selector = selector)\n\n    /**\n     * occurs when the document view is resized\n     */\n    val resizes: Listener<Event, T> get() = subscribe(RESIZE)\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizes(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESIZE) { init(); true }\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(RESIZE, selector = selector)\n\n    /**\n     * occurs when a form is reset\n     */\n    val resets: Listener<Event, T> get() = subscribe(RESET)\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resets(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESET) { init(); true }\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resetsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(RESET, selector = selector)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     */\n    val scrolls: Listener<Event, T> get() = subscribe(SCROLL)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrolls(init: Event.() -> Unit): Listener<Event, T> = subscribe(SCROLL) { init(); true }\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrollsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SCROLL, selector = selector)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     */\n    val searchs: Listener<Event, T> get() = subscribe(SEARCH)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchs(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEARCH) { init(); true }\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SEARCH, selector = selector)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     */\n    val seekeds: Listener<Event, T> get() = subscribe(SEEKED)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekeds(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKED) { init(); true }\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekedsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SEEKED, selector = selector)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     */\n    val seekings: Listener<Event, T> get() = subscribe(SEEKING)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekings(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKING) { init(); true }\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekingsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SEEKING, selector = selector)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     */\n    val selects: Listener<Event, T> get() = subscribe(SELECT)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selects(init: Event.() -> Unit): Listener<Event, T> = subscribe(SELECT) { init(); true }\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selectsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SELECT, selector = selector)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     */\n    val shows: Listener<Event, T> get() = subscribe(SHOW)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun shows(init: Event.() -> Unit): Listener<Event, T> = subscribe(SHOW) { init(); true }\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun showsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SHOW, selector = selector)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     */\n    val stalleds: Listener<Event, T> get() = subscribe(STALLED)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalleds(init: Event.() -> Unit): Listener<Event, T> = subscribe(STALLED) { init(); true }\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalledsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(STALLED, selector = selector)\n\n    /**\n     * occurs when a Web Storage area is updated\n     */\n    val storages: Listener<StorageEvent, T> get() = subscribe(STORAGE)\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storages(init: StorageEvent.() -> Unit): Listener<StorageEvent, T> = subscribe(STORAGE) { init(); true }\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storagesIf(selector: StorageEvent.() -> Boolean): Listener<StorageEvent, T> =\n        subscribe(STORAGE, selector = selector)\n\n    /**\n     * occurs when a form is submitted\n     */\n    val submits: Listener<Event, T> get() = subscribe(SUBMIT)\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submits(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUBMIT) { init(); true }\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submitsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SUBMIT, selector = selector)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     */\n    val suspends: Listener<Event, T> get() = subscribe(SUSPEND)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspends(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUSPEND) { init(); true }\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspendsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SUSPEND, selector = selector)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     */\n    val timeupdates: Listener<Event, T> get() = subscribe(TIMEUPDATE)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdates(init: Event.() -> Unit): Listener<Event, T> = subscribe(TIMEUPDATE) { init(); true }\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdatesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(TIMEUPDATE, selector = selector)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     */\n    val toggles: Listener<Event, T> get() = subscribe(TOGGLE)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun toggles(init: Event.() -> Unit): Listener<Event, T> = subscribe(TOGGLE) { init(); true }\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun togglesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(TOGGLE, selector = selector)\n\n    /**\n     * occurs when the touch is interrupted\n     */\n    val touchcancels: Listener<TouchEvent, T> get() = subscribe(TOUCHCANCEL)\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancels(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHCANCEL) { init(); true }\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancelsIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHCANCEL, selector = selector)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     */\n    val touchends: Listener<TouchEvent, T> get() = subscribe(TOUCHEND)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchends(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHEND) { init(); true }\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchendsIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHEND, selector = selector)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     */\n    val touchmoves: Listener<TouchEvent, T> get() = subscribe(TOUCHMOVE)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmoves(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHMOVE) { init(); true }\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmovesIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHMOVE, selector = selector)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     */\n    val touchstarts: Listener<TouchEvent, T> get() = subscribe(TOUCHSTART)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstarts(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHSTART) { init(); true }\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstartsIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHSTART, selector = selector)\n\n    /**\n     * occurs when a CSS transition has completed\n     */\n    val transitionends: Listener<Event, T> get() = subscribe(TRANSITIONEND)\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionends(init: Event.() -> Unit): Listener<Event, T> = subscribe(TRANSITIONEND) { init(); true }\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionendsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TRANSITIONEND, selector = selector)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     */\n    val unloads: Listener<Event, T> get() = subscribe(UNLOAD)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloads(init: Event.() -> Unit): Listener<Event, T> = subscribe(UNLOAD) { init(); true }\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloadsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(UNLOAD, selector = selector)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     */\n    val volumechanges: Listener<Event, T> get() = subscribe(VOLUMECHANGE)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(VOLUMECHANGE) { init(); true }\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechangesIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(VOLUMECHANGE, selector = selector)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     */\n    val waitings: Listener<Event, T> get() = subscribe(WAITING)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitings(init: Event.() -> Unit): Listener<Event, T> = subscribe(WAITING) { init(); true }\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitingsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(WAITING, selector = selector)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     */\n    val wheels: Listener<WheelEvent, T> get() = subscribe(WHEEL)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheels(init: WheelEvent.() -> Unit): Listener<WheelEvent, T> = subscribe(WHEEL) { init(); true }\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheelsIf(selector: WheelEvent.() -> Boolean): Listener<WheelEvent, T> = subscribe(WHEEL, selector = selector)\n\n    /**\n     * occurs when the loading of a media is aborted\n     */\n    val abortsCaptured: Listener<Event, T> get() = subscribe(ABORT, true)\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun abortsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ABORT, true) { init(); true }\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun abortsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ABORT, true, selector = selector)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     */\n    val afterprintsCaptured: Listener<Event, T> get() = subscribe(AFTERPRINT, true)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprintsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(AFTERPRINT, true) { init(); true }\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprintsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(AFTERPRINT, true, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val animationendsCaptured: Listener<Event, T> get() = subscribe(ANIMATIONEND, true)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationendsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(ANIMATIONEND, true) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationendsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONEND, true, selector = selector)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     */\n    val animationiterationsCaptured: Listener<Event, T> get() = subscribe(ANIMATIONITERATION, true)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterationsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(ANIMATIONITERATION, true) { init(); true }\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterationsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONITERATION, true, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has started\n     */\n    val animationstartsCaptured: Listener<Event, T> get() = subscribe(ANIMATIONSTART, true)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstartsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(ANIMATIONSTART, true) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has started\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstartsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONSTART, true, selector = selector)\n\n    /**\n     * occurs when a page is about to be printed\n     */\n    val beforeprintsCaptured: Listener<Event, T> get() = subscribe(BEFOREPRINT, true)\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprintsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(BEFOREPRINT, true) { init(); true }\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprintsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(BEFOREPRINT, true, selector = selector)\n\n    /**\n     * occurs before the document is about to be unloaded\n     */\n    val beforeunloadsCaptured: Listener<Event, T> get() = subscribe(BEFOREUNLOAD, true)\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloadsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(BEFOREUNLOAD, true) { init(); true }\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloadsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(BEFOREUNLOAD, true, selector = selector)\n\n    /**\n     * occurs when an element loses focus\n     */\n    val blursCaptured: Listener<FocusEvent, T> get() = subscribe(BLUR, true)\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blursCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(BLUR, true) { init(); true }\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blursCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(BLUR, true, selector = selector)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     */\n    val canplaysCaptured: Listener<Event, T> get() = subscribe(CANPLAY, true)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaysCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(CANPLAY, true) { init(); true }\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaysCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CANPLAY, true, selector = selector)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     */\n    val canplaythroughsCaptured: Listener<Event, T> get() = subscribe(CANPLAYTHROUGH, true)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(CANPLAYTHROUGH, true) { init(); true }\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CANPLAYTHROUGH, true, selector = selector)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     */\n    val changesCaptured: Listener<Event, T> get() = subscribe(CHANGE, true)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(CHANGE, true) { init(); true }\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CHANGE, true, selector = selector)\n\n    /**\n     * occurs when the user clicks on an element\n     */\n    val clicksCaptured: Listener<MouseEvent, T> get() = subscribe(CLICK, true)\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicksCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(CLICK, true) { init(); true }\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicksCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(CLICK, true, selector = selector)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     */\n    val contextmenusCaptured: Listener<MouseEvent, T> get() = subscribe(CONTEXTMENU, true)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenusCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(CONTEXTMENU, true) { init(); true }\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenusCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(CONTEXTMENU, true, selector = selector)\n\n    /**\n     * occurs when the user copies the content of an element\n     */\n    val copysCaptured: Listener<ClipboardEvent, T> get() = subscribe(COPY, true)\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copysCaptured(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> =\n        subscribe(COPY, true) { init(); true }\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copysCapturedIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(COPY, true, selector = selector)\n\n    /**\n     * occurs when the user cuts the content of an element\n     */\n    val cutsCaptured: Listener<ClipboardEvent, T> get() = subscribe(CUT, true)\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cutsCaptured(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> =\n        subscribe(CUT, true) { init(); true }\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cutsCapturedIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(CUT, true, selector = selector)\n\n    /**\n     * occurs when the user double-clicks on an element\n     */\n    val dblclicksCaptured: Listener<MouseEvent, T> get() = subscribe(DBLCLICK, true)\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicksCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(DBLCLICK, true) { init(); true }\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicksCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(DBLCLICK, true, selector = selector)\n\n    /**\n     * occurs when an element is being dragged\n     */\n    val dragsCaptured: Listener<DragEvent, T> get() = subscribe(DRAG, true)\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAG, true) { init(); true }\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAG, true, selector = selector)\n\n    /**\n     * occurs when the user has finished dragging an element\n     */\n    val dragendsCaptured: Listener<DragEvent, T> get() = subscribe(DRAGEND, true)\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragendsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGEND, true) { init(); true }\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragendsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGEND, true, selector = selector)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     */\n    val dragentersCaptured: Listener<DragEvent, T> get() = subscribe(DRAGENTER, true)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragentersCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGENTER, true) { init(); true }\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragentersCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGENTER, true, selector = selector)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     */\n    val dragleavesCaptured: Listener<DragEvent, T> get() = subscribe(DRAGLEAVE, true)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleavesCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGLEAVE, true) { init(); true }\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleavesCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGLEAVE, true, selector = selector)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     */\n    val dragoversCaptured: Listener<DragEvent, T> get() = subscribe(DRAGOVER, true)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragoversCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGOVER, true) { init(); true }\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragoversCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGOVER, true, selector = selector)\n\n    /**\n     * occurs when the user starts to drag an element\n     */\n    val dragstartsCaptured: Listener<DragEvent, T> get() = subscribe(DRAGSTART, true)\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstartsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGSTART, true) { init(); true }\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstartsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGSTART, true, selector = selector)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     */\n    val dropsCaptured: Listener<DragEvent, T> get() = subscribe(DROP, true)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dropsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DROP, true) { init(); true }\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dropsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DROP, true, selector = selector)\n\n    /**\n     * occurs when the duration of the media is changed\n     */\n    val durationchangesCaptured: Listener<Event, T> get() = subscribe(DURATIONCHANGE, true)\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchangesCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(DURATIONCHANGE, true) { init(); true }\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(DURATIONCHANGE, true, selector = selector)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     */\n    val endedsCaptured: Listener<Event, T> get() = subscribe(ENDED, true)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endedsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ENDED, true) { init(); true }\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endedsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ENDED, true, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val errorsCaptured: Listener<Event, T> get() = subscribe(ERROR, true)\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errorsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ERROR, true) { init(); true }\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errorsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ERROR, true, selector = selector)\n\n    /**\n     * occurs when an element gets focus\n     */\n    val focussCaptured: Listener<FocusEvent, T> get() = subscribe(FOCUS, true)\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focussCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUS, true) { init(); true }\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focussCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUS, true, selector = selector)\n\n    /**\n     * occurs when an element is about to get focus\n     */\n    val focusinsCaptured: Listener<FocusEvent, T> get() = subscribe(FOCUSIN, true)\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusinsCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> =\n        subscribe(FOCUSIN, true) { init(); true }\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusinsCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSIN, true, selector = selector)\n\n    /**\n     * occurs when an element is about to lose focus\n     */\n    val focusoutsCaptured: Listener<FocusEvent, T> get() = subscribe(FOCUSOUT, true)\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusoutsCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> =\n        subscribe(FOCUSOUT, true) { init(); true }\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusoutsCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSOUT, true, selector = selector)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     */\n    val fullscreenchangesCaptured: Listener<Event, T> get() = subscribe(FULLSCREENCHANGE, true)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchangesCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(FULLSCREENCHANGE, true) { init(); true }\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENCHANGE, true, selector = selector)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     */\n    val fullscreenerrorsCaptured: Listener<Event, T> get() = subscribe(FULLSCREENERROR, true)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrorsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(FULLSCREENERROR, true) { init(); true }\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrorsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENERROR, true, selector = selector)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     */\n    val hashchangesCaptured: Listener<HashChangeEvent, T> get() = subscribe(HASHCHANGE, true)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchangesCaptured(init: HashChangeEvent.() -> Unit): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE, true) { init(); true }\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchangesCapturedIf(selector: HashChangeEvent.() -> Boolean): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE, true, selector = selector)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     */\n    val inputsCaptured: Listener<Event, T> get() = subscribe(INPUT, true)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(INPUT, true) { init(); true }\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(INPUT, true, selector = selector)\n\n    /**\n     * occurs when an element is invalid\n     */\n    val invalidsCaptured: Listener<Event, T> get() = subscribe(INVALID, true)\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalidsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(INVALID, true) { init(); true }\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalidsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(INVALID, true, selector = selector)\n\n    /**\n     * occurs when the user is pressing a key\n     */\n    val keydownsCaptured: Listener<KeyboardEvent, T> get() = subscribe(KEYDOWN, true)\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydownsCaptured(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> =\n        subscribe(KEYDOWN, true) { init(); true }\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydownsCapturedIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYDOWN, true, selector = selector)\n\n    /**\n     * occurs when the user presses a key\n     */\n    val keypresssCaptured: Listener<KeyboardEvent, T> get() = subscribe(KEYPRESS, true)\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresssCaptured(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> =\n        subscribe(KEYPRESS, true) { init(); true }\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresssCapturedIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYPRESS, true, selector = selector)\n\n    /**\n     * occurs when the user releases a key\n     */\n    val keyupsCaptured: Listener<KeyboardEvent, T> get() = subscribe(KEYUP, true)\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyupsCaptured(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> =\n        subscribe(KEYUP, true) { init(); true }\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyupsCapturedIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYUP, true, selector = selector)\n\n    /**\n     * occurs when an object has loaded\n     */\n    val loadsCaptured: Listener<Event, T> get() = subscribe(LOAD, true)\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOAD, true) { init(); true }\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(LOAD, true, selector = selector)\n\n    /**\n     * occurs when media data is loaded\n     */\n    val loadeddatasCaptured: Listener<Event, T> get() = subscribe(LOADEDDATA, true)\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatasCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOADEDDATA, true) { init(); true }\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatasCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(LOADEDDATA, true, selector = selector)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     */\n    val loadedmetadatasCaptured: Listener<Event, T> get() = subscribe(LOADEDMETADATA, true)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatasCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(LOADEDMETADATA, true) { init(); true }\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatasCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(LOADEDMETADATA, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     */\n    val mouseentersCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEENTER, true)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseentersCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEENTER, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseentersCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEENTER, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     */\n    val mouseleavesCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSELEAVE, true)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleavesCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSELEAVE, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleavesCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSELEAVE, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     */\n    val mousemovesCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEMOVE, true)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemovesCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEMOVE, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemovesCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEMOVE, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     */\n    val mouseoversCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEOVER, true)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoversCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEOVER, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoversCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOVER, true, selector = selector)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     */\n    val mouseoutsCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEOUT, true)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoutsCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEOUT, true) { init(); true }\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoutsCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOUT, true, selector = selector)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     */\n    val mouseupsCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEUP, true)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseupsCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEUP, true) { init(); true }\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseupsCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEUP, true, selector = selector)\n\n    /**\n     * occurs when the browser starts to work offline\n     */\n    val offlinesCaptured: Listener<Event, T> get() = subscribe(OFFLINE, true)\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlinesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(OFFLINE, true) { init(); true }\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlinesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(OFFLINE, true, selector = selector)\n\n    /**\n     * occurs when the browser starts to work online\n     */\n    val onlinesCaptured: Listener<Event, T> get() = subscribe(ONLINE, true)\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlinesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ONLINE, true) { init(); true }\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlinesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ONLINE, true, selector = selector)\n\n    /**\n     * occurs when a connection with the event source is opened\n     */\n    val opensCaptured: Listener<Event, T> get() = subscribe(OPEN, true)\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opensCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(OPEN, true) { init(); true }\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opensCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(OPEN, true, selector = selector)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     */\n    val pagehidesCaptured: Listener<PageTransitionEvent, T> get() = subscribe(PAGEHIDE, true)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehidesCaptured(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE, true) { init(); true }\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehidesCapturedIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE, true, selector = selector)\n\n    /**\n     * occurs when the user navigates to a webpage\n     */\n    val pageshowsCaptured: Listener<PageTransitionEvent, T> get() = subscribe(PAGESHOW, true)\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshowsCaptured(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW, true) { init(); true }\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshowsCapturedIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW, true, selector = selector)\n\n    /**\n     * occurs when the user pastes some content in an element\n     */\n    val pastesCaptured: Listener<ClipboardEvent, T> get() = subscribe(PASTE, true)\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastesCaptured(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> =\n        subscribe(PASTE, true) { init(); true }\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastesCapturedIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(PASTE, true, selector = selector)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     */\n    val loadstartsCaptured: Listener<ProgressEvent, T> get() = subscribe(LOADSTART, true)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstartsCaptured(init: ProgressEvent.() -> Unit): Listener<ProgressEvent, T> =\n        subscribe(LOADSTART, true) { init(); true }\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstartsCapturedIf(selector: ProgressEvent.() -> Boolean): Listener<ProgressEvent, T> =\n        subscribe(LOADSTART, true, selector = selector)\n\n    /**\n     * occurs when a message is received through the event source\n     */\n    val messagesCaptured: Listener<Event, T> get() = subscribe(MESSAGE, true)\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messagesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(MESSAGE, true) { init(); true }\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messagesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(MESSAGE, true, selector = selector)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     */\n    val mousedownsCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEDOWN, true)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedownsCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEDOWN, true) { init(); true }\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedownsCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEDOWN, true, selector = selector)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     */\n    val pausesCaptured: Listener<Event, T> get() = subscribe(PAUSE, true)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pausesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PAUSE, true) { init(); true }\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pausesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(PAUSE, true, selector = selector)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     */\n    val playsCaptured: Listener<Event, T> get() = subscribe(PLAY, true)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAY, true) { init(); true }\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PLAY, true, selector = selector)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     */\n    val playingsCaptured: Listener<Event, T> get() = subscribe(PLAYING, true)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playingsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAYING, true) { init(); true }\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playingsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(PLAYING, true, selector = selector)\n\n    /**\n     * occurs when the window's history changes\n     */\n    val popstatesCaptured: Listener<PopStateEvent, T> get() = subscribe(POPSTATE, true)\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstatesCaptured(init: PopStateEvent.() -> Unit): Listener<PopStateEvent, T> =\n        subscribe(POPSTATE, true) { init(); true }\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstatesCapturedIf(selector: PopStateEvent.() -> Boolean): Listener<PopStateEvent, T> =\n        subscribe(POPSTATE, true, selector = selector)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     */\n    val progresssCaptured: Listener<Event, T> get() = subscribe(PROGRESS, true)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresssCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PROGRESS, true) { init(); true }\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresssCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(PROGRESS, true, selector = selector)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     */\n    val ratechangesCaptured: Listener<Event, T> get() = subscribe(RATECHANGE, true)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechangesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(RATECHANGE, true) { init(); true }\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(RATECHANGE, true, selector = selector)\n\n    /**\n     * occurs when the document view is resized\n     */\n    val resizesCaptured: Listener<Event, T> get() = subscribe(RESIZE, true)\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESIZE, true) { init(); true }\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(RESIZE, true, selector = selector)\n\n    /**\n     * occurs when a form is reset\n     */\n    val resetsCaptured: Listener<Event, T> get() = subscribe(RESET, true)\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resetsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESET, true) { init(); true }\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resetsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(RESET, true, selector = selector)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     */\n    val scrollsCaptured: Listener<Event, T> get() = subscribe(SCROLL, true)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrollsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SCROLL, true) { init(); true }\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrollsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SCROLL, true, selector = selector)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     */\n    val searchsCaptured: Listener<Event, T> get() = subscribe(SEARCH, true)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEARCH, true) { init(); true }\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SEARCH, true, selector = selector)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     */\n    val seekedsCaptured: Listener<Event, T> get() = subscribe(SEEKED, true)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekedsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKED, true) { init(); true }\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekedsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SEEKED, true, selector = selector)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     */\n    val seekingsCaptured: Listener<Event, T> get() = subscribe(SEEKING, true)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekingsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKING, true) { init(); true }\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekingsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SEEKING, true, selector = selector)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     */\n    val selectsCaptured: Listener<Event, T> get() = subscribe(SELECT, true)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selectsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SELECT, true) { init(); true }\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selectsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SELECT, true, selector = selector)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     */\n    val showsCaptured: Listener<Event, T> get() = subscribe(SHOW, true)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun showsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SHOW, true) { init(); true }\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun showsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SHOW, true, selector = selector)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     */\n    val stalledsCaptured: Listener<Event, T> get() = subscribe(STALLED, true)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalledsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(STALLED, true) { init(); true }\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalledsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(STALLED, true, selector = selector)\n\n    /**\n     * occurs when a Web Storage area is updated\n     */\n    val storagesCaptured: Listener<StorageEvent, T> get() = subscribe(STORAGE, true)\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storagesCaptured(init: StorageEvent.() -> Unit): Listener<StorageEvent, T> =\n        subscribe(STORAGE, true) { init(); true }\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storagesCapturedIf(selector: StorageEvent.() -> Boolean): Listener<StorageEvent, T> =\n        subscribe(STORAGE, true, selector = selector)\n\n    /**\n     * occurs when a form is submitted\n     */\n    val submitsCaptured: Listener<Event, T> get() = subscribe(SUBMIT, true)\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submitsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUBMIT, true) { init(); true }\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submitsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SUBMIT, true, selector = selector)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     */\n    val suspendsCaptured: Listener<Event, T> get() = subscribe(SUSPEND, true)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspendsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUSPEND, true) { init(); true }\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspendsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SUSPEND, true, selector = selector)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     */\n    val timeupdatesCaptured: Listener<Event, T> get() = subscribe(TIMEUPDATE, true)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdatesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(TIMEUPDATE, true) { init(); true }\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdatesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TIMEUPDATE, true, selector = selector)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     */\n    val togglesCaptured: Listener<Event, T> get() = subscribe(TOGGLE, true)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun togglesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(TOGGLE, true) { init(); true }\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun togglesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TOGGLE, true, selector = selector)\n\n    /**\n     * occurs when the touch is interrupted\n     */\n    val touchcancelsCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHCANCEL, true)\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancelsCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHCANCEL, true) { init(); true }\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancelsCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHCANCEL, true, selector = selector)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     */\n    val touchendsCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHEND, true)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchendsCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHEND, true) { init(); true }\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchendsCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHEND, true, selector = selector)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     */\n    val touchmovesCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHMOVE, true)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmovesCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHMOVE, true) { init(); true }\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmovesCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHMOVE, true, selector = selector)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     */\n    val touchstartsCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHSTART, true)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstartsCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHSTART, true) { init(); true }\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstartsCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHSTART, true, selector = selector)\n\n    /**\n     * occurs when a CSS transition has completed\n     */\n    val transitionendsCaptured: Listener<Event, T> get() = subscribe(TRANSITIONEND, true)\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionendsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(TRANSITIONEND, true) { init(); true }\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionendsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TRANSITIONEND, true, selector = selector)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     */\n    val unloadsCaptured: Listener<Event, T> get() = subscribe(UNLOAD, true)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloadsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(UNLOAD, true) { init(); true }\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloadsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(UNLOAD, true, selector = selector)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     */\n    val volumechangesCaptured: Listener<Event, T> get() = subscribe(VOLUMECHANGE, true)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechangesCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(VOLUMECHANGE, true) { init(); true }\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(VOLUMECHANGE, true, selector = selector)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     */\n    val waitingsCaptured: Listener<Event, T> get() = subscribe(WAITING, true)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitingsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(WAITING, true) { init(); true }\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitingsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(WAITING, true, selector = selector)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     */\n    val wheelsCaptured: Listener<WheelEvent, T> get() = subscribe(WHEEL, true)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheelsCaptured(init: WheelEvent.() -> Unit): Listener<WheelEvent, T> = subscribe(WHEEL, true) { init(); true }\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheelsCapturedIf(selector: WheelEvent.() -> Boolean): Listener<WheelEvent, T> =\n        subscribe(WHEEL, true, selector = selector)\n}\n\n/**\n * Represents all [Event]s of the browser [window] object as [Event]-flows\n */\nobject Window : WithEvents<Window> {\n\n    private val scope = MainScope()\n\n    override fun <X : Event> subscribe(\n        eventName: String,\n        capture: Boolean,\n        selector: X.() -> Boolean\n    ): Listener<X, Window> =\n        Listener(window.subscribe<X, Window>(eventName, capture, selector).shareIn(scope, SharingStarted.Lazily))\n\n    override val aborts by lazy { super.aborts }\n    override val afterprints by lazy { super.afterprints }\n    override val animationends by lazy { super.animationends }\n    override val animationiterations by lazy { super.animationiterations }\n    override val animationstarts by lazy { super.animationstarts }\n    override val beforeprints by lazy { super.beforeprints }\n    override val beforeunloads by lazy { super.beforeunloads }\n    override val blurs by lazy { super.blurs }\n    override val canplays by lazy { super.canplays }\n    override val canplaythroughs by lazy { super.canplaythroughs }\n    override val changes by lazy { super.changes }\n    override val clicks by lazy { super.clicks }\n    override val contextmenus by lazy { super.contextmenus }\n    override val copys by lazy { super.copys }\n    override val cuts by lazy { super.cuts }\n    override val dblclicks by lazy { super.dblclicks }\n    override val drags by lazy { super.drags }\n    override val dragends by lazy { super.dragends }\n    override val dragenters by lazy { super.dragenters }\n    override val dragleaves by lazy { super.dragleaves }\n    override val dragovers by lazy { super.dragovers }\n    override val dragstarts by lazy { super.dragstarts }\n    override val drops by lazy { super.drops }\n    override val durationchanges by lazy { super.durationchanges }\n    override val endeds by lazy { super.endeds }\n    override val errors by lazy { super.errors }\n    override val focuss by lazy { super.focuss }\n    override val focusins by lazy { super.focusins }\n    override val focusouts by lazy { super.focusouts }\n    override val fullscreenchanges by lazy { super.fullscreenchanges }\n    override val fullscreenerrors by lazy { super.fullscreenerrors }\n    override val hashchanges by lazy { super.hashchanges }\n    override val inputs by lazy { super.inputs }\n    override val invalids by lazy { super.invalids }\n    override val keydowns by lazy { super.keydowns }\n    override val keypresss by lazy { super.keypresss }\n    override val keyups by lazy { super.keyups }\n    override val loads by lazy { super.loads }\n    override val loadeddatas by lazy { super.loadeddatas }\n    override val loadedmetadatas by lazy { super.loadedmetadatas }\n    override val loadstarts by lazy { super.loadstarts }\n    override val messages by lazy { super.messages }\n    override val mousedowns by lazy { super.mousedowns }\n    override val mouseenters by lazy { super.mouseenters }\n    override val mouseleaves by lazy { super.mouseleaves }\n    override val mousemoves by lazy { super.mousemoves }\n    override val mouseovers by lazy { super.mouseovers }\n    override val mouseouts by lazy { super.mouseouts }\n    override val mouseups by lazy { super.mouseups }\n    override val offlines by lazy { super.offlines }\n    override val onlines by lazy { super.onlines }\n    override val opens by lazy { super.opens }\n    override val pagehides by lazy { super.pagehides }\n    override val pageshows by lazy { super.pageshows }\n    override val pastes by lazy { super.pastes }\n    override val pauses by lazy { super.pauses }\n    override val plays by lazy { super.plays }\n    override val playings by lazy { super.playings }\n    override val popstates by lazy { super.popstates }\n    override val progresss by lazy { super.progresss }\n    override val ratechanges by lazy { super.ratechanges }\n    override val resizes by lazy { super.resizes }\n    override val resets by lazy { super.resets }\n    override val scrolls by lazy { super.scrolls }\n    override val searchs by lazy { super.searchs }\n    override val seekeds by lazy { super.seekeds }\n    override val seekings by lazy { super.seekings }\n    override val selects by lazy { super.selects }\n    override val shows by lazy { super.shows }\n    override val stalleds by lazy { super.stalleds }\n    override val storages by lazy { super.storages }\n    override val submits by lazy { super.submits }\n    override val suspends by lazy { super.suspends }\n    override val timeupdates by lazy { super.timeupdates }\n    override val toggles by lazy { super.toggles }\n    override val touchcancels by lazy { super.touchcancels }\n    override val touchends by lazy { super.touchends }\n    override val touchmoves by lazy { super.touchmoves }\n    override val touchstarts by lazy { super.touchstarts }\n    override val transitionends by lazy { super.transitionends }\n    override val unloads by lazy { super.unloads }\n    override val volumechanges by lazy { super.volumechanges }\n    override val waitings by lazy { super.waitings }\n    override val wheels by lazy { super.wheels }\n\n    override val abortsCaptured by lazy { super.abortsCaptured }\n    override val afterprintsCaptured by lazy { super.afterprintsCaptured }\n    override val animationendsCaptured by lazy { super.animationendsCaptured }\n    override val animationiterationsCaptured by lazy { super.animationiterationsCaptured }\n    override val animationstartsCaptured by lazy { super.animationstartsCaptured }\n    override val beforeprintsCaptured by lazy { super.beforeprintsCaptured }\n    override val beforeunloadsCaptured by lazy { super.beforeunloadsCaptured }\n    override val blursCaptured by lazy { super.blursCaptured }\n    override val canplaysCaptured by lazy { super.canplaysCaptured }\n    override val canplaythroughsCaptured by lazy { super.canplaythroughsCaptured }\n    override val changesCaptured by lazy { super.changesCaptured }\n    override val clicksCaptured by lazy { super.clicksCaptured }\n    override val contextmenusCaptured by lazy { super.contextmenusCaptured }\n    override val copysCaptured by lazy { super.copysCaptured }\n    override val cutsCaptured by lazy { super.cutsCaptured }\n    override val dblclicksCaptured by lazy { super.dblclicksCaptured }\n    override val dragsCaptured by lazy { super.dragsCaptured }\n    override val dragendsCaptured by lazy { super.dragendsCaptured }\n    override val dragentersCaptured by lazy { super.dragentersCaptured }\n    override val dragleavesCaptured by lazy { super.dragleavesCaptured }\n    override val dragoversCaptured by lazy { super.dragoversCaptured }\n    override val dragstartsCaptured by lazy { super.dragstartsCaptured }\n    override val dropsCaptured by lazy { super.dropsCaptured }\n    override val durationchangesCaptured by lazy { super.durationchangesCaptured }\n    override val endedsCaptured by lazy { super.endedsCaptured }\n    override val errorsCaptured by lazy { super.errorsCaptured }\n    override val focussCaptured by lazy { super.focussCaptured }\n    override val focusinsCaptured by lazy { super.focusinsCaptured }\n    override val focusoutsCaptured by lazy { super.focusoutsCaptured }\n    override val fullscreenchangesCaptured by lazy { super.fullscreenchangesCaptured }\n    override val fullscreenerrorsCaptured by lazy { super.fullscreenerrorsCaptured }\n    override val hashchangesCaptured by lazy { super.hashchangesCaptured }\n    override val inputsCaptured by lazy { super.inputsCaptured }\n    override val invalidsCaptured by lazy { super.invalidsCaptured }\n    override val keydownsCaptured by lazy { super.keydownsCaptured }\n    override val keypresssCaptured by lazy { super.keypresssCaptured }\n    override val keyupsCaptured by lazy { super.keyupsCaptured }\n    override val loadsCaptured by lazy { super.loadsCaptured }\n    override val loadeddatasCaptured by lazy { super.loadeddatasCaptured }\n    override val loadedmetadatasCaptured by lazy { super.loadedmetadatasCaptured }\n    override val loadstartsCaptured by lazy { super.loadstartsCaptured }\n    override val messagesCaptured by lazy { super.messagesCaptured }\n    override val mousedownsCaptured by lazy { super.mousedownsCaptured }\n    override val mouseentersCaptured by lazy { super.mouseentersCaptured }\n    override val mouseleavesCaptured by lazy { super.mouseleavesCaptured }\n    override val mousemovesCaptured by lazy { super.mousemovesCaptured }\n    override val mouseoversCaptured by lazy { super.mouseoversCaptured }\n    override val mouseoutsCaptured by lazy { super.mouseoutsCaptured }\n    override val mouseupsCaptured by lazy { super.mouseupsCaptured }\n    override val offlinesCaptured by lazy { super.offlinesCaptured }\n    override val onlinesCaptured by lazy { super.onlinesCaptured }\n    override val opensCaptured by lazy { super.opensCaptured }\n    override val pagehidesCaptured by lazy { super.pagehidesCaptured }\n    override val pageshowsCaptured by lazy { super.pageshowsCaptured }\n    override val pastesCaptured by lazy { super.pastesCaptured }\n    override val pausesCaptured by lazy { super.pausesCaptured }\n    override val playsCaptured by lazy { super.playsCaptured }\n    override val playingsCaptured by lazy { super.playingsCaptured }\n    override val popstatesCaptured by lazy { super.popstatesCaptured }\n    override val progresssCaptured by lazy { super.progresssCaptured }\n    override val ratechangesCaptured by lazy { super.ratechangesCaptured }\n    override val resizesCaptured by lazy { super.resizesCaptured }\n    override val resetsCaptured by lazy { super.resetsCaptured }\n    override val scrollsCaptured by lazy { super.scrollsCaptured }\n    override val searchsCaptured by lazy { super.searchsCaptured }\n    override val seekedsCaptured by lazy { super.seekedsCaptured }\n    override val seekingsCaptured by lazy { super.seekingsCaptured }\n    override val selectsCaptured by lazy { super.selectsCaptured }\n    override val showsCaptured by lazy { super.showsCaptured }\n    override val stalledsCaptured by lazy { super.stalledsCaptured }\n    override val storagesCaptured by lazy { super.storagesCaptured }\n    override val submitsCaptured by lazy { super.submitsCaptured }\n    override val suspendsCaptured by lazy { super.suspendsCaptured }\n    override val timeupdatesCaptured by lazy { super.timeupdatesCaptured }\n    override val togglesCaptured by lazy { super.togglesCaptured }\n    override val touchcancelsCaptured by lazy { super.touchcancelsCaptured }\n    override val touchendsCaptured by lazy { super.touchendsCaptured }\n    override val touchmovesCaptured by lazy { super.touchmovesCaptured }\n    override val touchstartsCaptured by lazy { super.touchstartsCaptured }\n    override val transitionendsCaptured by lazy { super.transitionendsCaptured }\n    override val unloadsCaptured by lazy { super.unloadsCaptured }\n    override val volumechangesCaptured by lazy { super.volumechangesCaptured }\n    override val waitingsCaptured by lazy { super.waitingsCaptured }\n    override val wheelsCaptured by lazy { super.wheelsCaptured }\n}","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.cancelChildren\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.scan\nimport kotlinx.dom.clear\nimport org.w3c.dom.*\nimport kotlin.reflect.KClass\n\n/**\n * Context for rendering static and dynamical content\n */\ninterface RenderContext : WithJob, WithScope {\n\n    /**\n     * Renders the data of a [Flow] as [Tag]s to the DOM.\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V>.render(into: Tag<HTMLElement>? = null, content: Tag<*>.(V) -> Unit) {\n        val target = into?.apply(SET_MOUNT_POINT_DATA_ATTRIBUTE)\n            ?: div(MOUNT_POINT_STYLE_CLASS, content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n        val mountContext = MountContext(Job(job), target)\n\n        mountSimple(job, this) {\n            mountContext.runBeforeUnmounts()\n            mountContext.job.cancelChildren()\n            target.domNode.clear()\n            content(mountContext, it)\n            mountContext.runAfterMounts()\n        }\n    }\n\n    /**\n     * Renders the data of a [Flow] only if the given [predicate] is true.\n     *\n     * Example:\n     * ```kotlin\n     * data class Delivery(\n     *     val state: String,\n     *     val isVisible: Boolean\n     * )\n     *\n     * val storedDelivery = storeOf(Delivery(\"in production\", true))\n     *\n     * storedDelivery.data.renderIf(Delivery::isVisible) { delivery ->\n     *     // This whole block might be re-rendered if the state is changed! (read on)\n     *     p { +\"The state of your delivery is ${delivery.state}\" }\n     * }\n     * ```\n     *\n     * Beware that the data value [V] and its changes are still handled reactively inside the [content] expression!\n     *\n     * So while the [predicate] may remain stably `true`, some other aspect of the model [V] may change in between.\n     * As a result, the whole [content]-block would be re-rendered accordingly of course!\n     *\n     * Example:\n     * ```kotlin\n     * val storedDelivery = object : Store<Delivery> by storeOf(Delivery(\"in production\", true)) {\n     *     val proceed = handle<String> { delivery, newState ->\n     *         // we dont change the visibility, so the condition will remain the same, while the state changes!\n     *         delivery.copy(state = newState)\n     *     }\n     * }\n     *\n     * button {\n     *     +\"Proceed to conveyed\"\n     *     clicks.map { \"conveyed\" } handledBy storedDelivery.proceed\n     * }\n     *\n     * storedDelivery.data.renderIf(Delivery::isVisible) { delivery ->\n     *     // This whole block will re re-rendered on button click above!\n     *     p { +\"The state of your delivery is ${delivery.state}\" }\n     * }\n     * ```\n     *\n     * If you want the content to only change once if the condition changes (i.e. switches from true to false or back)\n     * you need to rely on an appropriate [Flow]-function like\n     * [distinctUntilChangedBy](https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed-by.html)\n     *\n     * Example:\n     * ```kotlin\n     * storedDelivery.data.distinctUntilChangedBy(Delivery::isVisible).renderIf(Delivery::isVisible) { delivery ->\n     *     // This wont be re-rendered if `Delivery.state` changes!\n     *     // The whole block will disappear on `Delivery.isVisible` changes to `false`,\n     *     // and appear again on `Delivery.isVisible == true`. Then with the current `state` at that moment of course!\n     *     p { +\"The state of your delivery is ${delivery.state}\" }\n     * }\n     * ```\n     *\n     * But in most cases, that is not what you really want! Strive for solutions, where the UI portions really adopt\n     * reactively. The above is a strange hybrid case, where not all state changes are reflected by the UI.\n     *\n     * @see renderTrue\n     * @see renderFalse\n     * @see renderIs\n     * @see renderNotNull\n     *\n     * @receiver [Flow] containing the data\n     * @param predicate must be true for the value to be rendered\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V>.renderIf(\n        predicate: (V) -> Boolean,\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(V) -> Unit\n    ) {\n        render(into) {\n            if (predicate(it)) {\n                content(it)\n            }\n        }\n    }\n\n    /**\n     * Renders the data of a boolean [Flow] only if its value is `true`.\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     *\n     * @see renderIf\n     * @see renderFalse\n     * @see renderIs\n     * @see renderNotNull\n     */\n    fun Flow<Boolean>.renderTrue(\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.() -> Unit\n    ) {\n        renderIf(predicate = { it }, into) { _ ->\n            content()\n        }\n    }\n\n    /**\n     * Renders the data of a boolean [Flow] only if its value is `false`.\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     *\n     * @see renderIf\n     * @see renderTrue\n     * @see renderIs\n     * @see renderNotNull\n     */\n    fun Flow<Boolean>.renderFalse(\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.() -> Unit\n    ) {\n        renderIf(predicate = { !it }, into) { _ ->\n            content()\n        }\n    }\n\n    /**\n     * Renders the non-null data of a [Flow].\n     *\n     * @see renderIf\n     * @see renderTrue\n     * @see renderFalse\n     * @see renderIs\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V?>.renderNotNull(\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(V) -> Unit\n    ) {\n        render(into) {\n            if (it != null) {\n                content(it)\n            }\n        }\n    }\n\n    /**\n     * Renders the data of a [Flow] of type [W].\n     *\n     * @see renderIf\n     * @see renderTrue\n     * @see renderFalse\n     * @see renderNotNull\n     *\n     * @receiver [Flow] containing the data\n     * @param klass reference to the type we want to check\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    @Suppress(\"UNCHECKED_CAST\")\n    fun <W : Any> Flow<*>.renderIs(\n        klass: KClass<W>,\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(W) -> Unit\n    ) {\n        render(into) {\n            if (klass.isInstance(it)) {\n                content(it as W)\n            }\n        }\n    }\n\n    /**\n     * Renders each element of a [Flow]s content.\n     * Internally the [Patch]es are determined using Myer's diff-algorithm.\n     * This allows the detection of moves. Keep in mind, that no [Patch] is derived,\n     * when an element stays the same, but changes its internal values.\n     *\n     * @param idProvider function to identify a unique entity in the list\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param batch hide [into] while rendering patches. Useful to avoid flickering when you make many changes (like sorting)\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<List<V>>.renderEach(\n        idProvider: IdProvider<V, *>? = null,\n        into: Tag<HTMLElement>? = null,\n        batch: Boolean = false,\n        content: RenderContext.(V) -> Tag<HTMLElement>\n    ) {\n        mountPatches(into, this, batch) { upstreamValues, mountPoints ->\n            upstreamValues.scan(Pair(emptyList(), emptyList())) { acc: Pair<List<V>, List<V>>, new ->\n                Pair(acc.second, new)\n            }.map { (old, new) ->\n                Myer.diff(old, new, idProvider).map { patch ->\n                    patch.map(job) { value, newJob ->\n                        val mountPoint = BuildContext(newJob, this, scope)\n                        content(mountPoint, value).also {\n                            mountPoints[it.domNode] = mountPoint\n                        }\n                    }\n                }\n            }\n        }\n\n\n    }\n\n    /**\n     * Renders each element of a [Store]s [List] content.\n     * Internally the [Patch]es are determined using Myer's diff-algorithm.\n     * This allows the detection of moves. Keep in mind, that no [Patch] is derived,\n     * when an element stays the same, but changes its internal values.\n     *\n     * @param idProvider function to identify a unique entity in the list\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Store<List<V>>.renderEach(\n        idProvider: IdProvider<V, *>,\n        into: Tag<HTMLElement>? = null,\n        content: RenderContext.(Store<V>) -> HtmlTag<HTMLElement>\n    ) {\n        val store = this\n        data.renderEach(idProvider, into) { value ->\n            content(store.mapByElement(value, idProvider))\n        }\n    }\n\n    /**\n     * Converts the content of a [Flow] to [String] by using [toString] method.\n     *\n     * @receiver [Flow] with content\n     * @return [Flow] with content as [String]\n     */\n    fun <T> Flow<T>.asString(): Flow<String> = this.map { it.toString() }\n\n    fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W\n\n    /**\n     * Evaluates the scope context and initializes a [ScopeContext]\n     * for setting new entries to the scope.\n     *\n     * @param context to evaluate\n     */\n    private inline fun evalScope(context: (ScopeContext.() -> Unit)): Scope {\n        return ScopeContext(this@RenderContext.scope).apply(context).scope\n    }\n\n    /**\n     * Creates a custom [HtmlTag] with the provided [content].\n     *\n     * @param tagName Name of the [HtmlTag] in DOM\n     * @param content content scope for inner [HtmlTag]s\n     * @return custom [HtmlTag]\n     */\n    fun custom(\n        tagName: String,\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<Element>.() -> Unit\n    ): HtmlTag<Element> =\n        register(HtmlTag(tagName, id, baseClass, job, evalScope(scope)), content)\n\n    fun a(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAnchorElement>.() -> Unit\n    ): HtmlTag<HTMLAnchorElement> =\n        register(HtmlTag(\"a\", id, baseClass, job, evalScope(scope)), content)\n\n    fun area(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAreaElement>.() -> Unit\n    ): HtmlTag<HTMLAreaElement> =\n        register(HtmlTag(\"area\", id, baseClass, job, evalScope(scope)), content)\n\n    fun br(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLBRElement>.() -> Unit\n    ): HtmlTag<HTMLBRElement> =\n        register(HtmlTag(\"br\", id, baseClass, job, evalScope(scope)), content)\n\n    fun button(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLButtonElement>.() -> Unit\n    ): HtmlTag<HTMLButtonElement> =\n        register(HtmlTag(\"button\", id, baseClass, job, evalScope(scope)), content)\n\n    fun canvas(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLCanvasElement>.() -> Unit\n    ): HtmlTag<HTMLCanvasElement> =\n        register(HtmlTag(\"canvas\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dl(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDListElement>.() -> Unit\n    ): HtmlTag<HTMLDListElement> =\n        register(HtmlTag(\"dl\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dt(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"dt\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dd(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"dd\", id, baseClass, job, evalScope(scope)), content)\n\n    fun data(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDataElement>.() -> Unit\n    ): HtmlTag<HTMLDataElement> =\n        register(HtmlTag(\"data\", id, baseClass, job, evalScope(scope)), content)\n\n    fun datalist(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDataListElement>.() -> Unit\n    ): HtmlTag<HTMLDataListElement> =\n        register(HtmlTag(\"datalist\", id, baseClass, job, evalScope(scope)), content)\n\n    fun details(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDetailsElement>.() -> Unit\n    ): HtmlTag<HTMLDetailsElement> =\n        register(HtmlTag(\"details\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dialog(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDialogElement>.() -> Unit\n    ): HtmlTag<HTMLDialogElement> =\n        register(HtmlTag(\"dialog\", id, baseClass, job, evalScope(scope)), content)\n\n    fun div(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDivElement>.() -> Unit\n    ): HtmlTag<HTMLDivElement> =\n        register(HtmlTag(\"div\", id, baseClass, job, evalScope(scope)), content)\n\n    fun embed(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLEmbedElement>.() -> Unit\n    ): HtmlTag<HTMLEmbedElement> =\n        register(HtmlTag(\"embed\", id, baseClass, job, evalScope(scope)), content)\n\n    fun fieldset(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLFieldSetElement>.() -> Unit\n    ): HtmlTag<HTMLFieldSetElement> =\n        register(HtmlTag(\"fieldset\", id, baseClass, job, evalScope(scope)), content)\n\n    fun form(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLFormElement>.() -> Unit\n    ): HtmlTag<HTMLFormElement> =\n        register(HtmlTag(\"form\", id, baseClass, job, evalScope(scope)), content)\n\n    fun hr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHRElement>.() -> Unit\n    ): HtmlTag<HTMLHRElement> =\n        register(HtmlTag(\"hr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h1(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h1\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h2(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h2\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h3(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h3\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h4(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h4\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h5(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h5\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h6(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h6\", id, baseClass, job, evalScope(scope)), content)\n\n    fun iframe(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLIFrameElement>.() -> Unit\n    ): HtmlTag<HTMLIFrameElement> =\n        register(HtmlTag(\"iframe\", id, baseClass, job, evalScope(scope)), content)\n\n    fun img(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLImageElement>.() -> Unit\n    ): HtmlTag<HTMLImageElement> =\n        register(HtmlTag(\"img\", id, baseClass, job, evalScope(scope)), content)\n\n    fun input(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLInputElement>.() -> Unit\n    ): HtmlTag<HTMLInputElement> =\n        register(HtmlTag(\"input\", id, baseClass, job, evalScope(scope)), content)\n\n    fun li(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLIElement>.() -> Unit\n    ): HtmlTag<HTMLLIElement> =\n        register(HtmlTag(\"li\", id, baseClass, job, evalScope(scope)), content)\n\n    fun label(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLabelElement>.() -> Unit\n    ): HtmlTag<HTMLLabelElement> =\n        register(HtmlTag(\"label\", id, baseClass, job, evalScope(scope)), content)\n\n    fun legend(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLegendElement>.() -> Unit\n    ): HtmlTag<HTMLLegendElement> =\n        register(HtmlTag(\"legend\", id, baseClass, job, evalScope(scope)), content)\n\n    fun map(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLMapElement>.() -> Unit\n    ): HtmlTag<HTMLMapElement> =\n        register(HtmlTag(\"map\", id, baseClass, job, evalScope(scope)), content)\n\n    fun audio(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAudioElement>.() -> Unit\n    ): HtmlTag<HTMLAudioElement> =\n        register(HtmlTag(\"audio\", id, baseClass, job, evalScope(scope)), content)\n\n    fun video(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLVideoElement>.() -> Unit\n    ): HtmlTag<HTMLVideoElement> =\n        register(HtmlTag(\"video\", id, baseClass, job, evalScope(scope)), content)\n\n    fun meter(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLMeterElement>.() -> Unit\n    ): HtmlTag<HTMLMeterElement> =\n        register(HtmlTag(\"meter\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ins(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLModElement>.() -> Unit\n    ): HtmlTag<HTMLModElement> =\n        register(HtmlTag(\"ins\", id, baseClass, job, evalScope(scope)), content)\n\n    fun del(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLModElement>.() -> Unit\n    ): HtmlTag<HTMLModElement> =\n        register(HtmlTag(\"del\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ol(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOListElement>.() -> Unit\n    ): HtmlTag<HTMLOListElement> =\n        register(HtmlTag(\"ol\", id, baseClass, job, evalScope(scope)), content)\n\n    fun `object`(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLObjectElement>.() -> Unit\n    ): HtmlTag<HTMLObjectElement> =\n        register(HtmlTag(\"object\", id, baseClass, job, evalScope(scope)), content)\n\n    fun optgroup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOptGroupElement>.() -> Unit\n    ): HtmlTag<HTMLOptGroupElement> =\n        register(HtmlTag(\"optgroup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun option(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOptionElement>.() -> Unit\n    ): HtmlTag<HTMLOptionElement> =\n        register(HtmlTag(\"option\", id, baseClass, job, evalScope(scope)), content)\n\n    fun output(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOutputElement>.() -> Unit\n    ): HtmlTag<HTMLOutputElement> =\n        register(HtmlTag(\"output\", id, baseClass, job, evalScope(scope)), content)\n\n    fun p(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLParagraphElement>.() -> Unit\n    ): HtmlTag<HTMLParagraphElement> =\n        register(HtmlTag(\"p\", id, baseClass, job, evalScope(scope)), content)\n\n    fun param(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLParamElement>.() -> Unit\n    ): HtmlTag<HTMLParamElement> =\n        register(HtmlTag(\"param\", id, baseClass, job, evalScope(scope)), content)\n\n    fun picture(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLPictureElement>.() -> Unit\n    ): HtmlTag<HTMLPictureElement> =\n        register(HtmlTag(\"picture\", id, baseClass, job, evalScope(scope)), content)\n\n    fun pre(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLPreElement>.() -> Unit\n    ): HtmlTag<HTMLPreElement> =\n        register(HtmlTag(\"pre\", id, baseClass, job, evalScope(scope)), content)\n\n    fun progress(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLProgressElement>.() -> Unit\n    ): HtmlTag<HTMLProgressElement> =\n        register(HtmlTag(\"progress\", id, baseClass, job, evalScope(scope)), content)\n\n    fun quote(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"quote\", id, baseClass, job, evalScope(scope)), content)\n\n    fun script(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLScriptElement>.() -> Unit\n    ): HtmlTag<HTMLScriptElement> =\n        register(HtmlTag(\"script\", id, baseClass, job, evalScope(scope)), content)\n\n    fun select(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSelectElement>.() -> Unit\n    ): HtmlTag<HTMLSelectElement> =\n        register(HtmlTag(\"select\", id, baseClass, job, evalScope(scope)), content)\n\n    fun span(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"span\", id, baseClass, job, evalScope(scope)), content)\n\n    fun caption(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCaptionElement>.() -> Unit\n    ): HtmlTag<HTMLTableCaptionElement> =\n        register(HtmlTag(\"caption\", id, baseClass, job, evalScope(scope)), content)\n\n    fun th(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCellElement>.() -> Unit\n    ): HtmlTag<HTMLTableCellElement> =\n        register(HtmlTag(\"th\", id, baseClass, job, evalScope(scope)), content)\n\n    fun td(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCellElement>.() -> Unit\n    ): HtmlTag<HTMLTableCellElement> =\n        register(HtmlTag(\"td\", id, baseClass, job, evalScope(scope)), content)\n\n    fun col(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableColElement>.() -> Unit\n    ): HtmlTag<HTMLTableColElement> =\n        register(HtmlTag(\"col\", id, baseClass, job, evalScope(scope)), content)\n\n    fun colgroup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableColElement>.() -> Unit\n    ): HtmlTag<HTMLTableColElement> =\n        register(HtmlTag(\"colgroup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun table(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableElement>.() -> Unit\n    ): HtmlTag<HTMLTableElement> =\n        register(HtmlTag(\"table\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableRowElement>.() -> Unit\n    ): HtmlTag<HTMLTableRowElement> =\n        register(HtmlTag(\"tr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tfoot(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"tfoot\", id, baseClass, job, evalScope(scope)), content)\n\n    fun thead(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"thead\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tbody(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"tbody\", id, baseClass, job, evalScope(scope)), content)\n\n    fun textarea(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTextAreaElement>.() -> Unit\n    ): HtmlTag<HTMLTextAreaElement> =\n        register(HtmlTag(\"textarea\", id, baseClass, job, evalScope(scope)), content)\n\n    fun time(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTimeElement>.() -> Unit\n    ): HtmlTag<HTMLTimeElement> =\n        register(HtmlTag(\"time\", id, baseClass, job, evalScope(scope)), content)\n\n    fun track(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTrackElement>.() -> Unit\n    ): HtmlTag<HTMLTrackElement> =\n        register(HtmlTag(\"track\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ul(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLUListElement>.() -> Unit\n    ): HtmlTag<HTMLUListElement> =\n        register(HtmlTag(\"ul\", id, baseClass, job, evalScope(scope)), content)\n\n    fun address(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"address\", id, baseClass, job, evalScope(scope)), content)\n\n    fun article(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"article\", id, baseClass, job, evalScope(scope)), content)\n\n    fun aside(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"aside\", id, baseClass, job, evalScope(scope)), content)\n\n    fun bdi(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"bdi\", id, baseClass, job, evalScope(scope)), content)\n\n    fun figcaption(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"figcaption\", id, baseClass, job, evalScope(scope)), content)\n\n    fun figure(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"figure\", id, baseClass, job, evalScope(scope)), content)\n\n    fun footer(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"footer\", id, baseClass, job, evalScope(scope)), content)\n\n    fun header(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"header\", id, baseClass, job, evalScope(scope)), content)\n\n    fun main(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"main\", id, baseClass, job, evalScope(scope)), content)\n\n    fun mark(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"mark\", id, baseClass, job, evalScope(scope)), content)\n\n    fun nav(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"nav\", id, baseClass, job, evalScope(scope)), content)\n\n    fun noscript(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"noscript\", id, baseClass, job, evalScope(scope)), content)\n\n    fun rp(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"rp\", id, baseClass, job, evalScope(scope)), content)\n\n    fun rt(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"rt\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ruby(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"ruby\", id, baseClass, job, evalScope(scope)), content)\n\n    fun section(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"section\", id, baseClass, job, evalScope(scope)), content)\n\n    fun summary(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"summary\", id, baseClass, job, evalScope(scope)), content)\n\n    fun wbr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"wbr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun blockquote(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"blockquote\", id, baseClass, job, evalScope(scope)), content)\n\n    fun em(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"em\", id, baseClass, job, evalScope(scope)), content)\n\n    fun strong(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"strong\", id, baseClass, job, evalScope(scope)), content)\n\n    fun s(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"s\", id, baseClass, job, evalScope(scope)), content)\n\n    fun cite(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"cite\", id, baseClass, job, evalScope(scope)), content)\n\n    fun q(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"q\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dfn(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"dfn\", id, baseClass, job, evalScope(scope)), content)\n\n    fun abbr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"abbr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun code(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"code\", id, baseClass, job, evalScope(scope)), content)\n\n    fun `var`(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"var\", id, baseClass, job, evalScope(scope)), content)\n\n    fun samp(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"samp\", id, baseClass, job, evalScope(scope)), content)\n\n    fun kbd(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"kbd\", id, baseClass, job, evalScope(scope)), content)\n\n    fun sub(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"sub\", id, baseClass, job, evalScope(scope)), content)\n\n    fun sup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"sup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun i(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"i\", id, baseClass, job, evalScope(scope)), content)\n\n    fun b(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"b\", id, baseClass, job, evalScope(scope)), content)\n\n    fun u(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"u\", id, baseClass, job, evalScope(scope)), content)\n\n    fun bdo(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"bdo\", id, baseClass, job, evalScope(scope)), content)\n\n    fun command(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"command\", id, baseClass, job, evalScope(scope)), content)\n\n    fun svg(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: SvgTag.() -> Unit\n    ): SvgTag =\n        register(SvgTag(\"svg\", id, baseClass, job = job, evalScope(scope)), content)\n\n    fun path(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: SvgTag.() -> Unit\n    ): SvgTag =\n        register(SvgTag(\"path\", id, baseClass, job = job, evalScope(scope)), content)\n}\n",null,"package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.dom.clear\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.Node\n\n/**\n * Defines type for a handler for lifecycle-events\n */\ntypealias DomLifecycleHandler = suspend (WithDomNode<Element>, Any?) -> Unit\n\ninternal class DomLifecycleListener(\n    val target: WithDomNode<Element>,\n    val payload: Any? = null,\n    val handler: DomLifecycleHandler\n)\n\n/**\n * External interface to access the MountPoint where the lifecycle of [Tag]s and subtrees is handled.\n */\ninterface MountPoint {\n\n    /**\n     * Registers a [DomLifecycleHandler] on a given target that ist called right after the target is mounted to the DOM.\n     *\n     * @param target the element the lifecycle-handler will be registered for\n     * @param payload some optional data that might be used by the [handler] to do its work\n     * @param handler defines, what to do (with [payload]), when [target] has just been mounted to the DOM\n     */\n    fun afterMount(target: WithDomNode<Element>, payload: Any? = null, handler: DomLifecycleHandler)\n\n    /**\n     * Registers a [DomLifecycleHandler] on a given target that ist called right before the target is removed from the DOM.\n     *\n     * @param target the element the lifecycle-handler will be registered for\n     * @param payload some optional data that might be used by the [handler] to do its work\n     * @param handler defines, what to do (with [payload]), when [target] has just been mounted to the DOM\n     */\n    fun beforeUnmount(target: WithDomNode<Element>, payload: Any? = null, handler: DomLifecycleHandler)\n}\n\ninternal abstract class MountPointImpl : MountPoint, WithJob {\n\n\n    private val mutex = Mutex()\n\n    suspend fun runBeforeUnmounts() = withContext(NonCancellable) {\n        mutex.withLock {\n            beforeUnmountListeners.forEach {\n                try {\n                    it.handler(it.target, it.payload)\n                } catch (e: Exception) {\n                    console.error(\"Error in beforeUnmounts\", e)\n                }\n            }\n            beforeUnmountListeners.clear()\n        }\n    }\n\n\n    suspend fun runAfterMounts() = withContext(NonCancellable) {\n        afterMountListeners.forEach {\n            try {\n                it.handler(it.target, it.payload)\n            } catch (e: Exception) {\n                console.error(\"Error in afterMounts\", e)\n            }\n        }\n        afterMountListeners.clear()\n    }\n\n    private val afterMountListeners: MutableList<DomLifecycleListener> = mutableListOf()\n\n    private val beforeUnmountListeners: MutableList<DomLifecycleListener> = mutableListOf()\n\n    override fun afterMount(target: WithDomNode<Element>, payload: Any?, handler: DomLifecycleHandler) {\n        afterMountListeners.add(DomLifecycleListener(target, payload, handler))\n    }\n\n    override fun beforeUnmount(target: WithDomNode<Element>, payload: Any?, handler: DomLifecycleHandler) {\n        beforeUnmountListeners.add(DomLifecycleListener(target, payload, handler))\n    }\n}\n\nval MOUNT_POINT_KEY = Scope.Key<MountPoint>(\"MOUNT_POINT\")\n\n/**\n * Allows to access the nearest [MountPoint] from any [WithScope]\n */\nfun WithScope.mountPoint(): MountPoint? = this.scope[MOUNT_POINT_KEY]\n\n/**\n * Convenience method to register lifecycle handler for after a [Tag] is mounted\n *\n * @param handler [DomLifecycleHandler] to be called on this [Tag] after it is mounted to the DOM\n * @param payload optional payload the handler requires\n * @receiver the [Tag] to register the lifecycle handler for\n */\nfun <T : Element> Tag<T>.afterMount(payload: Any? = null, handler: DomLifecycleHandler) {\n    mountPoint()?.afterMount(this, payload, handler)\n}\n\n/**\n * Convenience method to register lifecycle handler for before a [Tag] is unmounted\n *\n * @param handler [DomLifecycleHandler] to be called on this [Tag] before it is removed from the DOM\n * @param payload optional payload the handler requires\n * @receiver the [Tag] to register the lifecycle handler for\n */\nfun <T : Element> Tag<T>.beforeUnmount(payload: Any? = null, handler: DomLifecycleHandler) {\n    mountPoint()?.beforeUnmount(this, payload, handler)\n}\n\ninternal class MountContext<T : HTMLElement>(\n    override val job: Job,\n    val target: Tag<T>,\n    mountScope: Scope = target.scope,\n) : Tag<HTMLElement>, MountPointImpl() {\n\n    override val domNode: HTMLElement = target.domNode\n    override val id = target.id\n    override val baseClass = target.baseClass\n    override fun className(value: String) = target.className(value)\n    override fun className(value: Flow<String>, initial: String) = target.className(value, initial)\n\n    override val annex: RenderContext = target.annex\n\n    override val scope: Scope = Scope(mountScope).apply { set(MOUNT_POINT_KEY, this@MountContext) }\n\n    override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        return target.register(element, content)\n    }\n\n    init {\n        target.beforeUnmount { _, _ -> runBeforeUnmounts() }\n    }\n}\n\ninternal class BuildContext(\n    override val job: Job,\n    target: Tag<*>,\n    mountScope: Scope,\n) : RenderContext, MountPointImpl() {\n\n    override val scope: Scope = Scope(mountScope).apply { set(MOUNT_POINT_KEY, this@BuildContext) }\n\n    override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        content(element)\n        return element\n    }\n\n    init {\n        target.beforeUnmount { _, _ -> runBeforeUnmounts() }\n    }\n}\n\n/**\n * Defines the dedicated style class, that any mount-point will get by default.\n * Its only purpose is to exclude the mount-point tag to appear in the visual representation of the DOM.\n */\nconst val MOUNT_POINT_STYLE_CLASS = \"mount-point\"\n\ninternal val SET_MOUNT_POINT_DATA_ATTRIBUTE: Tag<*>.() -> Unit = {\n    attr(\"data-mount-point\", true)\n}\n\n/**\n * collects the values of a given [Flow] one by one.\n * Use this for data-types that represent a single (simple or complex) value.\n *\n * @param parentJob parent Job for starting a new coroutine\n * @param upstream returns the Flow that should be mounted at this point\n * @param collect function which getting called when values are changing (rerender)\n */\ninline fun <T> mountSimple(parentJob: Job, upstream: Flow<T>, crossinline collect: suspend (T) -> Unit) {\n    (MainScope() + parentJob).launch(start = CoroutineStart.UNDISPATCHED) {\n        upstream.distinctUntilChanged().mapLatest { collect(it);it }.catch {\n            when (it) {\n                is CollectionLensGetException -> {}\n                else -> console.error(it)\n            }\n            // do not do anything here but canceling the coroutine, because this is an expected\n            // behaviour when dealing with filtering, renderEach and idProvider\n            cancel(\"error mounting\", it)\n        }.collect()\n    }\n}\n\n/**\n * Mounts a [Flow] of [Patch]es to the DOM either\n *  - creating a new context-Div as a child of the receiver\n *  - or, if [into] is set, replacing all children of this [Tag].\n *\n * @param into if set defines the target to mount the content to (replacing its static content)\n * @param upstream the [Flow] that should be mounted\n * @param batch hide [into] while rendering patches. Useful to avoid flickering when you make many changes (like sorting)\n * @param createPatches lambda defining, how to compare two versions of a [List]\n */\ninternal fun <V> RenderContext.mountPatches(\n    into: Tag<HTMLElement>?,\n    upstream: Flow<List<V>>,\n    batch: Boolean,\n    createPatches: Tag<HTMLElement>.(Flow<List<V>>, MutableMap<Node, MountPointImpl>) -> Flow<List<Patch<Tag<HTMLElement>>>>,\n) {\n    val target = into?.apply {\n        this.domNode.clear()\n        SET_MOUNT_POINT_DATA_ATTRIBUTE()\n    } ?: div(MOUNT_POINT_STYLE_CLASS, content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n    val mountPoints = mutableMapOf<Node, MountPointImpl>()\n\n    mountSimple(\n        target.job,\n        createPatches(target, upstream.onEach { if (batch) target.inlineStyle(\"visibility: hidden;\") }, mountPoints)\n    ) { patches ->\n        withContext(NonCancellable) {\n            patches.forEach { patch ->\n                when (patch) {\n                    is Patch.Insert -> insert(target.domNode, mountPoints, patch.element, patch.index)\n                    is Patch.InsertMany -> insertMany(target.domNode, mountPoints, patch.elements, patch.index)\n                    is Patch.Delete -> delete(target.domNode, mountPoints, patch.start, patch.count)\n                    is Patch.Move -> move(target.domNode, patch.from, patch.to)\n                }\n            }\n        }\n        if (batch) {\n            kotlinx.browser.window.awaitAnimationFrame()\n            target.inlineStyle(\"\")\n        }\n    }\n}\n\n\n/**\n * Inserts or appends elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param child Node to insert or append\n * @param index place to insert or append\n */\nprivate fun insertOrAppend(target: Node, child: Node, index: Int) {\n    if (index == target.childNodes.length) target.appendChild(child)\n    else target.childNodes.item(index)?.let {\n        target.insertBefore(child, it)\n    }\n}\n\n/**\n * Inserts or appends elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param element from type [WithDomNode]\n * @param index place to insert or append\n */\nprivate suspend inline fun insert(\n    target: Node,\n    mountPoints: MutableMap<Node, MountPointImpl>,\n    element: WithDomNode<*>,\n    index: Int\n) {\n    insertOrAppend(target, element.domNode, index)\n    mountPoints[element.domNode]?.runAfterMounts()\n}\n\n/**\n * Inserts a [List] of elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param elements [List] of [WithDomNode]s elements to insert\n * @param index place to insert or append\n */\nprivate suspend inline fun insertMany(\n    target: Node,\n    mountPoints: MutableMap<Node, MountPointImpl>,\n    elements: List<WithDomNode<*>>,\n    index: Int\n) {\n    val f = document.createDocumentFragment()\n    for (child in elements) {\n        f.append(child.domNode)\n        mountPoints[child.domNode]?.runAfterMounts()\n    }\n    insertOrAppend(target, f, index)\n}\n\n/**\n * Deletes elements from the DOM.\n *\n * @receiver target DOM-Node\n * @param start position for deleting\n * @param count of elements to delete\n */\nprivate suspend inline fun delete(target: Node, mountPoints: MutableMap<Node, MountPointImpl>, start: Int, count: Int) {\n    var itemToDelete = target.childNodes.item(start)\n    repeat(count) {\n        itemToDelete?.let {\n            itemToDelete = it.nextSibling\n            mountPoints.remove(it)?.let { mountPoint ->\n                mountPoint.runBeforeUnmounts()\n                mountPoint.job.cancelChildren()\n                target.removeChild(it)\n            }\n        }\n    }\n}\n\n/**\n * Moves elements from on place to another in the DOM.\n *\n * @receiver target DOM-Node\n * @param from position index\n * @param to position index\n */\nprivate fun move(target: Node, from: Int, to: Int) {\n    val itemToMove = target.childNodes.item(from)\n    if (itemToMove != null) insertOrAppend(target, itemToMove, to)\n}\n\n",null,null,null,"package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.plus\nimport kotlinx.dom.clear\nimport org.w3c.dom.Element\nimport org.w3c.dom.Node\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.svg.SVGElement\n\n/**\n * A marker to separate the layers of calls in the type-safe-builder pattern.\n */\n@DslMarker\nannotation class HtmlTagMarker\n\n/**\n * Represents a tag.\n * Sorry for the name, but we needed to delimit it from the [Element] it is wrapping.\n */\ninterface Tag<out E : Element> : RenderContext, WithDomNode<E>, WithEvents<E> {\n\n    /**\n     * id of this [Tag]\n     */\n    val id: String?\n\n    /**\n     * constant css-classes of this [Tag]\n     */\n    val baseClass: String?\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: String) {\n        domNode.setAttribute(name, value)\n    }\n\n    /**\n     * Sets an attribute only if its [value] is not null.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: String?) {\n        if (value != null) domNode.setAttribute(name, value)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: Flow<String>) {\n        mountSimple(job, value) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute only for all none null values of the flow.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: Flow<String?>) {\n        mountSimple(job, value) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun <T> attr(name: String, value: T) {\n        attr(name, value?.toString())\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun <T> attr(name: String, value: Flow<T>) {\n        mountSimple(job, value.map { it?.toString() }) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Boolean, trueValue: String = \"\") {\n        if (value) domNode.setAttribute(name, trueValue)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Boolean?, trueValue: String = \"\") {\n        if (value != null && value) domNode.setAttribute(name, trueValue)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Flow<Boolean>, trueValue: String = \"\") {\n        mountSimple(job, value) { v -> attr(name, v, trueValue) }\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Flow<Boolean?>, trueValue: String = \"\") {\n        mountSimple(job, value) { v -> attr(name, v, trueValue) }\n    }\n\n    /**\n     * Adds a [String] of class names to the classes attribute of this [Tag]\n     *\n     * @param value as [String]\n     */\n    fun className(value: String)\n\n    /**\n     * Adds a [Flow] of class names to the classes attribute of this [Tag]\n     *\n     * @param value [Flow] with [String]\n     */\n    fun className(value: Flow<String>, initial: String = \"\")\n\n    /**\n     * Uses a [Flow] of [T] to create some class names by a [transform] lambda expression and add them to the classes\n     * attribute of the [Tag].\n     *\n     * In order to set some classes immediately, you must provide an initial [T] which is used to create the\n     * initial classes value with the [transform] lambda.\n     *\n     * Use this function to avoid flickering effects on reactively based styling!\n     *\n     * @param value a [Flow] of [T] that provides the parameter for the [transform] lambda\n     * @param initial a [T] to be used as initial state in order to generate and add class names\n     * immediately without waiting for the first value of the [Flow]\n     * @param transform a lambda expression which finally creates class names by passing one [T]\n     */\n    fun <T> className(value: Flow<T>, initial: T, transform: (T) -> String) {\n        className(value.map(transform), transform(initial))\n    }\n\n    /**\n     * Sets the *class* attribute from a [List] of [String]s.\n     *\n     * @param values as [List] of [String]s\n     */\n    fun classList(values: List<String>) {\n        className(values.joinToString(\" \"))\n    }\n\n    /**\n     * Sets the *class* attribute from a [List] of [String]s.\n     *\n     * @param values [Flow] with [List] of [String]s\n     */\n    fun classList(values: Flow<List<String>>) {\n        className(values.map { it.joinToString(\" \") })\n    }\n\n    /**\n     * Sets the *class* attribute from a [Map] of [String] to [Boolean].\n     * If the value of the [Map]-entry is true, the key will be used inside the resulting [String].\n     *\n     * @param values as [Map] with key to set and corresponding values to decide\n     */\n    fun classMap(values: Map<String, Boolean>) {\n        className(values.filter { it.value }.keys.joinToString(\" \"))\n    }\n\n    /**\n     * Sets the *class* attribute from a [Map] of [String] to [Boolean].\n     * If the value of the [Map]-entry is true, the key will be used inside the resulting [String].\n     *\n     * @param values [Flow] of [Map] with key to set and corresponding values to decide\n     */\n    fun classMap(values: Flow<Map<String, Boolean>>) {\n        className(values.map { map -> map.filter { it.value }.keys.joinToString(\" \") })\n    }\n\n    /**\n     * Sets the *style* attribute.\n     *\n     * @param value [String] to set\n     */\n    fun inlineStyle(value: String) {\n        attr(\"style\", value)\n    }\n\n    /**\n     * Sets the *style* attribute.\n     *\n     * @param value [Flow] with [String]\n     */\n    fun inlineStyle(value: Flow<String>) {\n        attr(\"style\", value)\n    }\n\n    /**\n     * Sets all scope-entries as data-attributes to the element.\n     */\n    fun Scope.asDataAttr() {\n        for ((k, v) in this) {\n            attr(\"data-${k.name}\", v.toString())\n        }\n    }\n\n    override fun <X : Event> subscribe(eventName: String, capture: Boolean, selector: X.() -> Boolean): Listener<X, E> =\n        Listener(domNode.subscribe(eventName, capture, selector))\n\n    /**\n     * Adds text-content of a [Flow] at this position\n     *\n     * @param into target to render text-content to\n     * @receiver text-content\n     */\n    fun Flow<String>.renderText(into: Tag<*>? = null) {\n        val target = into?.apply(SET_MOUNT_POINT_DATA_ATTRIBUTE) ?: span(content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n        mountSimple(job, this) { content ->\n            target.domNode.clear()\n            target.domNode.appendChild(window.document.createTextNode(content))\n        }\n    }\n\n    /**\n     * Adds text-content of a [Flow] at this position\n     *\n     * @param into target to render text-content to\n     * @receiver text-content\n     */\n    fun <T> Flow<T>.renderText(into: Tag<*>? = null) = this.asString().renderText(into)\n\n    /**\n     * Adds static text-content at this position\n     *\n     * @receiver text-content\n     */\n    operator fun String.unaryPlus(): Node = domNode.appendChild(document.createTextNode(this))\n\n    /**\n     * Adds a comment in your HTML by using !\"Comment Text\".\n     *\n     * @receiver comment-content\n     */\n    operator fun String.not(): Node = domNode.appendChild(document.createComment(this))\n\n    /**\n     * Sets scope-entry for the given [key] as data-attribute to the element\n     * when available.\n     *\n     * @param key key of scope-entry to look for in scope\n     */\n    fun <T : Any> Scope.asDataAttr(key: Scope.Key<T>) {\n        this[key]?.let {\n            attr(\"data-${key.name}\", it.toString())\n        }\n    }\n\n    /**\n     * provides [RenderContext] next to this [Tag] on the same DOM-level.\n     */\n    val annex: RenderContext\n}\n\n/**\n * Implementation of [Tag] to represent HTML5-tags.\n *\n * @param tagName name of the tag. Used to create the corresponding [Element]\n * @property id the DOM-id of the element to be created\n * @property baseClass a static base value for the class-attribute. All dynamic values for this attribute will be concatenated to this base-value.\n * @property job used for launching coroutines in\n * @property scope set some arbitrary scope entries into the [Tag]'s scope\n */\n@HtmlTagMarker\nopen class HtmlTag<out E : Element>(\n    private val tagName: String,\n    final override val id: String? = null,\n    final override val baseClass: String? = null,\n    override val job: Job,\n    override val scope: Scope,\n) : Tag<E> {\n\n    override val domNode: E = window.document.createElement(tagName).also { element ->\n        if (id != null) element.id = id\n        if (!baseClass.isNullOrBlank()) element.className = baseClass\n    }.unsafeCast<E>()\n\n    /**\n     * Creates the content of the [HtmlTag] and appends it as a child to the wrapped [Element].\n     *\n     * @param element the parent element of the new content\n     * @param content lambda building the content (following the type-safe-builder pattern)\n     */\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    final override inline fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        content(element)\n        domNode.appendChild(element.domNode)\n        return element\n    }\n\n    /**\n     * This [MutableStateFlow] acts as a backing field for all class names. It holds arbitrary [List]s of\n     * [StateFlow]s which manage each portion of class names. This way, multiple calls of any [className] variant\n     * can be merged in one central place and must be mounted into the [Tag]s `class` attribute only once.\n     */\n    private val classesStateFlow by lazy {\n        MutableStateFlow<List<StateFlow<String>>>(listOfNotNull(baseClass?.let { MutableStateFlow(it) }))\n            .also { classesFlowList ->\n                attr(\"class\", classesFlowList.flatMapLatest { styleFlows ->\n                    combine(styleFlows) { joinClasses(*it) }\n                })\n            }\n    }\n\n    /**\n     * Small utility function to create the classes [String] from the current values of the [StateFlow]s.\n     *\n     * This function is used to create the initial class name values to be applied immediately\n     * to the domnode.\n     */\n    private fun buildClasses() = joinClasses(*classesStateFlow.value.map { it.value }.toTypedArray())\n\n    override fun className(value: String) {\n        classesStateFlow.value += MutableStateFlow(value)\n        // this ensures that the set state is applied *immediately* without `Flow`-\"delay\"\n        attr(\"class\", buildClasses())\n    }\n\n    override fun className(value: Flow<String>, initial: String) {\n        classesStateFlow.value += value\n            .catch { printErrorIgnoreLensException(it) }\n            .stateIn(MainScope() + job, SharingStarted.Eagerly, initial)\n\n        // this ensures that the set state is applied *immediately* without `Flow`-\"delay\".\n        // in this case, the `initial` value gets applied as \"promised\".\n        attr(\"class\", buildClasses())\n    }\n\n    internal inner class AnnexContext : RenderContext {\n        override fun <E : Node, T : WithDomNode<E>> register(element: T, content: (T) -> Unit): T {\n            domNode.parentElement?.let {\n                content(element)\n                it.appendChild(element.domNode)\n            }\n            return element\n        }\n\n        override val job: Job = this@HtmlTag.job\n\n        override val scope: Scope = this@HtmlTag.scope\n    }\n\n    /**\n     * provides [RenderContext] next to this [HtmlTag] on the same DOM-level.\n     */\n    override val annex: RenderContext by lazy { AnnexContext() }\n}\n\nconst val SVG_XMLNS = \"http://www.w3.org/2000/svg\"\n\n/**\n * Implementation of [HtmlTag] to represent the JavaScript\n * [SVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) to Kotlin\n */\nclass SvgTag(tagName: String, id: String? = null, baseClass: String? = null, job: Job, scope: Scope) :\n    HtmlTag<SVGElement>(tagName, id, baseClass, job, scope) {\n\n    override val domNode =\n        document.createElementNS(SVG_XMLNS, tagName).unsafeCast<SVGElement>().apply {\n            if (!baseClass.isNullOrBlank()) setAttributeNS(null, \"class\", baseClass)\n            if (!id.isNullOrBlank()) setAttributeNS(null, \"id\", id)\n        }\n\n    /**\n     * Sets the given [xml] string to the *innerHTML* of the [SVGElement].\n     *\n     * @param xml svg xml content\n     */\n    fun content(xml: String) {\n        domNode.innerHTML = xml\n    }\n\n    /**\n     * sets XML-namespace of a [Tag]\n     *\n     * @param value namespace to set\n     */\n    fun xmlns(value: String) = attr(\"xmlns\", value)\n}","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.channels.awaitClose\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.callbackFlow\nimport kotlinx.coroutines.flow.map\nimport org.w3c.dom.*\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.files.FileList\n\n/**\n * Creates a [Listener] for the given [Event] type and [eventName].\n *\n * @param eventName the [DOM-API name](https://developer.mozilla.org/en-US/docs/Web/API/Element#events) of an event.\n * Can be a custom name.\n * @param capture if `true`, activates capturing mode, else remains in `bubble` mode (default)\n * @param selector optional lambda expression to select specific events with option to manipulate it\n * (e.g. `preventDefault` or `stopPropagation`).\n *\n * @return a [Listener]-object, which is more or less a [Flow] of the specific `Event`-type.\n */\nfun <E : Event, T : EventTarget> T.subscribe(\n    eventName: String,\n    capture: Boolean = false,\n    selector: E.() -> Boolean = { true }\n): Listener<E, T> =\n    Listener(\n        callbackFlow {\n            val listener: (E) -> Unit = {\n                try {\n                    if (it.selector()) trySend(it.unsafeCast<E>())\n                } catch (e: Exception) {\n                    console.error(\"Unexpected event type while listening for `$eventName` event\", e)\n                }\n            }\n            this@subscribe.addEventListener(eventName, listener.unsafeCast<Event.() -> Unit>(), capture)\n\n            awaitClose { this@subscribe.removeEventListener(eventName, listener.unsafeCast<Event.() -> Unit>(), capture) }\n        }\n    )\n\n/**\n * Encapsulates the [Flow] of the [Event].\n *\n * Acts as a marker class in order to keep the type of the element, so we can offer dedicated methods to extract\n * values from some specific events.\n *\n * @see [values]\n */\nvalue class Listener<X : Event, out T : EventTarget>(private val events: Flow<X>) : Flow<X> by events\n\n/**\n * Extracts the [HTMLInputElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().value }\n\n/**\n * Extracts the [HTMLSelectElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLSelectElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLSelectElement>().value }\n\n/**\n * Extracts the [HTMLInputElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLFieldSetElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().value }\n\n/**\n * Extracts the [HTMLTextAreaElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLTextAreaElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLTextAreaElement>().value }\n\n/**\n * Extracts a [FileList] from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.files(): Flow<FileList?> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().files }\n\n/**\n * Extracts the [HTMLInputElement.checked] state from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.states(): Flow<Boolean> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().checked }\n\n/**\n * Extracts the [HTMLSelectElement.selectedIndex] from the [Event.target].\n */\nfun Listener<*, HTMLSelectElement>.selectedIndex(): Flow<Int> =\n    this.map { it.target.unsafeCast<HTMLSelectElement>().selectedIndex }\n\n/**\n * Extracts the [HTMLOptionElement.value] from the selected [HTMLOptionElement].\n */\nfun Listener<*, HTMLSelectElement>.selectedValue(): Flow<String> =\n    this.map {\n        val select = it.target.unsafeCast<HTMLSelectElement>()\n        select.options[select.selectedIndex].unsafeCast<HTMLOptionElement>().value\n    }\n\n/**\n * Extracts the [HTMLOptionElement.text] from the selected [HTMLOptionElement].\n */\nfun Listener<*, HTMLSelectElement>.selectedText(): Flow<String> =\n    this.map {\n        val select = it.target.unsafeCast<HTMLSelectElement>()\n        select.options[select.selectedIndex].unsafeCast<HTMLOptionElement>().text\n    }","package dev.fritz2.core\n\nobject Id {\n    private const val defaultLength = 6\n    private val chars = \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\".toCharArray()\n\n    fun next(length: Int = defaultLength) = buildString {\n        for (i in 0 until length) {\n            append(chars.random())\n        }\n    }\n}","package dev.fritz2.core\n\n/**\n *  gives you a new [Inspector] as starting point.\n */\nfun <D> inspectorOf(data: D): Inspector<D> = RootInspector(data)\n\n/**\n * represents the data and corresponding id of certain value\n * in a deep nested model structure.\n *\n * @property data [D] representation of stored data\n * @property path [String] representation of the corresponding path in model\n */\ninterface Inspector<D> {\n    val data: D\n    val path: String\n\n    /**\n     * creates a new [Inspector] for a part of your underlying data-model\n     *\n     * @param lens a [Lens] describing, of which part of your data\n     * model you want to have the next [Inspector]\n     */\n    fun <X> map(lens: Lens<D, X>): Inspector<X> = SubInspector(this, lens)\n}\n\n\n/**\n * [RootInspector] is the starting point for getting your [data] and corresponding [path]s from your\n * deep nested model structure. Get this by calling the factory method [inspectorOf].\n *\n * [Inspector] is useful in validation process to know which model attribute is not valid.\n */\nclass RootInspector<T>(\n    override val data: T\n) : Inspector<T> {\n    override val path: String = \"\"\n}\n\n/**\n * A [Inspector] that is derived from a parent [Inspector] mapping its data by a given [Lens].\n */\nclass SubInspector<P, T>(\n    val parent: Inspector<P>,\n    private val lens: Lens<P, T>\n) : Inspector<T> {\n\n    /**\n     * generates the corresponding [path]\n     */\n    override val path: String by lazy { \"${parent.path}.${lens.id}\".trimEnd('.') }\n\n    /**\n     * returns the underlying [data]\n     */\n    override val data: T = lens.get(parent.data)\n}\n\n/**\n * Creates a new [Inspector] from a _nullable_ parent inspector that either contains the original value or a given\n * [default] value if the original value was `null`.\n *\n * When updating the value of the resulting [Inspector] to this [default] value,\n * null is used instead updating the parent. When this [Inspector]'s value would be null according to it's parent's\n * value, the [default] value will be used instead.\n *\n * @param default value to be used instead of `null`\n */\nfun <D> Inspector<D?>.mapNull(default: D): Inspector<D> =\n    SubInspector(this, mapToNonNullLens(default))\n\n/**\n * Creates a new [Inspector] from a _non-nullable_ parent inspector that either contains the original value or `null` if\n * its value matches the given [placeholder].\n *\n * When updating the value of the resulting [Store] to `null`, the [placeholder] is used instead.\n * When the resulting [Inspector]'s value would be the [placeholder], `null` will be used instead.\n *\n * @param placeholder value to be mapped to `null`\n */\nfun <T> Inspector<T>.mapNullable(placeholder: T): Inspector<T?> =\n    map(mapToNullableLens(placeholder))\n\n/**\n * Creates a new [Inspector] containing the element for the given [element] and [idProvider]\n * from the original [Inspector]'s [List].\n *\n * @param element current instance of the entity to focus on\n * @param idProvider to identify the same entity (i.e. when it's content changed)\n */\nfun <D, I> Inspector<List<D>>.mapByElement(element: D, idProvider: IdProvider<D, I>): Inspector<D> =\n    SubInspector(this, lensForElement(element, idProvider))\n\n/**\n * Performs the given [action] on each [Inspector].\n *\n * @param idProvider to get the id from an instance\n * @param action function which gets applied to all [Inspector]s\n */\nfun <D, I> Inspector<List<D>>.inspectEach(idProvider: IdProvider<D, I>, action: (Inspector<D>) -> Unit) {\n    this.data.onEach { element -> action(mapByElement(element, idProvider)) }\n}\n\n/**\n * Creates a new [Inspector] containing the element for the given [index] from the original [Inspector]'s [List]\n *\n * @param index position in the list to point to\n */\nfun <D> Inspector<List<D>>.mapByIndex(index: Int): Inspector<D> =\n    SubInspector(this, lensForElement(index))\n\n/**\n * Performs the given [action] on each [Inspector].\n *\n * @param action function which gets applied to all [Inspector]s\n */\nfun <D> Inspector<List<D>>.inspectEach(action: (Inspector<D>) -> Unit) {\n    this.data.onEachIndexed { index, _ -> action(mapByIndex(index)) }\n}\n\n/**\n * Creates a new [Inspector] containing the value for the given [key] from the original [Inspector]'s [Map]\n *\n * @param key to the corresponding value in the map\n */\nfun <K, V> Inspector<Map<K, V>>.mapByKey(key: K): Inspector<V> =\n    SubInspector(this, lensForElement(key))\n\n/**\n * Performs the given [action] on each [Inspector].\n *\n * @param action function which gets applied to all [Inspector]s\n */\nfun <K, V> Inspector<Map<K, V>>.inspectEach(action: (K, Inspector<V>) -> Unit) {\n    this.data.onEach { (k , _) -> action(k, mapByKey(k)) }\n}","package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.launch\nimport kotlinx.dom.clear\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLStyleElement\nimport org.w3c.dom.Node\nimport org.w3c.dom.css.CSSStyleSheet\n\n/**\n * Occurs when the targeted html element is not present in document.\n *\n * @param message exception message\n */\nclass MountTargetNotFoundException(message: String) : Exception(message)\n\n/**\n * Creates a [RenderContext] for [Tag]s and\n * mounts it to a constant element in the static html file\n * which id matches the [selector].\n *\n * @param selector [query selector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)\n * of the element to mount to\n * @param override if true all child elements are removed before rendering\n * @param scope scope for tag\n * @param content [RenderContext] for rendering the data to the DOM\n * @throws MountTargetNotFoundException if target element with [selector] not found\n */\nfun render(\n    selector: String,\n    override: Boolean = true,\n    scope: (ScopeContext.() -> Unit) = {},\n    content: RenderContext.() -> Unit\n) {\n    document.querySelector(selector)?.let { parentElement ->\n        if (parentElement is HTMLElement) {\n            render(parentElement, override, scope, content)\n        } else MountTargetNotFoundException(\"element with id=$selector is not an HTMLElement\")\n    } ?: throw MountTargetNotFoundException(\"html document contains no element with id=$selector\")\n}\n\n/**\n * Creates a [RenderContext] for [Tag]s and mounts it to a [targetElement].\n *\n * @param targetElement [HTMLElement] to mount to, default is *document.body*\n * @param override if true all child elements are removed before rendering\n * @param content [RenderContext] for rendering the data to the DOM\n * @param scope scope for tag\n * @throws MountTargetNotFoundException if [targetElement] not found\n */\nfun render(\n    targetElement: HTMLElement? = document.body,\n    override: Boolean = true,\n    scope: (ScopeContext.() -> Unit) = {},\n    content: RenderContext.() -> Unit\n) {\n    //add style sheet containing mount-point-class\n    addGlobalStyle(\".$MOUNT_POINT_STYLE_CLASS { display: contents; }\")\n\n    if (targetElement != null) {\n        if (override) targetElement.clear()\n\n        val mountPoint = object : RenderContext, MountPointImpl() {\n            override val job = Job()\n            override val scope: Scope = ScopeContext(Scope()).also {\n                scope(it)\n                it.set(MOUNT_POINT_KEY, this)\n            }.scope\n\n            override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n                content(element)\n                targetElement.appendChild(element.domNode)\n                return element\n            }\n\n        }\n\n        MainScope().launch {\n            content(mountPoint)\n            mountPoint.runAfterMounts()\n        }\n\n    } else throw MountTargetNotFoundException(\"targetElement should not be null\")\n}\n\nconst val FRITZ2_GLOBAL_STYLESHEET_ID = \"fritz2-global-styles\"\n\ninternal fun getOrCreateGlobalStylesheet() = (document.getElementById(FRITZ2_GLOBAL_STYLESHEET_ID)?.let {\n    (it as HTMLStyleElement).sheet\n} ?: (document.createElement(\"style\") as HTMLStyleElement).also {\n    it.setAttribute(\"id\", FRITZ2_GLOBAL_STYLESHEET_ID)\n    it.appendChild(document.createTextNode(\"\"))\n    document.head!!.appendChild(it)\n}.sheet!!) as CSSStyleSheet\n\n/**\n * Adds global css-rules to a fritz2-specific stylesheet added to the document when first called\n *\n * @param css the valid css-code to insert\n */\nfun addGlobalStyle(css: String) {\n    getOrCreateGlobalStylesheet().insertRule(css, 0)\n}\n\n/**\n * Adds global css-rules to a fritz2-specific stylesheet added to the document when first called\n *\n * @param css the valid rules to insert\n */\nfun addGlobalStyles(css: List<String>) {\n    val stylesheet = getOrCreateGlobalStylesheet()\n    css.forEach { stylesheet.insertRule(it, 0) }\n}\n\n/**\n * Joins all given [classes] strings to one html-class-attribute [String]\n * by filtering all out which are null or blank.\n */\n@Deprecated(\"Use joinClasses instead.\", ReplaceWith(\"joinClasses(*classes)\"))\nfun classes(vararg classes: String?): String = joinClasses(*classes)\n\n/**\n * Joins all given [classes] strings to one html-class-attribute [String].\n * Individual Strings that are null or blank are filtered out.\n *\n * #### Examples\n *\n * ```\n * val classes = joinClasses(\n *     \"class1\",\n *     null,\n *     \"class2\",\n *     \"\"\n * )\n * println(classes) // prints \"class1 class2\"\n * ```\n *\n * Using this function, it is also possible to conditionally construct classes strings without having\n * to do dangerous string concatenation:\n *\n * ```\n * val classes = joinClasses(\n *    \"class1\",\n *    \"class2\".takeIf { it.length > 10 }\n * )\n *\n * println(classes) // prints \"class1\"\n * ```\n */\nfun joinClasses(vararg classes: String?): String =\n    classes.filterNot(String?::isNullOrBlank).joinToString(separator = \" \")\n\n/**\n * Helper function to call a native js function with concrete return type [T]\n */\n@JsName(\"Function\")\ninternal external fun <T> nativeFunction(vararg params: String, block: String): T",null,null,"package dev.fritz2.core\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.FlowCollector\nimport kotlinx.coroutines.flow.MutableSharedFlow\n\n/**\n * This [Flow] implementation represents a flow that emits exactly one value during its lifetime.\n *\n * @param value the value to emit on the flow\n */\nclass OnlyOnceFlow<T>(private val value: T) : Flow<T> {\n    private var collected = false\n\n    override suspend fun collect(collector: FlowCollector<T>) {\n        if (!collected) {\n            collected = true\n            collector.emit(value)\n        }\n    }\n}\n\n/**\n * This factory function creates an [OnlyOnceFlow].\n *\n * @param value the value to emit on the flow\n */\nfun <T> flowOnceOf(value: T) = OnlyOnceFlow(value)\n\n/**\n * Base-interface of the different types of handlers\n *\n * @property process function describing how this handler collects a [Flow] when called\n */\ninterface Handler<A> {\n    val process: (Flow<A>, Job) -> Unit\n\n    /**\n     * Calls this handler exactly once.\n     *\n     * @param data parameter forwarded to the handler\n     */\n    operator fun invoke(data: A) = this.process(flowOnceOf(data), Job())\n}\n\n/**\n * Calls this handler exactly once.\n */\noperator fun Handler<Unit>.invoke() = this.process(flowOnceOf(Unit), Job())\n\n/**\n * Defines, how to handle actions in your [Store]. Each Handler accepts actions of a defined type.\n * If your handler just needs the current value of the [Store] and no action, use [Unit].\n *\n * @param process defines how to handle the values of the connected [Flow]\n */\nvalue class SimpleHandler<A>(override val process: (Flow<A>, Job) -> Unit) : Handler<A>\n\n/**\n * An [EmittingHandler] is a special [Handler] that constitutes a new [Flow] by itself. You can emit values to this [Flow] from your code\n * and connect it to other [Handler]s on this or on other [Store]s. This way inter-store-communication is done in fritz2.\n *\n * @param collectWithChannel defines how to handle the values of the connected [Flow]\n * @property process function defining how this [Handler] collects a [Flow] when connected using [handledBy]\n */\nclass EmittingHandler<A, E>(\n    private val collectWithChannel: (Flow<A>, FlowCollector<E>, Job) -> Unit,\n    private val flow: MutableSharedFlow<E> = MutableSharedFlow()\n) : Handler<A>, Flow<E> by flow {\n\n    override val process: (Flow<A>, Job) -> Unit = { upstream, job ->\n        collectWithChannel(upstream, flow, job)\n    }\n}\n",null,null,"package dev.fritz2.core\n\nimport dev.fritz2.core.Scope.Key\n\n/**\n * Marks a class that it has [Scope] which can be transferred for adding/receiving additional information.\n *\n * The concept of the [Scope] is to provide a consistent mechanism to pass arbitrary data down the DOM tree from\n * a hierarchical higher node to \"unknown\" consumer nodes down the tree. This is very important for all kind of\n * dev.fritz2.headless.components (not necessarily fritz2's dev.fritz2.headless.components!), that should adapt to its context. Some higher node places some\n * information tagged by a unique key into the scope and passes this further down to its children, which themselves\n * just passes this scope further down, optionally adding or manipulating the scope for their children on their own.\n * Somewhere down the tree a node can evaluate the scope passed to him and look out for some key it want to react to.\n * If the key is present it can then apply its value or just behave in some specific way different to its default.\n * If there is no key, the node just applies its default behaviour.\n *\n * To give a practical example:\n * Imagine some button component, which normally uses the \"primary\" color as background. This works fine for most of\n * the time. But now imagine a buttons-bar on the bottom edge of a modal for example to provide the typical buttons\n * like \"ok\", \"cancel\", \"yes\", \"no\" or alike. This bar uses the primary color as background too, to have a high contrast\n * against the content above. The two dev.fritz2.headless.components do not work well together this way!\n * The user would have to manually apply some other color to the buttons when using them inside the bar, in order to\n * preserve a good contrast to it. To achieve this behaviour automatically, the scope comes to the rescue:\n * The buttons-bar component can define a global scope-key `buttonsBar` by using the [Scope.keyOf] function.\n * Then it can add some key-value pair to the scope like `set(buttonsBar, true)` in order\n * to signal all child nodes that they appear within the context of a buttons bar. The button component could be\n * aware of the key and implement some different behaviour concerning the color, if it detects that it is used within\n * a buttons-bar.\n *\n * The scope only changes conformal to the node hierarchy. That is the scope is empty at the top level [render] function\n * call and may be filled or changed by each child. But a change by some node is only propagated to the children of\n * that node. The children of the next siblings of the changing node are not affected and do not see those scope values!\n *\n * Example:\n * ```\n * div { // initial scope -> empty!\n *     val sizes = keyOf<String>(\"sizes\") // normally define scope-keys globally\n *     div(scope = {\n *         set(sizes, \"small\") // add some key-value to the scope\n *     }) {\n *         // all children will get this scope instance\n *         p {\n *             scope.asDataAttr() // -> { \"sizes\": \"small\" }\n *         }\n *         section {\n *             when (scope[sizes]) {\n *                 \"small\" -> div({ fontSize { \"0.8rem\" } }) { +\"small text\" }\n *                 \"normal\" -> div({ fontSize { \"1rem\" } }) { +\"normal text\" }\n *                 \"large\" -> div({ fontSize { \"1.2rem\" } }) { +\"large text\" }\n *                 else -> div { +\"no size scope available\" }\n *             }\n *         }\n *         // end of children\n *     }\n *     // next sibling -> only parent scope available, which is empty!\n *     p {\n *         scope.asDataAttr() // -> {}\n *     }\n * }\n * ```\n *\n * It is intentional that the key is not tied to some component or restricted in any other way.\n * A client should strive for a key management, that is driven by the \"producing\" node, not the \"consuming\" one!\n * That means one should prefer to encode that some specific context now exist or that some value is now available,\n * instead of setting a client node tailored rule. This enables more freedom for future usages and adaptions by other\n * consuming dev.fritz2.headless.components.\n *\n * To continue the first example: A buttons-bar component should better not inject some \"buttonsColor\" into the scope,\n * but better just some \"buttonsBar\" key without any value (Unit). As a creator you just cannot anticipate all situations\n * and future usage of the buttons-bar component. It might be possible that a client wants to put something different to a\n * button into the bar, that also should react to the context. Then a key (and value) tailored to the button does not\n * make sense anymore.\n *\n * @see Scope\n * @see [dev.fritz2.browser.Tag]\n */\ninterface WithScope {\n    val scope: Scope\n}\n\n/**\n * Contains any type of data which consists of a [Key] and a corresponding value object.\n */\nvalue class Scope(private val entries: HashMap<Key<*>, Any> = hashMapOf()) {\n\n    companion object {\n        /**\n         * Creates a [Scope.Key] for using it in [Scope].\n         */\n        inline fun <reified T: Any> keyOf(name: String? = null): Key<T> =\n            Key(name ?: T::class.simpleName ?: \"unknown\")\n    }\n\n    /**\n     * Creates a new [Scope] instance from a given one.\n     */\n    constructor(parent: Scope) : this(HashMap(parent.entries))\n\n    /**\n     * Key for setting and receiving entries in the [Scope]\n     */\n    open class Key<T: Any>(val name: String) {\n        override fun toString(): String = name\n    }\n\n    /**\n     * Sets a new key-value-pair to the [Scope].\n     */\n    internal operator fun <T: Any> set(key: Key<T>, value: T) { entries[key] = value }\n\n    /**\n     * Receives a key-value-par from the [Scope].\n     */\n    operator fun <T: Any> get(key: Key<T>): T? = entries[key]?.unsafeCast<T>()\n\n    /**\n     * Returns all containing [Key]s from the [Scope].\n     */\n    val keys: Set<Key<*>> get() = entries.keys\n\n    /**\n     * Gives the number of stored key-value-pairs.\n     */\n    val size: Int get() = entries.size\n\n    /**\n     * Checks if the [Scope] contains the given key.\n     */\n    fun <T: Any> contains(key: Key<T>) = entries.contains(key)\n\n    /**\n     * Removes the specified key and its corresponding value from the [Scope].\n     *\n     * @return the previous value associated with the key, or null if the key was not present in the [Scope].\n     */\n    fun <T: Any> remove(key: Key<T>) = entries.remove(key)\n\n    /**\n     * Formats the [Scope] to a valid JSON string for printing or using it inside Javascript.\n     *\n     * Be aware that this is just a key-value formatting, where each payload data is just encoded as [String].\n     * So there is no magical serialization for primitives or complex types embedded!\n     *\n     * Examples:\n     * ```\n     * // primitive types:\n     * {\n     *   \"boolean\": \"true\"\n     *   \"integer\": \"42\"\n     * }\n     *\n     * // complex type\n     * data class User(val name: String, val active: Boolean)\n     * val key: keyOf<User>(\"user\")\n     * val user = User(\"Chris\", true)\n     * // as JSON\n     * {\n     *   \"user\" : \"User(name=Chris, active=true)\"\n     * }\n     *\n     * ```\n     */\n    override fun toString(): String = buildString {\n        append(\"{ \")\n        var count = 0\n        for ((k, v) in entries) {\n            if (++count > 1) append(\", \")\n            append(\"\\\"\")\n            append(k.name)\n            append(\"\\\" : \\\"\")\n            append(v)\n            append(\"\\\"\")\n        }\n        append(\" }\")\n    }\n\n    /**\n     * Returns an Iterator over the entries in the [Scope].\n     */\n    operator fun iterator() = entries.toMap().iterator()\n}\n\n/**\n * Context for setting new entries to a [Scope] object.\n */\n@HtmlTagMarker\nclass ScopeContext(private var current: Scope) {\n    val scope get() = current\n\n    /**\n     * Sets a new key-value-pair to the [Scope].\n     */\n    fun <T: Any> set(key: Key<T>, value: T) {\n        current = Scope(current)\n        current[key] = value\n    }\n}\n\noperator fun (ScopeContext.() -> Unit).plus(plus: ScopeContext.() -> Unit): ScopeContext.() -> Unit = {\n    this@plus.invoke(this)\n    plus.invoke(this)\n}\n\noperator fun (ScopeContext.() -> Unit).plus(scope: Scope): ScopeContext.() -> Unit = {\n    this@plus.invoke(this)\n    scope.keys.map { it.unsafeCast<Key<Any>>() }\n        .forEach { key -> scope[key]?.let { set(key, it) } }\n}\n\noperator fun Scope.plus(scope: ScopeContext.() -> Unit): ScopeContext.() -> Unit = {\n    keys.map { it.unsafeCast<Key<Any>>() }\n        .forEach { key -> get(key)?.let { set(key, it) } }\n    scope.invoke(this)\n}","package dev.fritz2.core\n\nimport kotlinx.coroutines.flow.Flow\n\n/**\n * Implementation of Myer's diff algorithm on two [List]s creating a [Flow] of [Patch]es.\n */\nobject Myer {\n\n    /**\n     * diffs to versions of a [List] by providing an [IdProvider].\n     * The definition of an id to identify the same object in both [List]s makes it possible to detect,\n     * if an object is moved from one position to another.\n     * Also, this method does not emit a [Patch] if values within an element change.\n     *\n     * @param oldList old version of the [List]\n     * @param newList new version of the [List]\n     * @return a [List] of [Patch]es needed to transform the old list into the new one\n     */\n    fun <T, I> diff(oldList: List<T>, newList: List<T>, idProvider: IdProvider<T, I>?): List<Patch<T>> {\n        val isSame = if (idProvider != null) { a: T, b: T -> idProvider(a) == idProvider(b) } else { a: T, b: T -> a == b }\n        val trace = shortestEdit(oldList, newList, isSame)\n        return buildList {\n            backtrack<T>(trace, oldList, newList, isSame)\n        }\n    }\n\n    private inline fun <T> MutableList<Patch<T>>.backtrack(\n        trace: List<CircularArray>,\n        oldList: List<T>,\n        newList: List<T>,\n        isSame: (a: T, b: T) -> Boolean\n    ) {\n        var x = oldList.size\n        var y = newList.size\n\n        var lastPatch: Patch<T>? = null\n        for ((d, v) in trace.withIndex().reversed()) {\n            val k = x - y\n\n            val prevK = if (k == -d || (k != d && v.get(k - 1) < v.get(k + 1))) {\n                k + 1\n            } else {\n                k - 1\n            }\n\n            val prevX = v.get(prevK)\n            val prevY = prevX - prevK\n\n            while (x > prevX && y > prevY) {\n                x -= 1\n                y -= 1\n            }\n\n            if (d > 0) {\n                if (prevX < x) {\n                    val element = oldList[prevX]\n\n                    // try to combine\n                    if (lastPatch != null) {\n                        // combine adjacent deletes\n                        if (lastPatch is Patch.Delete && lastPatch.start == prevX + 1) {\n                            lastPatch = Patch.Delete(prevX, lastPatch.count + 1)\n                        }\n                        // combine directly following insert and delete of same element as move\n                        else if (lastPatch is Patch.Insert && isSame(lastPatch.element, element)) {\n                            lastPatch = Patch.Move(prevX, lastPatch.index) // - 1)\n                        } else {\n                            add(lastPatch)\n                            lastPatch = Patch.Delete(prevX, 1)\n                        }\n                    }\n                    //nothing there to combine\n                    else {\n                        lastPatch = Patch.Delete(prevX, 1)\n                    }\n\n                } else if (prevY < y) {\n                    val element = newList[prevY]\n                    val index = x\n\n                    // try to combine\n                    if (lastPatch != null) {\n                        // combine adjacent inserts\n                        if (lastPatch is Patch.Insert && lastPatch.index == index) {\n                            //turn oder of elements!\n                            lastPatch = Patch.InsertMany(listOf(element, lastPatch.element), lastPatch.index)\n                        } else if (lastPatch is Patch.InsertMany && lastPatch.index == index) {\n                            //turn oder of elements!\n                            lastPatch = Patch.InsertMany(buildList {\n                                add(element)\n                                addAll((lastPatch as Patch.InsertMany<T>).elements)\n                            }, lastPatch.index)\n                        }\n                        // combine directly following insert and delete of same element as move\n                        else if (lastPatch is Patch.Delete && lastPatch.count == 1 && isSame(\n                                oldList[lastPatch.start],\n                                element\n                            )\n                        ) {\n                            lastPatch = Patch.Move(lastPatch.start, index)\n                        } else {\n                            add(lastPatch)\n                            lastPatch = Patch.Insert(element, x)\n                        }\n                    }\n                    //nothing there to combine\n                    else {\n                        lastPatch = Patch.Insert(element, x)\n                    }\n                }\n            }\n\n            x = prevX\n            y = prevY\n        }\n\n        if (lastPatch != null) add(lastPatch)\n    }\n\n    private inline fun <T> shortestEdit(\n        oldList: List<T>,\n        newList: List<T>,\n        isSame: (a: T, b: T) -> Boolean\n    ): List<CircularArray> {\n        val max = oldList.size + newList.size\n\n        //init array\n        val v = CircularArray(max)\n        v.set(1, 0)\n\n        return buildList {\n            outerLoop@ for (d in 0..max) {\n                add(v.copyOf())\n                for (k in -d..d step 2) {\n                    //walk right or down?\n                    var x = if ((k == -d) || (k != d && v.get(k - 1) < v.get(k + 1))) {\n                        v.get(k + 1)\n                    } else {\n                        v.get(k - 1) + 1\n                    }\n\n                    var y = x - k\n                    //walk diagonal is possible as far as possible\n                    while (x < oldList.size && y < newList.size && isSame(oldList[x], newList[y])) {\n                        x += 1\n                        y += 1\n                    }\n                    v.set(k, x)\n\n                    if (x >= oldList.size && y >= newList.size) break@outerLoop\n                }\n            }\n        }\n\n    }\n}\n\ninternal class CircularArray(private val max: Int, private val buffer: IntArray = IntArray(2 * max + 1)) {\n    fun get(index: Int) = buffer[index + max]\n    fun set(index: Int, value: Int) = buffer.set(index + max, value)\n\n    fun copyOf(): CircularArray = CircularArray(max, buffer.copyOf())\n\n    override fun toString(): String {\n        return buffer.toString()\n    }\n}\n","package dev.fritz2.core\n\nimport kotlinx.coroutines.Job\n\n/**\n * A [Patch] describes the changes made to a [List].\n *\n * Pay attention that the sealed implementations should not be data classes - each generated patch must be applied in\n * every case even though it might \"equal\" the preceding one. (Imagine deleting the first item of a list at least\n * twice!) Using data classes patches could quite easily become equal and then might be dropped by [mountSimple]!\n * Thus, it is intentional to implement those as regular classes.\n */\nsealed class Patch<out T> {\n    /**\n     * A [Patch] saying, that a new element has been inserted\n     *\n     * @param element the new element that has been inserted\n     * @param index the element has been inserted at this index\n     */\n    class Insert<T>(val element: T, val index: Int) : Patch<T>() {\n        /**\n         * maps the new element\n         *\n         * @param mapping defines, how to map the value of the patch\n         */\n        override fun <R> map(parentJob: Job, mapping: (T, Job) -> R): Patch<R> =\n            Insert(mapping(element, Job(parentJob)), index)\n    }\n\n    /**\n     * A [Patch] saying, that a several element have been inserted\n     *\n     * @param elements the new elements that have been inserted\n     * @param index the elements have been inserted at this index\n     */\n    class InsertMany<T>(val elements: List<T>, val index: Int) : Patch<T>() {\n        /**\n         * maps each of the new elements\n         *\n         * @param mapping defines, how to map the values of the patch\n         */\n        override fun <R> map(parentJob: Job, mapping: (T, Job) -> R): Patch<R> = InsertMany(elements.map {\n            mapping(it, Job(parentJob))\n        }, index)\n    }\n\n    /**\n     * A [Patch] saying, that one or more elements have been deleted\n     *\n     * @param start the index of the first element, that has been deleted\n     * @param count the number of elements, that have to be deleted\n     */\n    class Delete<T>(val start: Int, val count: Int = 1) : Patch<T>() {\n        /**\n         * nothing to be mapped here...\n         */\n        override fun <R> map(parentJob: Job, mapping: (T, Job) -> R): Patch<R> = this.unsafeCast<Patch<R>>()\n    }\n\n    /**\n     * A [Patch] saying, that an element has been moved from one position to another.\n     * This is only used on mounts with a corresponding [IdProvider].\n     *\n     * @param from old index of the element\n     * @param to new index of the element\n     */\n    class Move<T>(val from: Int, val to: Int) : Patch<T>() {\n        /**\n         * nothing to be mapped here...\n         */\n        override fun <R> map(parentJob: Job, mapping: (T, Job) -> R): Patch<R> = this.unsafeCast<Patch<R>>()\n    }\n\n    /**\n     * a convenience-method, to map the values encapsulated in a [Patch]\n     *\n     * @param mapping defines, how to map the values of the patch\n     */\n    abstract fun <R> map(parentJob: Job, mapping: (T, Job) -> R): Patch<R>\n}\n","package dev.fritz2.core\n\nimport kotlinx.atomicfu.atomic\nimport kotlinx.browser.window\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.channels.Channel\nimport kotlinx.coroutines.channels.consumeEach\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.events.Event\n\n/**\n * Defines a type for transforming one value into the next\n */\ntypealias Update<D> = suspend (D) -> D\n\n/**\n * [Store] interface is the main type for all two-way data binding activities.\n */\ninterface Store<D> {\n\n    /**\n     * [Job] for launching coroutines in.\n     */\n    val job: Job\n\n    /**\n     * [id] of this [Store].\n     * ids of depending [Store]s are concatenated and separated by a dot.\n     */\n    val id: String\n\n    /**\n     * Path of this [Store] derived from the underlying model.\n     * Paths of depending [Store]s are concatenated and separated by a dot.\n     */\n    val path: String\n\n    /**\n     * the [Flow] representing the current value of the [Store]. Use this to bind it to ui-elements or derive calculated values by using [map] for example.\n     */\n    val data: Flow<D>\n\n    /**\n     * represents the current value of the [Store]\n     */\n    val current: D\n\n    /**\n     * a simple [SimpleHandler] that just takes the given action-value as the new value for the [Store].\n     */\n    val update: Handler<D>\n\n    /**\n     * abstract method defining, how this [Store] handles an [Update]\n     *\n     * @param update the [Update] to handle\n     */\n    suspend fun enqueue(update: Update<D>)\n\n    /**\n     * Factory method to create a [SimpleHandler] mapping the actual value of the [Store] and a given Action to a new value.\n     *\n     * @param execute lambda that is executed whenever a new action-value appears on the connected event-[Flow].\n     */\n    fun <A> handle(\n        execute: suspend (D, A) -> D\n    ) = SimpleHandler<A> { flow, job ->\n        val executeJob = flow.onEach { enqueue { d -> withContext(NonCancellable) { execute(d, it) } } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n        this.job.invokeOnCompletion { executeJob.cancel() }\n    }\n\n    /**\n     * Factory method to create a [SimpleHandler] that does not take an Action\n     *\n     * @param execute lambda that is executed for each event on the connected [Flow]\n     */\n    fun handle(\n        execute: suspend (D) -> D\n    ) = SimpleHandler<Unit> { flow, job ->\n        val executeJob = flow.onEach { enqueue { d -> withContext(NonCancellable) { execute(d) } } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n        this.job.invokeOnCompletion { executeJob.cancel() }\n    }\n\n    /**\n     * Factory method to create a [EmittingHandler] taking an action-value and the current store value to derive the new value.\n     * An [EmittingHandler] is a [Flow] by itself and can therefore be connected to other [SimpleHandler]s even in other [Store]s.\n     *\n     * @param execute lambda that is executed for each action-value on the connected [Flow]. You can emit values from this lambda.\n     */\n    fun <A, E> handleAndEmit(\n        execute: suspend FlowCollector<E>.(D, A) -> D\n    ) = EmittingHandler<A, E>({ inFlow, outFlow, job ->\n        val executeJob = inFlow.onEach { enqueue { d -> withContext(NonCancellable) { outFlow.execute(d, it) } } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n        this.job.invokeOnCompletion { executeJob.cancel() }\n    })\n\n    /**\n     * factory method to create an [EmittingHandler] that does not take an action in it's [execute]-lambda.\n     *\n     * @param execute lambda that is executed for each event on the connected [Flow]. You can emit values from this lambda.\n     */\n    fun <E> handleAndEmit(\n        execute: suspend FlowCollector<E>.(D) -> D\n    ) =\n        EmittingHandler<Unit, E>({ inFlow, outFlow, job ->\n            val executeJob = inFlow.onEach { enqueue { d -> withContext(NonCancellable) { outFlow.execute(d) } } }\n                .catch { d -> errorHandler(d) }\n                .launchIn(MainScope() + job)\n            this.job.invokeOnCompletion { executeJob.cancel() }\n        })\n\n    /**\n     * Default error handler printing the error to console.\n     *\n     * @param cause Throwable to handle\n     */\n    fun errorHandler(cause: Throwable): Unit = printErrorIgnoreLensException(cause)\n\n    /**\n     * Creates a new [Store] that contains data derived by a given [Lens].\n     *\n     * @param lens: a [Lens] describing the two-way data binding of the derived [Store].\n     */\n    fun <X> map(lens: Lens<D, X>): Store<X> = SubStore(this, lens)\n}\n\n/**\n * A [Store] can be initialized with a given value.\n *\n * @param initialData first current value of this [Store]\n * @param job Job to be used by the [Store]\n * @param id id of this [Store]. Ids of derived [Store]s will be concatenated.\n */\nopen class RootStore<D>(\n    initialData: D,\n    job: Job,\n    override val id: String = Id.next()\n) : Store<D> {\n    override val path: String = \"\"\n\n    private val state: MutableStateFlow<D> = MutableStateFlow(initialData)\n    private val queue = Channel<Update<D>>(Channel.UNLIMITED)\n\n    /**\n     * [Job] used as parent job on all coroutines started in [Handler]s in the scope of this [Store]\n     */\n    final override val job: Job = (MainScope() + job).launch(start = CoroutineStart.UNDISPATCHED) {\n        activeJobs.incrementAndGet()\n        queue.consumeEach { update ->\n            try {\n                state.value = update(state.value)\n            } catch (t: Throwable) {\n                errorHandler(t)\n            }\n        }\n    }.apply { invokeOnCompletion { activeJobs.decrementAndGet() } }\n\n    /**\n     * Emits a [Flow] with the current data of this [Store].\n     * The [Flow] internal data is only changed, when the value differs from the last one to avoid calculations\n     * and updates that are not necessary.\n     *\n     * Actual data therefore is derived by applying the updates on the internal channel one by one to get the next value.\n     */\n    final override val data: Flow<D> = flow {\n        try {\n            activeFlows.incrementAndGet()\n            emit(state)\n            this@RootStore.job.join()\n            emit(emptyFlow())\n        } finally {\n            activeFlows.decrementAndGet()\n        }\n    }.flatMapLatest { it }\n\n    /**\n     * Represents the current data of this [Store].\n     */\n    override val current: D\n        get() = state.value\n\n    /**\n     * in a [RootStore] an [Update] is handled by applying it to the internal [StateFlow].\n     */\n    override suspend fun enqueue(update: Update<D>): Unit = queue.send(update)\n\n    /**\n     * a simple [SimpleHandler] that just takes the given action-value as the new value for the [Store].\n     */\n    override val update = this.handle<D> { _, newValue -> newValue }\n\n    private val withJob = object : WithJob {\n        override val job: Job = this@RootStore.job\n        override fun errorHandler(cause: Throwable) = this@RootStore.errorHandler(cause)\n    }\n\n    /**\n     * Allows to use the [WithJob]-Context of this Store and to run [handledBy] on the Store-Job\n     */\n    fun runWithJob(init: WithJob.() -> Unit) = withJob.init()\n\n    /**\n     * Connects a [Flow] to a [Handler].\n     *\n     * @param handler [Handler] that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to a [Handler]\n     */\n    protected infix fun <A> Flow<A>.handledBy(handler: Handler<A>) = runWithJob { this@handledBy handledBy handler }\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @param execute function that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to\n     */\n    protected infix fun <A> Flow<A>.handledBy(execute: suspend (A) -> Unit) =\n        runWithJob { this@handledBy handledBy execute }\n\n    /**\n     * Connects [Event]s to a [Handler].\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param handler that will handle the fired [Event]\n     */\n    protected infix fun <E : Event> Flow<E>.handledBy(handler: Handler<Unit>) =\n        runWithJob { this@handledBy handledBy handler }\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param execute function that will handle the fired [Event]\n     */\n    protected infix fun <E : Event> Flow<E>.handledBy(execute: suspend (E) -> Unit) =\n        runWithJob { this@handledBy handledBy execute }\n\n    companion object {\n        private val activeFlows = atomic(0)\n        private val activeJobs = atomic(0)\n\n        /**\n         * Count of active [Store.data]-Flows, can be used to detect memory-leaks\n         */\n        val ACTIVE_FLOWS get() = activeFlows.value\n\n        /**\n         * Count of active [Store.job]-Instances, can be used to detect memory-leaks\n         */\n        val ACTIVE_JOBS get() = activeJobs.value\n\n        fun resetCounters() {\n            activeFlows.value = 0\n            activeJobs.value = 0\n        }\n\n        init {\n            window.asDynamic().fritz2 = {}\n            window.asDynamic().fritz2.active_jobs = { ACTIVE_JOBS }\n            window.asDynamic().fritz2.active_flows = { ACTIVE_FLOWS }\n        }\n    }\n}\n\n/**\n * Convenience function to create a simple [Store] without any handlers, etc.\n *\n * @param initialData first current value of this [Store]\n * @param job Job to be used by the [Store]\n * @param id id of this store. Ids of derived [Store]s will be concatenated.\n */\nfun <D> storeOf(initialData: D, job: Job, id: String = Id.next()): Store<D> =\n    RootStore(initialData, job, id)\n\n/**\n * Convenience function to create a simple [Store] without any handlers, etc.\n *\n * @param initialData first current value of this [Store]\n * @param job Job to be used by the [Store]\n * @param id id of this store. Ids of derived [Store]s will be concatenated.\n */\nfun <D> WithJob.storeOf(initialData: D, job: Job = this.job, id: String = Id.next()): Store<D> =\n    RootStore(initialData, job, id)\n",null,null,null,null,null,null,null,"package dev.fritz2.core\n\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.events.Event\n\n/**\n * Prints [Exception] to error-[console] by ignoring [CollectionLensGetException].\n */\ninternal fun printErrorIgnoreLensException(cause: Throwable) {\n    when(cause) {\n        is CollectionLensGetException -> {}\n        else -> console.error(cause)\n    }\n}\n\n/**\n * Marks a class that it has a [Job] to start coroutines with.\n */\ninterface WithJob {\n\n    /**\n     * [Job] for launching coroutines in.\n     */\n    val job: Job\n\n    /**\n     * Default error handler printing the error to console.\n     *\n     * @param cause Throwable to handle\n     */\n    fun errorHandler(cause: Throwable): Unit = printErrorIgnoreLensException(cause)\n\n    /**\n     * Connects a [Flow] to a [Handler].\n     *\n     * @param handler [Handler] that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to a [Handler]\n     */\n    infix fun <A> Flow<A>.handledBy(handler: Handler<A>) = handler.process(this, job)\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @param execute function that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to\n     */\n    infix fun <A> Flow<A>.handledBy(execute: suspend (A) -> Unit) =\n        this.onEach { withContext(NonCancellable) { execute(it) } }.catch { errorHandler(it) }\n            .launchIn(MainScope() + job)\n\n\n    /**\n     * Connects [Event]s to a [Handler].\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param handler that will handle the fired [Event]\n     */\n    infix fun <E : Event> Flow<E>.handledBy(handler: Handler<Unit>) =\n        handler.process(this.map { }, job)\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param execute function that will handle the fired [Event]\n     */\n    infix fun <E : Event> Flow<E>.handledBy(execute: suspend (E) -> Unit) =\n        this.onEach { withContext(NonCancellable) { execute(it) } }.catch { errorHandler(it) }\n            .launchIn(MainScope() + job)\n\n\n\n}","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.flow.Flow\nimport org.w3c.dom.*\nimport org.w3c.fetch.RequestDestination\n\nfun SvgTag.viewBox(value: String) = attr(\"viewBox\", value)\nfun SvgTag.viewBox(value: Flow<String>) = attr(\"viewBox\", value)\n\nfun SvgTag.fill(value: String) = attr(\"fill\", value)\nfun SvgTag.fill(value: Flow<String>) = attr(\"fill\", value)\n\nfun SvgTag.d(value: String) = attr(\"d\", value)\nfun SvgTag.d(value: Flow<String>) = attr(\"d\", value)\n\n/*\n * Generated by https://github.com/chausknecht/HtmlTagAttributesExtractor\n * Pay attention to local modifications before pasting an updated output here!\n * Add manual extensions above this section (like the SVG attributes).\n */\n\n/*\n * HTMLElement attributes\n */\nfun Tag<HTMLElement>.title(value: String) = attr(\"title\", value)\nfun Tag<HTMLElement>.title(value: Flow<String>) = attr(\"title\", value)\n\nfun Tag<HTMLElement>.lang(value: String) = attr(\"lang\", value)\nfun Tag<HTMLElement>.lang(value: Flow<String>) = attr(\"lang\", value)\n\nfun Tag<HTMLElement>.translate(value: Boolean, trueValue: String = \"\") = attr(\"translate\", value, trueValue)\nfun Tag<HTMLElement>.translate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"translate\", value, trueValue)\n\nfun Tag<HTMLElement>.dir(value: String) = attr(\"dir\", value)\nfun Tag<HTMLElement>.dir(value: Flow<String>) = attr(\"dir\", value)\n\nfun Tag<HTMLElement>.hidden(value: Boolean, trueValue: String = \"\") = attr(\"hidden\", value, trueValue)\nfun Tag<HTMLElement>.hidden(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"hidden\", value, trueValue)\n\nfun Tag<HTMLElement>.tabIndex(value: Int) = attr(\"tabindex\", value)\nfun Tag<HTMLElement>.tabIndex(value: Flow<Int>) = attr(\"tabindex\", value)\n\nfun Tag<HTMLElement>.accessKey(value: String) = attr(\"accesskey\", value)\nfun Tag<HTMLElement>.accessKey(value: Flow<String>) = attr(\"accesskey\", value)\n\nfun Tag<HTMLElement>.draggable(value: Boolean, trueValue: String = \"\") = attr(\"draggable\", value, trueValue)\nfun Tag<HTMLElement>.draggable(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"draggable\", value, trueValue)\n\nfun Tag<HTMLElement>.contextMenu(value: HTMLMenuElement?) = attr(\"contextmenu\", value)\nfun Tag<HTMLElement>.contextMenu(value: Flow<HTMLMenuElement?>) = attr(\"contextmenu\", value)\n\nfun Tag<HTMLElement>.spellcheck(value: Boolean, trueValue: String = \"\") = attr(\"spellcheck\", value, trueValue)\nfun Tag<HTMLElement>.spellcheck(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"spellcheck\", value, trueValue)\n\nfun Tag<HTMLElement>.innerText(value: String) = attr(\"innertext\", value)\nfun Tag<HTMLElement>.innerText(value: Flow<String>) = attr(\"innertext\", value)\n\n// inherited attributes from supertype Element\nfun Tag<HTMLElement>.id(value: String) = attr(\"id\", value)\nfun Tag<HTMLElement>.id(value: Flow<String>) = attr(\"id\", value)\n\nfun Tag<HTMLElement>.slot(value: String) = attr(\"slot\", value)\nfun Tag<HTMLElement>.slot(value: Flow<String>) = attr(\"slot\", value)\n\nfun Tag<HTMLElement>.scrollTop(value: Double) = attr(\"scrolltop\", value)\nfun Tag<HTMLElement>.scrollTop(value: Flow<Double>) = attr(\"scrolltop\", value)\n\nfun Tag<HTMLElement>.scrollLeft(value: Double) = attr(\"scrollleft\", value)\nfun Tag<HTMLElement>.scrollLeft(value: Flow<Double>) = attr(\"scrollleft\", value)\n\nfun Tag<HTMLElement>.innerHTML(value: String) = attr(\"innerhtml\", value)\nfun Tag<HTMLElement>.innerHTML(value: Flow<String>) = attr(\"innerhtml\", value)\n\nfun Tag<HTMLElement>.outerHTML(value: String) = attr(\"outerhtml\", value)\nfun Tag<HTMLElement>.outerHTML(value: Flow<String>) = attr(\"outerhtml\", value)\n\n// inherited attributes from supertype Node\nfun Tag<HTMLElement>.nodeValue(value: String?) = attr(\"nodevalue\", value)\nfun Tag<HTMLElement>.nodeValue(value: Flow<String?>) = attr(\"nodevalue\", value)\n\nfun Tag<HTMLElement>.textContent(value: String?) = attr(\"textcontent\", value)\nfun Tag<HTMLElement>.textContent(value: Flow<String?>) = attr(\"textcontent\", value)\n\n// inherited attributes from supertype ElementContentEditable\nfun Tag<HTMLElement>.contentEditable(value: String) = attr(\"contenteditable\", value)\nfun Tag<HTMLElement>.contentEditable(value: Flow<String>) = attr(\"contenteditable\", value)\n\n\n/*\n * HTMLBaseElement attributes\n */\nfun Tag<HTMLBaseElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLBaseElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLBaseElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLBaseElement>.target(value: Flow<String>) = attr(\"target\", value)\n\n\n/*\n * HTMLLinkElement attributes\n */\nfun Tag<HTMLLinkElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLLinkElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLLinkElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLLinkElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLLinkElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLLinkElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLLinkElement>.`as`(value: RequestDestination) = attr(\"as\", value)\nfun Tag<HTMLLinkElement>.`as`(value: Flow<RequestDestination>) = attr(\"as\", value)\n\nfun Tag<HTMLLinkElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLLinkElement>.media(value: Flow<String>) = attr(\"media\", value)\n\nfun Tag<HTMLLinkElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLLinkElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLLinkElement>.hreflang(value: String) = attr(\"hreflang\", value)\nfun Tag<HTMLLinkElement>.hreflang(value: Flow<String>) = attr(\"hreflang\", value)\n\nfun Tag<HTMLLinkElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLLinkElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLLinkElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLLinkElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLLinkElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLLinkElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLLinkElement>.rev(value: String) = attr(\"rev\", value)\nfun Tag<HTMLLinkElement>.rev(value: Flow<String>) = attr(\"rev\", value)\n\nfun Tag<HTMLLinkElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLLinkElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLLinkElement>.scope(value: String) = attr(\"scope\", value)\nfun Tag<HTMLLinkElement>.scope(value: Flow<String>) = attr(\"scope\", value)\n\nfun Tag<HTMLLinkElement>.workerType(value: WorkerType) = attr(\"workertype\", value)\nfun Tag<HTMLLinkElement>.workerType(value: Flow<WorkerType>) = attr(\"workertype\", value)\n\n\n/*\n * HTMLMetaElement attributes\n */\nfun Tag<HTMLMetaElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLMetaElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLMetaElement>.httpEquiv(value: String) = attr(\"httpequiv\", value)\nfun Tag<HTMLMetaElement>.httpEquiv(value: Flow<String>) = attr(\"httpequiv\", value)\n\nfun Tag<HTMLMetaElement>.content(value: String) = attr(\"content\", value)\nfun Tag<HTMLMetaElement>.content(value: Flow<String>) = attr(\"content\", value)\n\nfun Tag<HTMLMetaElement>.scheme(value: String) = attr(\"scheme\", value)\nfun Tag<HTMLMetaElement>.scheme(value: Flow<String>) = attr(\"scheme\", value)\n\n\n/*\n * HTMLStyleElement attributes\n */\nfun Tag<HTMLStyleElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLStyleElement>.media(value: Flow<String>) = attr(\"media\", value)\n\nfun Tag<HTMLStyleElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLStyleElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLStyleElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLStyleElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLBodyElement attributes\n */\nfun Tag<HTMLBodyElement>.link(value: String) = attr(\"link\", value)\nfun Tag<HTMLBodyElement>.link(value: Flow<String>) = attr(\"link\", value)\n\nfun Tag<HTMLBodyElement>.vLink(value: String) = attr(\"vlink\", value)\nfun Tag<HTMLBodyElement>.vLink(value: Flow<String>) = attr(\"vlink\", value)\n\nfun Tag<HTMLBodyElement>.aLink(value: String) = attr(\"alink\", value)\nfun Tag<HTMLBodyElement>.aLink(value: Flow<String>) = attr(\"alink\", value)\n\nfun Tag<HTMLBodyElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLBodyElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLBodyElement>.background(value: String) = attr(\"background\", value)\nfun Tag<HTMLBodyElement>.background(value: Flow<String>) = attr(\"background\", value)\n\n\n/*\n * HTMLHeadingElement attributes\n */\nfun Tag<HTMLHeadingElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLHeadingElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLParagraphElement attributes\n */\nfun Tag<HTMLParagraphElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLParagraphElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLHRElement attributes\n */\nfun Tag<HTMLHRElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLHRElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLHRElement>.color(value: String) = attr(\"color\", value)\nfun Tag<HTMLHRElement>.color(value: Flow<String>) = attr(\"color\", value)\n\nfun Tag<HTMLHRElement>.noShade(value: Boolean, trueValue: String = \"\") = attr(\"noshade\", value, trueValue)\nfun Tag<HTMLHRElement>.noShade(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"noshade\", value, trueValue)\n\nfun Tag<HTMLHRElement>.size(value: String) = attr(\"size\", value)\nfun Tag<HTMLHRElement>.size(value: Flow<String>) = attr(\"size\", value)\n\nfun Tag<HTMLHRElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLHRElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLPreElement attributes\n */\nfun Tag<HTMLPreElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLPreElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\n\n/*\n * HTMLQuoteElement attributes\n */\nfun Tag<HTMLQuoteElement>.cite(value: String) = attr(\"cite\", value)\nfun Tag<HTMLQuoteElement>.cite(value: Flow<String>) = attr(\"cite\", value)\n\n\n/*\n * HTMLOListElement attributes\n */\nfun Tag<HTMLOListElement>.reversed(value: Boolean, trueValue: String = \"\") = attr(\"reversed\", value, trueValue)\nfun Tag<HTMLOListElement>.reversed(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"reversed\", value, trueValue)\n\nfun Tag<HTMLOListElement>.start(value: Int) = attr(\"start\", value)\nfun Tag<HTMLOListElement>.start(value: Flow<Int>) = attr(\"start\", value)\n\nfun Tag<HTMLOListElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLOListElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLOListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLOListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLUListElement attributes\n */\nfun Tag<HTMLUListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLUListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\nfun Tag<HTMLUListElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLUListElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLLIElement attributes\n */\nfun Tag<HTMLLIElement>.value(value: Int) = attr(\"value\", value)\nfun Tag<HTMLLIElement>.value(value: Flow<Int>) = attr(\"value\", value)\n\nfun Tag<HTMLLIElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLLIElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLDListElement attributes\n */\nfun Tag<HTMLDListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLDListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLDivElement attributes\n */\nfun Tag<HTMLDivElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLDivElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLAnchorElement attributes\n */\nfun Tag<HTMLAnchorElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLAnchorElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLAnchorElement>.download(value: String) = attr(\"download\", value)\nfun Tag<HTMLAnchorElement>.download(value: Flow<String>) = attr(\"download\", value)\n\nfun Tag<HTMLAnchorElement>.ping(value: String) = attr(\"ping\", value)\nfun Tag<HTMLAnchorElement>.ping(value: Flow<String>) = attr(\"ping\", value)\n\nfun Tag<HTMLAnchorElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLAnchorElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLAnchorElement>.hreflang(value: String) = attr(\"hreflang\", value)\nfun Tag<HTMLAnchorElement>.hreflang(value: Flow<String>) = attr(\"hreflang\", value)\n\nfun Tag<HTMLAnchorElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLAnchorElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLAnchorElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLAnchorElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLAnchorElement>.coords(value: String) = attr(\"coords\", value)\nfun Tag<HTMLAnchorElement>.coords(value: Flow<String>) = attr(\"coords\", value)\n\nfun Tag<HTMLAnchorElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLAnchorElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLAnchorElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLAnchorElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLAnchorElement>.rev(value: String) = attr(\"rev\", value)\nfun Tag<HTMLAnchorElement>.rev(value: Flow<String>) = attr(\"rev\", value)\n\nfun Tag<HTMLAnchorElement>.shape(value: String) = attr(\"shape\", value)\nfun Tag<HTMLAnchorElement>.shape(value: Flow<String>) = attr(\"shape\", value)\n\n// inherited attributes from supertype HTMLHyperlinkElementUtils\nfun Tag<HTMLAnchorElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLAnchorElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLAnchorElement>.protocol(value: String) = attr(\"protocol\", value)\nfun Tag<HTMLAnchorElement>.protocol(value: Flow<String>) = attr(\"protocol\", value)\n\nfun Tag<HTMLAnchorElement>.username(value: String) = attr(\"username\", value)\nfun Tag<HTMLAnchorElement>.username(value: Flow<String>) = attr(\"username\", value)\n\nfun Tag<HTMLAnchorElement>.password(value: String) = attr(\"password\", value)\nfun Tag<HTMLAnchorElement>.password(value: Flow<String>) = attr(\"password\", value)\n\nfun Tag<HTMLAnchorElement>.host(value: String) = attr(\"host\", value)\nfun Tag<HTMLAnchorElement>.host(value: Flow<String>) = attr(\"host\", value)\n\nfun Tag<HTMLAnchorElement>.hostname(value: String) = attr(\"hostname\", value)\nfun Tag<HTMLAnchorElement>.hostname(value: Flow<String>) = attr(\"hostname\", value)\n\nfun Tag<HTMLAnchorElement>.port(value: String) = attr(\"port\", value)\nfun Tag<HTMLAnchorElement>.port(value: Flow<String>) = attr(\"port\", value)\n\nfun Tag<HTMLAnchorElement>.pathname(value: String) = attr(\"pathname\", value)\nfun Tag<HTMLAnchorElement>.pathname(value: Flow<String>) = attr(\"pathname\", value)\n\nfun Tag<HTMLAnchorElement>.search(value: String) = attr(\"search\", value)\nfun Tag<HTMLAnchorElement>.search(value: Flow<String>) = attr(\"search\", value)\n\nfun Tag<HTMLAnchorElement>.hash(value: String) = attr(\"hash\", value)\nfun Tag<HTMLAnchorElement>.hash(value: Flow<String>) = attr(\"hash\", value)\n\n\n/*\n * HTMLDataElement attributes\n */\nfun Tag<HTMLDataElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLDataElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n\n/*\n * HTMLTimeElement attributes\n */\nfun Tag<HTMLTimeElement>.dateTime(value: String) = attr(\"datetime\", value)\nfun Tag<HTMLTimeElement>.dateTime(value: Flow<String>) = attr(\"datetime\", value)\n\n\n/*\n * HTMLBRElement attributes\n */\nfun Tag<HTMLBRElement>.clear(value: String) = attr(\"clear\", value)\nfun Tag<HTMLBRElement>.clear(value: Flow<String>) = attr(\"clear\", value)\n\n\n/*\n * HTMLModElement attributes\n */\nfun Tag<HTMLModElement>.cite(value: String) = attr(\"cite\", value)\nfun Tag<HTMLModElement>.cite(value: Flow<String>) = attr(\"cite\", value)\n\nfun Tag<HTMLModElement>.dateTime(value: String) = attr(\"datetime\", value)\nfun Tag<HTMLModElement>.dateTime(value: Flow<String>) = attr(\"datetime\", value)\n\n\n/*\n * HTMLSourceElement attributes\n */\nfun Tag<HTMLSourceElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLSourceElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLSourceElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLSourceElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLSourceElement>.srcset(value: String) = attr(\"srcset\", value)\nfun Tag<HTMLSourceElement>.srcset(value: Flow<String>) = attr(\"srcset\", value)\n\nfun Tag<HTMLSourceElement>.sizes(value: String) = attr(\"sizes\", value)\nfun Tag<HTMLSourceElement>.sizes(value: Flow<String>) = attr(\"sizes\", value)\n\nfun Tag<HTMLSourceElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLSourceElement>.media(value: Flow<String>) = attr(\"media\", value)\n\n\n/*\n * HTMLImageElement attributes\n */\nfun Tag<HTMLImageElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLImageElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLImageElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLImageElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLImageElement>.srcset(value: String) = attr(\"srcset\", value)\nfun Tag<HTMLImageElement>.srcset(value: Flow<String>) = attr(\"srcset\", value)\n\nfun Tag<HTMLImageElement>.sizes(value: String) = attr(\"sizes\", value)\nfun Tag<HTMLImageElement>.sizes(value: Flow<String>) = attr(\"sizes\", value)\n\nfun Tag<HTMLImageElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLImageElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLImageElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLImageElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\nfun Tag<HTMLImageElement>.isMap(value: Boolean, trueValue: String = \"\") = attr(\"ismap\", value, trueValue)\nfun Tag<HTMLImageElement>.isMap(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"ismap\", value, trueValue)\n\nfun Tag<HTMLImageElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLImageElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLImageElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLImageElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLImageElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLImageElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLImageElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLImageElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLImageElement>.lowsrc(value: String) = attr(\"lowsrc\", value)\nfun Tag<HTMLImageElement>.lowsrc(value: Flow<String>) = attr(\"lowsrc\", value)\n\nfun Tag<HTMLImageElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLImageElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLImageElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLImageElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLImageElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLImageElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLImageElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLImageElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLImageElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLImageElement>.border(value: Flow<String>) = attr(\"border\", value)\n\n\n/*\n * HTMLIFrameElement attributes\n */\nfun Tag<HTMLIFrameElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLIFrameElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLIFrameElement>.srcdoc(value: String) = attr(\"srcdoc\", value)\nfun Tag<HTMLIFrameElement>.srcdoc(value: Flow<String>) = attr(\"srcdoc\", value)\n\nfun Tag<HTMLIFrameElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLIFrameElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLIFrameElement>.allowFullscreen(value: Boolean, trueValue: String = \"\") = attr(\"allowfullscreen\", value, trueValue)\nfun Tag<HTMLIFrameElement>.allowFullscreen(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"allowfullscreen\", value, trueValue)\n\nfun Tag<HTMLIFrameElement>.allowUserMedia(value: Boolean, trueValue: String = \"\") = attr(\"allowusermedia\", value, trueValue)\nfun Tag<HTMLIFrameElement>.allowUserMedia(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"allowusermedia\", value, trueValue)\n\nfun Tag<HTMLIFrameElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLIFrameElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLIFrameElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLIFrameElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLIFrameElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLIFrameElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLIFrameElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLIFrameElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLIFrameElement>.scrolling(value: String) = attr(\"scrolling\", value)\nfun Tag<HTMLIFrameElement>.scrolling(value: Flow<String>) = attr(\"scrolling\", value)\n\nfun Tag<HTMLIFrameElement>.frameBorder(value: String) = attr(\"frameborder\", value)\nfun Tag<HTMLIFrameElement>.frameBorder(value: Flow<String>) = attr(\"frameborder\", value)\n\nfun Tag<HTMLIFrameElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLIFrameElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLIFrameElement>.marginHeight(value: String) = attr(\"marginheight\", value)\nfun Tag<HTMLIFrameElement>.marginHeight(value: Flow<String>) = attr(\"marginheight\", value)\n\nfun Tag<HTMLIFrameElement>.marginWidth(value: String) = attr(\"marginwidth\", value)\nfun Tag<HTMLIFrameElement>.marginWidth(value: Flow<String>) = attr(\"marginwidth\", value)\n\n\n/*\n * HTMLEmbedElement attributes\n */\nfun Tag<HTMLEmbedElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLEmbedElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLEmbedElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLEmbedElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLEmbedElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLEmbedElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLEmbedElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLEmbedElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLEmbedElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLEmbedElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLEmbedElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLEmbedElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLObjectElement attributes\n */\nfun Tag<HTMLObjectElement>.data(value: String) = attr(\"data\", value)\nfun Tag<HTMLObjectElement>.data(value: Flow<String>) = attr(\"data\", value)\n\nfun Tag<HTMLObjectElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLObjectElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLObjectElement>.typeMustMatch(value: Boolean, trueValue: String = \"\") = attr(\"typemustmatch\", value, trueValue)\nfun Tag<HTMLObjectElement>.typeMustMatch(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"typemustmatch\", value, trueValue)\n\nfun Tag<HTMLObjectElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLObjectElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLObjectElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLObjectElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\nfun Tag<HTMLObjectElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLObjectElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLObjectElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLObjectElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLObjectElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLObjectElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLObjectElement>.archive(value: String) = attr(\"archive\", value)\nfun Tag<HTMLObjectElement>.archive(value: Flow<String>) = attr(\"archive\", value)\n\nfun Tag<HTMLObjectElement>.code(value: String) = attr(\"code\", value)\nfun Tag<HTMLObjectElement>.code(value: Flow<String>) = attr(\"code\", value)\n\nfun Tag<HTMLObjectElement>.declare(value: Boolean, trueValue: String = \"\") = attr(\"declare\", value, trueValue)\nfun Tag<HTMLObjectElement>.declare(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"declare\", value, trueValue)\n\nfun Tag<HTMLObjectElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLObjectElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLObjectElement>.standby(value: String) = attr(\"standby\", value)\nfun Tag<HTMLObjectElement>.standby(value: Flow<String>) = attr(\"standby\", value)\n\nfun Tag<HTMLObjectElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLObjectElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLObjectElement>.codeBase(value: String) = attr(\"codebase\", value)\nfun Tag<HTMLObjectElement>.codeBase(value: Flow<String>) = attr(\"codebase\", value)\n\nfun Tag<HTMLObjectElement>.codeType(value: String) = attr(\"codetype\", value)\nfun Tag<HTMLObjectElement>.codeType(value: Flow<String>) = attr(\"codetype\", value)\n\nfun Tag<HTMLObjectElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLObjectElement>.border(value: Flow<String>) = attr(\"border\", value)\n\n\n/*\n * HTMLParamElement attributes\n */\nfun Tag<HTMLParamElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLParamElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLParamElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLParamElement>.value(value: Flow<String>) = attr(\"value\", value)\n\nfun Tag<HTMLParamElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLParamElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLParamElement>.valueType(value: String) = attr(\"valuetype\", value)\nfun Tag<HTMLParamElement>.valueType(value: Flow<String>) = attr(\"valuetype\", value)\n\n\n/*\n * HTMLVideoElement attributes\n */\nfun Tag<HTMLVideoElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLVideoElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLVideoElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLVideoElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLVideoElement>.poster(value: String) = attr(\"poster\", value)\nfun Tag<HTMLVideoElement>.poster(value: Flow<String>) = attr(\"poster\", value)\n\nfun Tag<HTMLVideoElement>.playsInline(value: Boolean, trueValue: String = \"\") = attr(\"playsinline\", value, trueValue)\nfun Tag<HTMLVideoElement>.playsInline(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"playsinline\", value, trueValue)\n\n\n/*\n * HTMLTrackElement attributes\n */\nfun Tag<HTMLTrackElement>.kind(value: String) = attr(\"kind\", value)\nfun Tag<HTMLTrackElement>.kind(value: Flow<String>) = attr(\"kind\", value)\n\nfun Tag<HTMLTrackElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLTrackElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLTrackElement>.srclang(value: String) = attr(\"srclang\", value)\nfun Tag<HTMLTrackElement>.srclang(value: Flow<String>) = attr(\"srclang\", value)\n\nfun Tag<HTMLTrackElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLTrackElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLTrackElement>.default(value: Boolean, trueValue: String = \"\") = attr(\"default\", value, trueValue)\nfun Tag<HTMLTrackElement>.default(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"default\", value, trueValue)\n\n\n/*\n * HTMLMediaElement attributes\n */\nfun Tag<HTMLMediaElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLMediaElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLMediaElement>.srcObject(value: MediaProvider?) = attr(\"srcobject\", value)\nfun Tag<HTMLMediaElement>.srcObject(value: Flow<MediaProvider?>) = attr(\"srcobject\", value)\n\nfun Tag<HTMLMediaElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLMediaElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLMediaElement>.preload(value: String) = attr(\"preload\", value)\nfun Tag<HTMLMediaElement>.preload(value: Flow<String>) = attr(\"preload\", value)\n\nfun Tag<HTMLMediaElement>.currentTime(value: Double) = attr(\"currenttime\", value)\nfun Tag<HTMLMediaElement>.currentTime(value: Flow<Double>) = attr(\"currenttime\", value)\n\nfun Tag<HTMLMediaElement>.defaultPlaybackRate(value: Double) = attr(\"defaultplaybackrate\", value)\nfun Tag<HTMLMediaElement>.defaultPlaybackRate(value: Flow<Double>) = attr(\"defaultplaybackrate\", value)\n\nfun Tag<HTMLMediaElement>.playbackRate(value: Double) {\n    domNode.playbackRate = value\n    domNode.defaultPlaybackRate = value\n    domNode.setAttribute(\"playbackrate\", value.toString())\n}\n\nfun Tag<HTMLMediaElement>.playbackRate(value: Flow<Double>) {\n    mountSimple(job, value) { v -> playbackRate(v) }\n}\n\nfun Tag<HTMLMediaElement>.autoplay(value: Boolean, trueValue: String = \"\") = attr(\"autoplay\", value, trueValue)\nfun Tag<HTMLMediaElement>.autoplay(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autoplay\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.loop(value: Boolean, trueValue: String = \"\") = attr(\"loop\", value, trueValue)\nfun Tag<HTMLMediaElement>.loop(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"loop\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.controls(value: Boolean, trueValue: String = \"\") = attr(\"controls\", value, trueValue)\nfun Tag<HTMLMediaElement>.controls(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"controls\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.volume(value: Double) = attr(\"volume\", value)\nfun Tag<HTMLMediaElement>.volume(value: Flow<Double>) = attr(\"volume\", value)\n\nfun Tag<HTMLMediaElement>.muted(value: Boolean, trueValue: String = \"\") {\n    domNode.muted = value\n    domNode.defaultMuted = value\n    if (value) domNode.setAttribute(\"muted\", trueValue)\n    else domNode.removeAttribute(\"muted\")\n}\n\nfun Tag<HTMLMediaElement>.muted(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> muted(v, trueValue) }\n}\n\nfun Tag<HTMLMediaElement>.defaultMuted(value: Boolean, trueValue: String = \"\") = attr(\"defaultmuted\", value, trueValue)\nfun Tag<HTMLMediaElement>.defaultMuted(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultmuted\", value, trueValue)\n\n\n/*\n * HTMLMapElement attributes\n */\nfun Tag<HTMLMapElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLMapElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLAreaElement attributes\n */\nfun Tag<HTMLAreaElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLAreaElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLAreaElement>.coords(value: String) = attr(\"coords\", value)\nfun Tag<HTMLAreaElement>.coords(value: Flow<String>) = attr(\"coords\", value)\n\nfun Tag<HTMLAreaElement>.shape(value: String) = attr(\"shape\", value)\nfun Tag<HTMLAreaElement>.shape(value: Flow<String>) = attr(\"shape\", value)\n\nfun Tag<HTMLAreaElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLAreaElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLAreaElement>.download(value: String) = attr(\"download\", value)\nfun Tag<HTMLAreaElement>.download(value: Flow<String>) = attr(\"download\", value)\n\nfun Tag<HTMLAreaElement>.ping(value: String) = attr(\"ping\", value)\nfun Tag<HTMLAreaElement>.ping(value: Flow<String>) = attr(\"ping\", value)\n\nfun Tag<HTMLAreaElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLAreaElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLAreaElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLAreaElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLAreaElement>.noHref(value: Boolean, trueValue: String = \"\") = attr(\"nohref\", value, trueValue)\nfun Tag<HTMLAreaElement>.noHref(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"nohref\", value, trueValue)\n\n// inherited attributes from supertype HTMLHyperlinkElementUtils\nfun Tag<HTMLAreaElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLAreaElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLAreaElement>.protocol(value: String) = attr(\"protocol\", value)\nfun Tag<HTMLAreaElement>.protocol(value: Flow<String>) = attr(\"protocol\", value)\n\nfun Tag<HTMLAreaElement>.username(value: String) = attr(\"username\", value)\nfun Tag<HTMLAreaElement>.username(value: Flow<String>) = attr(\"username\", value)\n\nfun Tag<HTMLAreaElement>.password(value: String) = attr(\"password\", value)\nfun Tag<HTMLAreaElement>.password(value: Flow<String>) = attr(\"password\", value)\n\nfun Tag<HTMLAreaElement>.host(value: String) = attr(\"host\", value)\nfun Tag<HTMLAreaElement>.host(value: Flow<String>) = attr(\"host\", value)\n\nfun Tag<HTMLAreaElement>.hostname(value: String) = attr(\"hostname\", value)\nfun Tag<HTMLAreaElement>.hostname(value: Flow<String>) = attr(\"hostname\", value)\n\nfun Tag<HTMLAreaElement>.port(value: String) = attr(\"port\", value)\nfun Tag<HTMLAreaElement>.port(value: Flow<String>) = attr(\"port\", value)\n\nfun Tag<HTMLAreaElement>.pathname(value: String) = attr(\"pathname\", value)\nfun Tag<HTMLAreaElement>.pathname(value: Flow<String>) = attr(\"pathname\", value)\n\nfun Tag<HTMLAreaElement>.search(value: String) = attr(\"search\", value)\nfun Tag<HTMLAreaElement>.search(value: Flow<String>) = attr(\"search\", value)\n\nfun Tag<HTMLAreaElement>.hash(value: String) = attr(\"hash\", value)\nfun Tag<HTMLAreaElement>.hash(value: Flow<String>) = attr(\"hash\", value)\n\n\n/*\n * HTMLTableElement attributes\n */\nfun Tag<HTMLTableElement>.caption(value: HTMLTableCaptionElement?) = attr(\"caption\", value)\nfun Tag<HTMLTableElement>.caption(value: Flow<HTMLTableCaptionElement?>) = attr(\"caption\", value)\n\nfun Tag<HTMLTableElement>.tHead(value: HTMLTableSectionElement?) = attr(\"thead\", value)\nfun Tag<HTMLTableElement>.tHead(value: Flow<HTMLTableSectionElement?>) = attr(\"thead\", value)\n\nfun Tag<HTMLTableElement>.tFoot(value: HTMLTableSectionElement?) = attr(\"tfoot\", value)\nfun Tag<HTMLTableElement>.tFoot(value: Flow<HTMLTableSectionElement?>) = attr(\"tfoot\", value)\n\nfun Tag<HTMLTableElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLTableElement>.border(value: Flow<String>) = attr(\"border\", value)\n\nfun Tag<HTMLTableElement>.frame(value: String) = attr(\"frame\", value)\nfun Tag<HTMLTableElement>.frame(value: Flow<String>) = attr(\"frame\", value)\n\nfun Tag<HTMLTableElement>.rules(value: String) = attr(\"rules\", value)\nfun Tag<HTMLTableElement>.rules(value: Flow<String>) = attr(\"rules\", value)\n\nfun Tag<HTMLTableElement>.summary(value: String) = attr(\"summary\", value)\nfun Tag<HTMLTableElement>.summary(value: Flow<String>) = attr(\"summary\", value)\n\nfun Tag<HTMLTableElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLTableElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLTableElement>.cellPadding(value: String) = attr(\"cellpadding\", value)\nfun Tag<HTMLTableElement>.cellPadding(value: Flow<String>) = attr(\"cellpadding\", value)\n\nfun Tag<HTMLTableElement>.cellSpacing(value: String) = attr(\"cellspacing\", value)\nfun Tag<HTMLTableElement>.cellSpacing(value: Flow<String>) = attr(\"cellspacing\", value)\n\n\n/*\n * HTMLTableCaptionElement attributes\n */\nfun Tag<HTMLTableCaptionElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableCaptionElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLTableColElement attributes\n */\nfun Tag<HTMLTableColElement>.span(value: Int) = attr(\"span\", value)\nfun Tag<HTMLTableColElement>.span(value: Flow<Int>) = attr(\"span\", value)\n\nfun Tag<HTMLTableColElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableColElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableColElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableColElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableColElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableColElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableColElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableColElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableColElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableColElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLTableSectionElement attributes\n */\nfun Tag<HTMLTableSectionElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableSectionElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableSectionElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableSectionElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableSectionElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableSectionElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableSectionElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableSectionElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\n\n/*\n * HTMLTableRowElement attributes\n */\nfun Tag<HTMLTableRowElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableRowElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableRowElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableRowElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableRowElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableRowElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableRowElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableRowElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableRowElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableRowElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\n\n/*\n * HTMLTableCellElement attributes\n */\nfun Tag<HTMLTableCellElement>.colSpan(value: Int) = attr(\"colspan\", value)\nfun Tag<HTMLTableCellElement>.colSpan(value: Flow<Int>) = attr(\"colspan\", value)\n\nfun Tag<HTMLTableCellElement>.rowSpan(value: Int) = attr(\"rowspan\", value)\nfun Tag<HTMLTableCellElement>.rowSpan(value: Flow<Int>) = attr(\"rowspan\", value)\n\nfun Tag<HTMLTableCellElement>.headers(value: String) = attr(\"headers\", value)\nfun Tag<HTMLTableCellElement>.headers(value: Flow<String>) = attr(\"headers\", value)\n\nfun Tag<HTMLTableCellElement>.scope(value: String) = attr(\"scope\", value)\nfun Tag<HTMLTableCellElement>.scope(value: Flow<String>) = attr(\"scope\", value)\n\nfun Tag<HTMLTableCellElement>.abbr(value: String) = attr(\"abbr\", value)\nfun Tag<HTMLTableCellElement>.abbr(value: Flow<String>) = attr(\"abbr\", value)\n\nfun Tag<HTMLTableCellElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableCellElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableCellElement>.axis(value: String) = attr(\"axis\", value)\nfun Tag<HTMLTableCellElement>.axis(value: Flow<String>) = attr(\"axis\", value)\n\nfun Tag<HTMLTableCellElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLTableCellElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLTableCellElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableCellElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLTableCellElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableCellElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableCellElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableCellElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableCellElement>.noWrap(value: Boolean, trueValue: String = \"\") = attr(\"nowrap\", value, trueValue)\nfun Tag<HTMLTableCellElement>.noWrap(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"nowrap\", value, trueValue)\n\nfun Tag<HTMLTableCellElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableCellElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableCellElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableCellElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\n\n/*\n * HTMLFormElement attributes\n */\nfun Tag<HTMLFormElement>.acceptCharset(value: String) = attr(\"acceptcharset\", value)\nfun Tag<HTMLFormElement>.acceptCharset(value: Flow<String>) = attr(\"acceptcharset\", value)\n\nfun Tag<HTMLFormElement>.action(value: String) = attr(\"action\", value)\nfun Tag<HTMLFormElement>.action(value: Flow<String>) = attr(\"action\", value)\n\nfun Tag<HTMLFormElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLFormElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLFormElement>.enctype(value: String) = attr(\"enctype\", value)\nfun Tag<HTMLFormElement>.enctype(value: Flow<String>) = attr(\"enctype\", value)\n\nfun Tag<HTMLFormElement>.encoding(value: String) = attr(\"encoding\", value)\nfun Tag<HTMLFormElement>.encoding(value: Flow<String>) = attr(\"encoding\", value)\n\nfun Tag<HTMLFormElement>.method(value: String) = attr(\"method\", value)\nfun Tag<HTMLFormElement>.method(value: Flow<String>) = attr(\"method\", value)\n\nfun Tag<HTMLFormElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFormElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLFormElement>.noValidate(value: Boolean, trueValue: String = \"\") = attr(\"novalidate\", value, trueValue)\nfun Tag<HTMLFormElement>.noValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"novalidate\", value, trueValue)\n\nfun Tag<HTMLFormElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLFormElement>.target(value: Flow<String>) = attr(\"target\", value)\n\n\n/*\n * HTMLLabelElement attributes\n */\nfun Tag<HTMLLabelElement>.`for`(value: String) = attr(\"for\", value)\nfun Tag<HTMLLabelElement>.`for`(value: Flow<String>) = attr(\"for\", value)\n\n\n/*\n * HTMLInputElement attributes\n */\nfun Tag<HTMLInputElement>.accept(value: String) = attr(\"accept\", value)\nfun Tag<HTMLInputElement>.accept(value: Flow<String>) = attr(\"accept\", value)\n\nfun Tag<HTMLInputElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLInputElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLInputElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLInputElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLInputElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLInputElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLInputElement>.defaultChecked(value: Boolean, trueValue: String = \"\") = attr(\"defaultchecked\", value, trueValue)\nfun Tag<HTMLInputElement>.defaultChecked(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultchecked\", value, trueValue)\n\nfun Tag<HTMLInputElement>.checked(value: Boolean, trueValue: String = \"\") {\n    domNode.checked = value\n    domNode.defaultChecked = value\n    if (value) domNode.setAttribute(\"checked\", trueValue)\n    else domNode.removeAttribute(\"checked\")\n}\n\nfun Tag<HTMLInputElement>.checked(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> checked(v, trueValue) }\n}\n\nfun Tag<HTMLInputElement>.dirName(value: String) = attr(\"dirname\", value)\nfun Tag<HTMLInputElement>.dirName(value: Flow<String>) = attr(\"dirname\", value)\n\nfun Tag<HTMLInputElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLInputElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLInputElement>.formAction(value: String) = attr(\"formaction\", value)\nfun Tag<HTMLInputElement>.formAction(value: Flow<String>) = attr(\"formaction\", value)\n\nfun Tag<HTMLInputElement>.formEnctype(value: String) = attr(\"formenctype\", value)\nfun Tag<HTMLInputElement>.formEnctype(value: Flow<String>) = attr(\"formenctype\", value)\n\nfun Tag<HTMLInputElement>.formMethod(value: String) = attr(\"formmethod\", value)\nfun Tag<HTMLInputElement>.formMethod(value: Flow<String>) = attr(\"formmethod\", value)\n\nfun Tag<HTMLInputElement>.formNoValidate(value: Boolean, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\nfun Tag<HTMLInputElement>.formNoValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\n\nfun Tag<HTMLInputElement>.formTarget(value: String) = attr(\"formtarget\", value)\nfun Tag<HTMLInputElement>.formTarget(value: Flow<String>) = attr(\"formtarget\", value)\n\nfun Tag<HTMLInputElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLInputElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLInputElement>.indeterminate(value: Boolean, trueValue: String = \"\") = attr(\"indeterminate\", value, trueValue)\nfun Tag<HTMLInputElement>.indeterminate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"indeterminate\", value, trueValue)\n\nfun Tag<HTMLInputElement>.inputMode(value: String) = attr(\"inputmode\", value)\nfun Tag<HTMLInputElement>.inputMode(value: Flow<String>) = attr(\"inputmode\", value)\n\nfun Tag<HTMLInputElement>.max(value: String) = attr(\"max\", value)\nfun Tag<HTMLInputElement>.max(value: Flow<String>) = attr(\"max\", value)\n\nfun Tag<HTMLInputElement>.maxLength(value: Int) = attr(\"maxlength\", value)\nfun Tag<HTMLInputElement>.maxLength(value: Flow<Int>) = attr(\"maxlength\", value)\n\nfun Tag<HTMLInputElement>.min(value: String) = attr(\"min\", value)\nfun Tag<HTMLInputElement>.min(value: Flow<String>) = attr(\"min\", value)\n\nfun Tag<HTMLInputElement>.minLength(value: Int) = attr(\"minlength\", value)\nfun Tag<HTMLInputElement>.minLength(value: Flow<Int>) = attr(\"minlength\", value)\n\nfun Tag<HTMLInputElement>.multiple(value: Boolean, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\nfun Tag<HTMLInputElement>.multiple(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\n\nfun Tag<HTMLInputElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLInputElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLInputElement>.pattern(value: String) = attr(\"pattern\", value)\nfun Tag<HTMLInputElement>.pattern(value: Flow<String>) = attr(\"pattern\", value)\n\nfun Tag<HTMLInputElement>.placeholder(value: String) = attr(\"placeholder\", value)\nfun Tag<HTMLInputElement>.placeholder(value: Flow<String>) = attr(\"placeholder\", value)\n\nfun Tag<HTMLInputElement>.readOnly(value: Boolean, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\nfun Tag<HTMLInputElement>.readOnly(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\n\nfun Tag<HTMLInputElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLInputElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLInputElement>.size(value: Int) = attr(\"size\", value)\nfun Tag<HTMLInputElement>.size(value: Flow<Int>) = attr(\"size\", value)\n\nfun Tag<HTMLInputElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLInputElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLInputElement>.step(value: String) = attr(\"step\", value)\nfun Tag<HTMLInputElement>.step(value: Flow<String>) = attr(\"step\", value)\n\nfun Tag<HTMLInputElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLInputElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLInputElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLInputElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLInputElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLInputElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\nfun Tag<HTMLInputElement>.valueAsDate(value: String) = attr(\"valueasdate\", value)\nfun Tag<HTMLInputElement>.valueAsDate(value: Flow<String>) = attr(\"valueasdate\", value)\n\nfun Tag<HTMLInputElement>.valueAsNumber(value: Double) = attr(\"valueasnumber\", value)\nfun Tag<HTMLInputElement>.valueAsNumber(value: Flow<Double>) = attr(\"valueasnumber\", value)\n\nfun Tag<HTMLInputElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLInputElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLInputElement>.selectionStart(value: Int?) = attr(\"selectionstart\", value)\nfun Tag<HTMLInputElement>.selectionStart(value: Flow<Int?>) = attr(\"selectionstart\", value)\n\nfun Tag<HTMLInputElement>.selectionEnd(value: Int?) = attr(\"selectionend\", value)\nfun Tag<HTMLInputElement>.selectionEnd(value: Flow<Int?>) = attr(\"selectionend\", value)\n\nfun Tag<HTMLInputElement>.selectionDirection(value: String?) = attr(\"selectiondirection\", value)\nfun Tag<HTMLInputElement>.selectionDirection(value: Flow<String?>) = attr(\"selectiondirection\", value)\n\nfun Tag<HTMLInputElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLInputElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLInputElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLInputElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\n\n/*\n * HTMLButtonElement attributes\n */\nfun Tag<HTMLButtonElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLButtonElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLButtonElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.formAction(value: String) = attr(\"formaction\", value)\nfun Tag<HTMLButtonElement>.formAction(value: Flow<String>) = attr(\"formaction\", value)\n\nfun Tag<HTMLButtonElement>.formEnctype(value: String) = attr(\"formenctype\", value)\nfun Tag<HTMLButtonElement>.formEnctype(value: Flow<String>) = attr(\"formenctype\", value)\n\nfun Tag<HTMLButtonElement>.formMethod(value: String) = attr(\"formmethod\", value)\nfun Tag<HTMLButtonElement>.formMethod(value: Flow<String>) = attr(\"formmethod\", value)\n\nfun Tag<HTMLButtonElement>.formNoValidate(value: Boolean, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\nfun Tag<HTMLButtonElement>.formNoValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.formTarget(value: String) = attr(\"formtarget\", value)\nfun Tag<HTMLButtonElement>.formTarget(value: Flow<String>) = attr(\"formtarget\", value)\n\nfun Tag<HTMLButtonElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLButtonElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLButtonElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLButtonElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLButtonElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLButtonElement>.value(value: Flow<String>) = attr(\"value\", value)\n\nfun Tag<HTMLButtonElement>.menu(value: HTMLMenuElement?) = attr(\"menu\", value)\nfun Tag<HTMLButtonElement>.menu(value: Flow<HTMLMenuElement?>) = attr(\"menu\", value)\n\n\n/*\n * HTMLSelectElement attributes\n */\nfun Tag<HTMLSelectElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLSelectElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLSelectElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLSelectElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLSelectElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.multiple(value: Boolean, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\nfun Tag<HTMLSelectElement>.multiple(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLSelectElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLSelectElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLSelectElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.size(value: Int) = attr(\"size\", value)\nfun Tag<HTMLSelectElement>.size(value: Flow<Int>) = attr(\"size\", value)\n\nfun Tag<HTMLSelectElement>.length(value: Int) = attr(\"length\", value)\nfun Tag<HTMLSelectElement>.length(value: Flow<Int>) = attr(\"length\", value)\n\nfun Tag<HTMLSelectElement>.selectedIndex(value: Int) = attr(\"selectedindex\", value)\nfun Tag<HTMLSelectElement>.selectedIndex(value: Flow<Int>) = attr(\"selectedindex\", value)\n\nfun Tag<HTMLSelectElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLSelectElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n\n/*\n * HTMLOptGroupElement attributes\n */\nfun Tag<HTMLOptGroupElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLOptGroupElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLOptGroupElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLOptGroupElement>.label(value: Flow<String>) = attr(\"label\", value)\n\n\n/*\n * HTMLOptionElement attributes\n */\nfun Tag<HTMLOptionElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLOptionElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLOptionElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLOptionElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLOptionElement>.defaultSelected(value: Boolean, trueValue: String = \"\") = attr(\"defaultselected\", value, trueValue)\nfun Tag<HTMLOptionElement>.defaultSelected(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultselected\", value, trueValue)\n\nfun Tag<HTMLOptionElement>.selected(value: Boolean, trueValue: String = \"\") {\n    domNode.selected = value\n    domNode.defaultSelected = value\n    if (value) domNode.setAttribute(\"selected\", trueValue)\n    else domNode.removeAttribute(\"selected\")\n}\n\nfun Tag<HTMLOptionElement>.selected(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> selected(v, trueValue) }\n}\n\nfun Tag<HTMLOptionElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLOptionElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n/*\n * HTMLTextAreaElement attributes\n */\nfun Tag<HTMLTextAreaElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLTextAreaElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLTextAreaElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.cols(value: Int) = attr(\"cols\", value)\nfun Tag<HTMLTextAreaElement>.cols(value: Flow<Int>) = attr(\"cols\", value)\n\nfun Tag<HTMLTextAreaElement>.dirName(value: String) = attr(\"dirname\", value)\nfun Tag<HTMLTextAreaElement>.dirName(value: Flow<String>) = attr(\"dirname\", value)\n\nfun Tag<HTMLTextAreaElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.inputMode(value: String) = attr(\"inputmode\", value)\nfun Tag<HTMLTextAreaElement>.inputMode(value: Flow<String>) = attr(\"inputmode\", value)\n\nfun Tag<HTMLTextAreaElement>.maxLength(value: Int) = attr(\"maxlength\", value)\nfun Tag<HTMLTextAreaElement>.maxLength(value: Flow<Int>) = attr(\"maxlength\", value)\n\nfun Tag<HTMLTextAreaElement>.minLength(value: Int) = attr(\"minlength\", value)\nfun Tag<HTMLTextAreaElement>.minLength(value: Flow<Int>) = attr(\"minlength\", value)\n\nfun Tag<HTMLTextAreaElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLTextAreaElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLTextAreaElement>.placeholder(value: String) = attr(\"placeholder\", value)\nfun Tag<HTMLTextAreaElement>.placeholder(value: Flow<String>) = attr(\"placeholder\", value)\n\nfun Tag<HTMLTextAreaElement>.readOnly(value: Boolean, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.readOnly(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.rows(value: Int) = attr(\"rows\", value)\nfun Tag<HTMLTextAreaElement>.rows(value: Flow<Int>) = attr(\"rows\", value)\n\nfun Tag<HTMLTextAreaElement>.wrap(value: String) = attr(\"wrap\", value)\nfun Tag<HTMLTextAreaElement>.wrap(value: Flow<String>) = attr(\"wrap\", value)\n\nfun Tag<HTMLTextAreaElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLTextAreaElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLTextAreaElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLTextAreaElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\nfun Tag<HTMLTextAreaElement>.selectionStart(value: Int?) = attr(\"selectionstart\", value)\nfun Tag<HTMLTextAreaElement>.selectionStart(value: Flow<Int?>) = attr(\"selectionstart\", value)\n\nfun Tag<HTMLTextAreaElement>.selectionEnd(value: Int?) = attr(\"selectionend\", value)\nfun Tag<HTMLTextAreaElement>.selectionEnd(value: Flow<Int?>) = attr(\"selectionend\", value)\n\nfun Tag<HTMLTextAreaElement>.selectionDirection(value: String?) = attr(\"selectiondirection\", value)\nfun Tag<HTMLTextAreaElement>.selectionDirection(value: Flow<String?>) = attr(\"selectiondirection\", value)\n\n\n/*\n * HTMLKeygenElement attributes\n */\nfun Tag<HTMLKeygenElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLKeygenElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLKeygenElement>.challenge(value: String) = attr(\"challenge\", value)\nfun Tag<HTMLKeygenElement>.challenge(value: Flow<String>) = attr(\"challenge\", value)\n\nfun Tag<HTMLKeygenElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLKeygenElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLKeygenElement>.keytype(value: String) = attr(\"keytype\", value)\nfun Tag<HTMLKeygenElement>.keytype(value: Flow<String>) = attr(\"keytype\", value)\n\nfun Tag<HTMLKeygenElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLKeygenElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLOutputElement attributes\n */\nfun Tag<HTMLOutputElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLOutputElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLOutputElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLOutputElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLOutputElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLOutputElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\n\n/*\n * HTMLProgressElement attributes\n */\nfun Tag<HTMLProgressElement>.value(value: Double) = attr(\"value\", value)\nfun Tag<HTMLProgressElement>.value(value: Flow<Double>) = attr(\"value\", value)\n\nfun Tag<HTMLProgressElement>.max(value: Double) = attr(\"max\", value)\nfun Tag<HTMLProgressElement>.max(value: Flow<Double>) = attr(\"max\", value)\n\n\n/*\n * HTMLMeterElement attributes\n */\nfun Tag<HTMLMeterElement>.value(value: Double) = attr(\"value\", value)\nfun Tag<HTMLMeterElement>.value(value: Flow<Double>) = attr(\"value\", value)\n\nfun Tag<HTMLMeterElement>.min(value: Double) = attr(\"min\", value)\nfun Tag<HTMLMeterElement>.min(value: Flow<Double>) = attr(\"min\", value)\n\nfun Tag<HTMLMeterElement>.max(value: Double) = attr(\"max\", value)\nfun Tag<HTMLMeterElement>.max(value: Flow<Double>) = attr(\"max\", value)\n\nfun Tag<HTMLMeterElement>.low(value: Double) = attr(\"low\", value)\nfun Tag<HTMLMeterElement>.low(value: Flow<Double>) = attr(\"low\", value)\n\nfun Tag<HTMLMeterElement>.high(value: Double) = attr(\"high\", value)\nfun Tag<HTMLMeterElement>.high(value: Flow<Double>) = attr(\"high\", value)\n\nfun Tag<HTMLMeterElement>.optimum(value: Double) = attr(\"optimum\", value)\nfun Tag<HTMLMeterElement>.optimum(value: Flow<Double>) = attr(\"optimum\", value)\n\n\n/*\n * HTMLFieldSetElement attributes\n */\nfun Tag<HTMLFieldSetElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLFieldSetElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLFieldSetElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFieldSetElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLLegendElement attributes\n */\nfun Tag<HTMLLegendElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLLegendElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLDetailsElement attributes\n */\nfun Tag<HTMLDetailsElement>.open(value: Boolean, trueValue: String = \"\") = attr(\"open\", value, trueValue)\nfun Tag<HTMLDetailsElement>.open(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"open\", value, trueValue)\n\n\n/*\n * HTMLMenuElement attributes\n */\nfun Tag<HTMLMenuElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLMenuElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLMenuElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLMenuElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLMenuElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLMenuElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLMenuItemElement attributes\n */\nfun Tag<HTMLMenuItemElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLMenuItemElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLMenuItemElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLMenuItemElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLMenuItemElement>.icon(value: String) = attr(\"icon\", value)\nfun Tag<HTMLMenuItemElement>.icon(value: Flow<String>) = attr(\"icon\", value)\n\nfun Tag<HTMLMenuItemElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLMenuItemElement>.checked(value: Boolean, trueValue: String = \"\") = attr(\"checked\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.checked(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"checked\", value, trueValue)\n\nfun Tag<HTMLMenuItemElement>.radiogroup(value: String) = attr(\"radiogroup\", value)\nfun Tag<HTMLMenuItemElement>.radiogroup(value: Flow<String>) = attr(\"radiogroup\", value)\n\nfun Tag<HTMLMenuItemElement>.default(value: Boolean, trueValue: String = \"\") = attr(\"default\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.default(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"default\", value, trueValue)\n\n\n/*\n * HTMLDialogElement attributes\n */\nfun Tag<HTMLDialogElement>.open(value: Boolean, trueValue: String = \"\") = attr(\"open\", value, trueValue)\nfun Tag<HTMLDialogElement>.open(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"open\", value, trueValue)\n\nfun Tag<HTMLDialogElement>.returnValue(value: String) = attr(\"returnvalue\", value)\nfun Tag<HTMLDialogElement>.returnValue(value: Flow<String>) = attr(\"returnvalue\", value)\n\n\n/*\n * HTMLScriptElement attributes\n */\nfun Tag<HTMLScriptElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLScriptElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLScriptElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLScriptElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLScriptElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLScriptElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLScriptElement>.async(value: Boolean, trueValue: String = \"\") = attr(\"async\", value, trueValue)\nfun Tag<HTMLScriptElement>.async(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"async\", value, trueValue)\n\nfun Tag<HTMLScriptElement>.defer(value: Boolean, trueValue: String = \"\") = attr(\"defer\", value, trueValue)\nfun Tag<HTMLScriptElement>.defer(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defer\", value, trueValue)\n\nfun Tag<HTMLScriptElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLScriptElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLScriptElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLScriptElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLScriptElement>.event(value: String) = attr(\"event\", value)\nfun Tag<HTMLScriptElement>.event(value: Flow<String>) = attr(\"event\", value)\n\nfun Tag<HTMLScriptElement>.`for`(value: String) = attr(\"for\", value)\nfun Tag<HTMLScriptElement>.`for`(value: Flow<String>) = attr(\"for\", value)\n\n\n/*\n * HTMLSlotElement attributes\n */\nfun Tag<HTMLSlotElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLSlotElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLCanvasElement attributes\n */\nfun Tag<HTMLCanvasElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLCanvasElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLCanvasElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLCanvasElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\n\n/*\n * HTMLAppletElement attributes\n */\nfun Tag<HTMLAppletElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLAppletElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLAppletElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLAppletElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLAppletElement>.archive(value: String) = attr(\"archive\", value)\nfun Tag<HTMLAppletElement>.archive(value: Flow<String>) = attr(\"archive\", value)\n\nfun Tag<HTMLAppletElement>.code(value: String) = attr(\"code\", value)\nfun Tag<HTMLAppletElement>.code(value: Flow<String>) = attr(\"code\", value)\n\nfun Tag<HTMLAppletElement>.codeBase(value: String) = attr(\"codebase\", value)\nfun Tag<HTMLAppletElement>.codeBase(value: Flow<String>) = attr(\"codebase\", value)\n\nfun Tag<HTMLAppletElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLAppletElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLAppletElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLAppletElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLAppletElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLAppletElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLAppletElement>.`object`(value: String) = attr(\"object\", value)\nfun Tag<HTMLAppletElement>.`object`(value: Flow<String>) = attr(\"object\", value)\n\nfun Tag<HTMLAppletElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLAppletElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLAppletElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLAppletElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLMarqueeElement attributes\n */\nfun Tag<HTMLMarqueeElement>.behavior(value: String) = attr(\"behavior\", value)\nfun Tag<HTMLMarqueeElement>.behavior(value: Flow<String>) = attr(\"behavior\", value)\n\nfun Tag<HTMLMarqueeElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLMarqueeElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLMarqueeElement>.direction(value: String) = attr(\"direction\", value)\nfun Tag<HTMLMarqueeElement>.direction(value: Flow<String>) = attr(\"direction\", value)\n\nfun Tag<HTMLMarqueeElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLMarqueeElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLMarqueeElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLMarqueeElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLMarqueeElement>.loop(value: Int) = attr(\"loop\", value)\nfun Tag<HTMLMarqueeElement>.loop(value: Flow<Int>) = attr(\"loop\", value)\n\nfun Tag<HTMLMarqueeElement>.scrollAmount(value: Int) = attr(\"scrollamount\", value)\nfun Tag<HTMLMarqueeElement>.scrollAmount(value: Flow<Int>) = attr(\"scrollamount\", value)\n\nfun Tag<HTMLMarqueeElement>.scrollDelay(value: Int) = attr(\"scrolldelay\", value)\nfun Tag<HTMLMarqueeElement>.scrollDelay(value: Flow<Int>) = attr(\"scrolldelay\", value)\n\nfun Tag<HTMLMarqueeElement>.trueSpeed(value: Boolean, trueValue: String = \"\") = attr(\"truespeed\", value, trueValue)\nfun Tag<HTMLMarqueeElement>.trueSpeed(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"truespeed\", value, trueValue)\n\nfun Tag<HTMLMarqueeElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLMarqueeElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLMarqueeElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLMarqueeElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLFrameSetElement attributes\n */\nfun Tag<HTMLFrameSetElement>.cols(value: String) = attr(\"cols\", value)\nfun Tag<HTMLFrameSetElement>.cols(value: Flow<String>) = attr(\"cols\", value)\n\nfun Tag<HTMLFrameSetElement>.rows(value: String) = attr(\"rows\", value)\nfun Tag<HTMLFrameSetElement>.rows(value: Flow<String>) = attr(\"rows\", value)\n\n\n/*\n * HTMLFrameElement attributes\n */\nfun Tag<HTMLFrameElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFrameElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLFrameElement>.scrolling(value: String) = attr(\"scrolling\", value)\nfun Tag<HTMLFrameElement>.scrolling(value: Flow<String>) = attr(\"scrolling\", value)\n\nfun Tag<HTMLFrameElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLFrameElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLFrameElement>.frameBorder(value: String) = attr(\"frameborder\", value)\nfun Tag<HTMLFrameElement>.frameBorder(value: Flow<String>) = attr(\"frameborder\", value)\n\nfun Tag<HTMLFrameElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLFrameElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLFrameElement>.noResize(value: Boolean, trueValue: String = \"\") = attr(\"noresize\", value, trueValue)\nfun Tag<HTMLFrameElement>.noResize(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"noresize\", value, trueValue)\n\nfun Tag<HTMLFrameElement>.marginHeight(value: String) = attr(\"marginheight\", value)\nfun Tag<HTMLFrameElement>.marginHeight(value: Flow<String>) = attr(\"marginheight\", value)\n\nfun Tag<HTMLFrameElement>.marginWidth(value: String) = attr(\"marginwidth\", value)\nfun Tag<HTMLFrameElement>.marginWidth(value: Flow<String>) = attr(\"marginwidth\", value)\n\n\n/*\n * HTMLDirectoryElement attributes\n */\nfun Tag<HTMLDirectoryElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLDirectoryElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLFontElement attributes\n */\nfun Tag<HTMLFontElement>.color(value: String) = attr(\"color\", value)\nfun Tag<HTMLFontElement>.color(value: Flow<String>) = attr(\"color\", value)\n\nfun Tag<HTMLFontElement>.face(value: String) = attr(\"face\", value)\nfun Tag<HTMLFontElement>.face(value: Flow<String>) = attr(\"face\", value)\n\nfun Tag<HTMLFontElement>.size(value: String) = attr(\"size\", value)\nfun Tag<HTMLFontElement>.size(value: Flow<String>) = attr(\"size\", value)\n","package dev.fritz2.validation\n\nimport dev.fritz2.core.Inspector\nimport dev.fritz2.core.inspectorOf\nimport kotlin.jvm.JvmInline\n\n/**\n * Encapsulates the logic for validating a given data-model with metadata.\n *\n * The validation logic itself is expressed by a function that must be passed as [validate] parameter.\n * This function takes the actual model-data [D] as well as the metadata [T] in order to create a [List] of\n * validation messages [M]. This value class simply wraps the provided [validate] function in order to make it\n * invocable without any ceremony.\n *\n * It appears to be a good practice to put the implementation of the passed [validate] function right next to your data\n * classes in the `commonMain` section of your Kotlin multiplatform project.\n * This way you can write the validation logic once and use them on the *JS* and *JVM* side.\n *\n * For example:\n * ```kotlin\n * data class Person(val name: String, val birthday: LocalDate) {\n *     companion object {\n *          // define validator inside of its corresponding domain type\n *          val validate: Validator<Person, LocalDate, SomeMessage> = validation { inspector, today ->\n *              inspector.map(Person.name()).let { nameInspector ->\n *                  if(nameInspector.data.isBlank())\n *                      add(SomeMessage(nameInspector.path, \"Name must not be blank\"))\n *              }\n *              inspector.map(Person.birthday()).let { birthdayInspector ->\n *                  if(birthdayInspector.data > today)\n *                      add(SomeMessage(birthdayInspector, path, \"Birthday must not be in the future\"))\n *              }\n *          }\n *     }\n * }\n * ```\n *\n * You can also compose validators:\n * ```kotlin\n * data class Person(val name: String, val birthday: LocalDate) {\n *      // take from example above!\n * }\n *\n * data class User(val nickname: String, val person: Person) {\n *      data class UserMetaData(val nicknameRepo: NicknameRepository, val today: LocalDate)\n *\n *      companion object {\n *          val validate: Validator<User, UserMetaData, SomeMessage> = validation { inspector, meta ->\n *              inspector.map(User.nickname()).let { nicknameInspector ->\n *                  if(meta.nicknameRepo.exists(nicknameInspector.data))\n *                      add(SomeMessage(nicknameInspector.path, \"Nickname is already in use\"))\n *              }\n *              // use validator of `Person` type by just calling the validator and passing the mapped inspector\n *              // and of course the appropriate meta-data!\n *              addAll(Person.validate(inspector.map(User.person()), meta.today))\n *          }\n *      }\n * }\n * ```\n *\n * @param D data-model to validate\n * @param T metadata which perhaps is needed in validation process\n */\n@JvmInline\nvalue class Validation<D, T, M>(private val validate: (Inspector<D>, T) -> List<M>) {\n    operator fun invoke(inspector: Inspector<D>, metadata: T): List<M> = this.validate(inspector, metadata)\n    operator fun invoke(data: D, metadata: T): List<M> = this.validate(inspectorOf(data), metadata)\n}\n\n/**\n * Convenience execution function for [Validation] for the case, that the metadata is `Unit`.\n * In those cases the metadata parameter can be omitted.\n *\n * @param inspector The [Inspector] of type [D] that should be used for the validation process\n */\noperator fun <D, M> Validation<D, Unit, M>.invoke(inspector: Inspector<D>): List<M> = this(inspector, Unit)\n\n/**\n * Convenience execution function for [Validation] for the case, that the metadata is `Unit`.\n * In those cases the metadata parameter can be omitted.\n *\n * @param data The data of type [D] that should be used for the validation process\n */\noperator fun <D, M> Validation<D, Unit, M>.invoke(data: D): List<M> = this(data, Unit)\n\n/**\n * Convenience function for creating a [Validation] instance accepting model- and metadata by working on a\n * [MutableList] receiver and using an [Inspector] for getting the right [Inspector.path] from sub-models\n * next to the [Inspector.data].\n */\nfun <D, T, M> validation(validate: MutableList<M>.(Inspector<D>, T) -> Unit): Validation<D, T, M> =\n    Validation { data, metadata ->\n        buildList<M> { validate(data, metadata) }\n    }\n\n/**\n * Convenience function for creating a [Validation] instance only accepting model-data by working on a\n * [MutableList] receiver and using an [Inspector] for getting the right [Inspector.path] from sub-models\n * next to the [Inspector.data].\n */\nfun <D, M> validation(validate: MutableList<M>.(Inspector<D>) -> Unit): Validation<D, Unit, M> =\n    Validation { data, _ ->\n        buildList<M> { validate(data) }\n    }\n\n/**\n * Minimal interface for a validation message that exposes the model path for matching relevant sub-model-data and\n * probably relevant UI element representation for showing the message and getting information about the valid state\n * after validation process.\n */\ninterface ValidationMessage {\n\n    /**\n     * Path inside your model derived from [Inspector.path]\n     */\n    val path: String\n\n    /**\n     * Decides if the [ValidationMessage] is an error which is needed to determine if validation state is\n     * successful or not.\n     *\n     * It is intentional to explicitly define a message as an error to realize scenarios, where also pure information\n     * or warning messages could arise, that should *not* stop the process.\n     *\n     * If an application considers every message as error, just set this to `true`.\n     */\n    val isError: Boolean\n}\n\n/**\n * Returns *true* when the list contains no [ValidationMessage] which is marked with [ValidationMessage.isError].\n */\nval <M : ValidationMessage> List<M>.valid: Boolean get() = none { it.isError }","package dev.fritz2.examples.tictactoe\n\nimport dev.fritz2.validation.Validation\nimport dev.fritz2.validation.ValidationMessage\nimport dev.fritz2.validation.validation\n\nclass GameEndMessage(override val path: String, val text: String, val type: String) : ValidationMessage {\n    override val isError: Boolean = false\n}\n\nclass Engine {\n\n    companion object {\n        private val endingValidator: Validation<Field, GameState, GameEndMessage> = validation { inspector, gameState ->\n            if (inspector.data.any { it.isInWinningGroup }) {\n                add(GameEndMessage(inspector.path, \"Player ${gameState.player} has won!\", \"alert-success\"))\n            } else if (GameState.isFull(inspector.data)) {\n                add(GameEndMessage(inspector.path, \"This is a draw!\", \"alert-info\"))\n            }\n        }\n\n        private val winningGroups = listOf(\n            listOf(0, 1, 2),\n            listOf(3, 4, 5),\n            listOf(6, 7, 8),\n            listOf(0, 3, 6),\n            listOf(1, 4, 7),\n            listOf(2, 5, 8),\n            listOf(0, 4, 8),\n            listOf(2, 4, 6)\n        )\n\n        private fun markWinningCells(state: GameState, field: Field): Field {\n            val winningFields = winningGroups.filter { group ->\n                group.map { field[it] }.all { it.symbol == state.player }\n            }.flatten()\n            return field.map { cell ->\n                if (winningFields.contains(cell.id)) {\n                    cell.copy(isInWinningGroup = true)\n                } else\n                    cell\n            }\n        }\n    }\n\n    fun next(state: GameState, move: Cell) =\n        if (!state.hasEnded() && state.field[move.id].isBlank) {\n            val newField = markWinningCells(state, state.field.map { if (it.id == move.id) move else it })\n            val messages = endingValidator(newField, state)\n            state.copy(field = newField, player = state.nextPlayer(), messages = messages)\n        } else {\n            state\n        }\n}\n","package dev.fritz2.examples.tictactoe\n\ndata class Cell(val id: Int, val symbol: String, val isInWinningGroup: Boolean = false) {\n    val isBlank: Boolean\n        get() = symbol.isBlank()\n}\n\ntypealias Field = List<Cell>\n\ndata class GameState(\n    val field: Field = (0..8).map { Cell(it, \"\") },\n    val player: String = \"X\",\n    val messages: List<GameEndMessage> = emptyList()\n) {\n    companion object {\n        fun isFull(field: Field) = field.all { !it.isBlank }\n    }\n\n    fun hasEnded() = messages.isNotEmpty()\n    fun nextPlayer() = if (player == \"X\") \"O\" else \"X\"\n}\n","package dev.fritz2.examples.tictactoe\n\nimport dev.fritz2.core.*\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.map\n\nclass GameStore(private val engine: Engine, initialState: GameState) : RootStore<GameState>(initialState, job = Job()) {\n\n    val field = data.map { it.field }\n\n    val check = handle<Cell> { state, move ->\n        engine.next(state, move)\n    }\n}\n\nfun RenderContext.circleIcon() {\n    svg(\"w-100\") {\n        viewBox(\"-3 -3 30 30\")\n        content(\n            \"\"\"<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"currentColor\"\n             d=\"M12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 \n             16.4183 20 12C20 7.58172 16.4183 4 12 4ZM2 12C2 6.47715 6.47715 2 12 2C17.5228 \n             2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12Z\"/>\"\"\".trimIndent()\n        )\n    }\n}\n\nfun RenderContext.xIcon() {\n    svg(\"w-100\") {\n        viewBox(\"0 0 24 24\")\n        content(\n            \"\"\"<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"currentColor\"\n             d=\"M5.29289 5.29289C5.68342 4.90237 6.31658 4.90237 6.70711 5.29289L12 10.5858L17.2929\n             5.29289C17.6834 4.90237 18.3166 4.90237 18.7071 5.29289C19.0976 5.68342 19.0976 6.31658\n             18.7071 6.70711L13.4142 12L18.7071 17.2929C19.0976 17.6834 19.0976 18.3166 18.7071 18.7071C18.3166\n             19.0976 17.6834 19.0976 17.2929 18.7071L12 13.4142L6.70711 18.7071C6.31658 19.0976 5.68342 19.0976\n             5.29289 18.7071C4.90237 18.3166 4.90237 17.6834 5.29289 17.2929L10.5858 12L5.29289 6.70711C4.90237\n             6.31658 4.90237 5.68342 5.29289 5.29289Z\"/>\"\"\".trimIndent()\n        )\n    }\n}\n\nfun main() {\n\n    val gameStore = GameStore(Engine(), GameState())\n\n    render(\"#target\") {\n        div(\"d-flex justify-content-center w-100\") {\n            div(\"d-flex flex-column\") {\n                inlineStyle(\"width: 30.5rem;\")\n                gameStore.data.render {\n                    if (it.hasEnded()) {\n                        val message = it.messages.first()\n                        div(\"alert\") {\n                            +message.text\n                            className(message.type)\n                            attr(\"role\", \"alert\")\n                        }\n                    }\n                }\n                div(\"row\") {\n                    gameStore.field.renderEach { cell ->\n                        div(\n                            joinClasses(\n                                \"col-4 border d-flex justify-content-center align-items-center\",\n                                if (cell.isInWinningGroup) \"bg-success\" else \"bg-white\"\n                            )\n                        ) {\n                            inlineStyle(\"height: 10rem;\")\n                            if (cell.symbol.isNotBlank()) {\n                                if (cell.symbol == \"X\") xIcon() else circleIcon()\n                            }\n                            clicks.map {\n                                cell.copy(symbol = gameStore.current.player)\n                            } handledBy gameStore.check\n                        }\n                    }\n                }\n                button(\"btn btn-secondary mt-4\") {\n                    +\"Reset\"\n                    clicks.map { GameState(player = gameStore.current.player) } handledBy gameStore.update\n                }\n            }\n        }\n    }\n}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(800);\n"],"names":["root","factory","exports","module","define","amd","globalThis","eventName","capture","selector","<this>","into","content","target","mountContext","MountContext","Job","MainScope","parentJob","launch","$this$launch","$completion","idProvider","batch","$idProvider","$content","upstream","createPatches","clear","domNode","mountPoints","onEach","$batch","$target","it","mountPatches$slambda","$mountPoints","mountPatches","$this$mountPatches","upstreamValues","acc","new","baseClass","id","scope","HtmlTag","SvgTag","name","value","setAttribute","trueValue","removeAttribute","Listener","callbackFlow","$eventName","$capture","$selector","$this$callbackFlow","toCharArray","data","classes","element","joinToString","message","$scope","$targetElement","MountPointImpl","this","$mountPoint","process","collector","events","$this_callbackFlow","e","console","error","$listener","removeEventListener","job","mountScope","beforeUnmount","Mutex","payload","handler","key","mountPoint","from","to","itemToMove","childNodes","item","child","index","length","appendChild","insertBefore","mountPatches$slambda$slambda$slambda","$this$withContext","$this_launch","$this$catch","Key","a","b","max","buffer","Patch","elements","start","count","$mountContext","$this_mountPatches","newJob","BuildContext","RenderContext$renderEach$lambda$o$collect$slambda","<init>","entries","parent","current","$execute","$d","$it","d","fritz2","initialData","MutableStateFlow","Channel","$this$flow","RootStore$data$slambda","$this$transformLatest","RootStore$update$slambda","newValue","$name","$flowArray","HtmlTag$classesStateFlow$delegate$lambda$slambda$o$collect$slambda","$this$combineInternal","<get-classesStateFlow>","receiver","tagName","className","lazy","AnnexContext","setAttributeNS","addEventListener","awaitClose","t","withContext","DomLifecycleListener","document","createDocumentFragment","move","nextSibling","cancelChildren","removeChild","append","awaitAnimationFrame","window","cancel","distinctUntilChanged","mapLatest","collect","oldList","newList","isSame","v","CircularArray","k","x","y","o","trace","lastPatch","reversed","withIndex","prevK","prevX","prevY","Delete","Move","InsertMany","listOf","Insert","toString","mapping","old","equals","Pair","emptyFlow","update","joinClasses","parentElement","flowArray","buildClasses","xml","innerHTML","execute","flow","$executeJob","executeJob","launchIn","cause","printErrorIgnoreLensException","createTextNode","override","querySelector","targetElement","body","css","getElementById","sheet","head","getOrCreateGlobalStylesheet","insertRule","MountTargetNotFoundException","validate","$validate","metadata","RootInspector","inspectorOf","path","text","type","$this$validation","inspector","gameState","GameEndMessage","validation","symbol","isInWinningGroup","field","player","messages","Cell","emptyList","GameStore$field$o$collect$slambda","engine","initialState","RootStore","state","$gameStore","gameStore","GameStore","Engine","GameState","render","$this$render","$this$div","$this$renderEach","cell","$cell","circleIcon","$this$button","$this$svg","viewBox","first","$message","main$lambda$lambda$lambda$lambda$lambda$lambda$o$collect$slambda","main$lambda$lambda$lambda$lambda$o$collect$slambda","newField","markWinningCells","winningFields","flatten","isBlank","result","log","LN2","O","len","relativeStart","end","relativeEnd","finalValue","TypedArray","asUint","context","initial","operation","separator","prefix","postfix","limit","truncated","transform","destination","minimumValue","maximumValue","other","ordinal","low","high","interfaces","maxSize","masks","i","currentSize","imask","iid","iidImask","numberIndex","intArray","numberWithSettledBit","activeBit","capacity","mask","array","initValue","$array","obj","code","ia","hash","descriptor","proto","typeOf","shiftNumber","MASK","bigNumber","hashCode","signum","chunk","hashCodeMap","cachedHashCode","str","obj1","obj2","instance","constructorFunction","constructor","this_","errorInfo","thisNeg","otherNeg","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","numBits","radix","radixLong","div","rem","digitsPerTime","radixToPower","remDiv","digits","twoPwr32","kind","defaultConstructor","associatedObjectKey","associatedObjects","suspendArity","ctor","endInclusive","iface","possibleActiveBit","parentProto","propName","fromIndex","toIndex","newSize","source","defaultValue","collection","iterator","destinationOffset","startIndex","endIndex","rangeSize","subrange","ArrayList_init_$Init$","initialCapacity","rangeCheck","internalMap","HashMap_init_$Init$","original","backing","map","HashSet_init_$Init$","loadFactor","computeHashSize","computeShift","hashSize","InternalHashMap_init_$Init$","<get-capacity>","<get-hashSize>","registerModification","ensureExtraCapacity","n","shouldCompact","extraCapacity","spareCapacity","gaps","ensureCapacity","minCapacity","src","dst","srcLen","dstLen","arr","newHashSize","allocateValuesArray","curValuesArray","newValuesArray","compact","updateHashArray","j","valuesArray","rehash","putRehash","probesLeft","findKey","addKey","tentativeMaxProbeDistance","probeDistance","putIndex","removeEntryAt","removeHashAt","removedHash","hole","patchAttemptsLeft","putEntry","entry","oldValue","keysArray","presenceArray","hashArray","maxProbeDistance","LinkedHashMap_init_$Init$","LinkedHashSet_init_$Init$","resultContinuation","completion","$receiver","$completion$1","Exception_init_$Init$","IllegalStateException_init_$Init$","UnsupportedOperationException_init_$Init$","RuntimeException_init_$Init$","NoSuchElementException_init_$Init$","NullPointerException_init_$Init$","ConcurrentModificationException_init_$Init$","NoWhenBranchMatchedException_init_$Init$","ClassCastException_init_$Init$","seed","seed1","seed2","jClass","givenSimpleName","isInstanceFunction","jClasses","kClass","StringBuilder_init_$Init$","uppercase","char","ch","diff","needle","bottom","top","middle","ignoreCase","n1","n2","min","thisChar","otherChar","implFindEntry","ArrayDeque_init_$Init$","copyElements","newCapacity","newElements","positiveMod","negativeMod","incremented","decremented","nullifyNonEmpty","internalFromIndex","internalToIndex","values","isVarargs","iteratorFactory","exceptionalState","$block","removed","interceptor","left","size","cur","contains","baseKey","safeCast","step","c","mod","until","z","w","addend","last","initializer","exception","second","CancellationException_init_$Init$","IllegalArgumentException_init_$Init$","IndexOutOfBoundsException_init_$Init$","Error_init_$Init$","ArithmeticException_init_$Init$","UninitializedPropertyAccessException_init_$Init$","approx","res","approxDouble","approx2","log2","delta","approxRes","approxRem","bitCount","l","modified","iter","insertionRangeCheck","offset","increaseLength","amount","previous","sb","putAllEntries","updated","contentEquals","currentResult","currentException","outcome","intercepted","arity","$arity","oldCapacity","otherIterator","ourValue","internalLastIndex","internalIndex","decrementedInternalIndex","decrementedHead","tail","copyCollectionElements","oldElement","reference","dest","collectionSize","removeRangeShiftPreceding","copyFromIndex","copyToIndex","copyCount","segmentLength","newHead","removeRangeShiftSucceeding","nextNotReady","block","next","newLeft","containsAll","bits","rnd","v0","m","argument","default","random","list","midPoint","reverseIndex","tmp","getter","setter","paramCount","superType","isNegative","firstChar","limitForMaxRadix","limitBeforeMul","digit","suppressed","event","event1","event2","event3","event4","<set-?>","expect","parentContext","initParentJob","active","newContext","coroutine","uCont","handle","delegate","<get-parentHandle>","isReusable","callSegmentOnCancellation","segment","ex","installParentHandle","invokeOnCancellationImpl","multipleHandlersError","dispatchResume","mode","tryResume","undispatched","dispatcher","eventLoop","resumedState","proposedUpdate","resumeMode","onCancellation","idempotent","alreadyResumedError","detachChildIfNonResuable","cancelHandler","idempotentResume","cancelCause","handled","continuation","originalException","thrownException","unconfined","invokeImmediately","JobNode$invoke$ref","JobNode$invoke$ref$lambda","isActive","<set-exceptionsHolder>","<get-exceptionsHolder>","allocateList","finalizeFinishingState","wasCancelling","proposedException","exceptions","finalCause","getFinalRootCause","addSuppressedExceptions","rootCause","seenExceptions","expectedSize","unwrappedCause","unwrapped","finalException","finalState","completeStateFinalization","notifyCancelling","cancelParent","isCancellation","startInternal","promoteEmptyToNodeList","promoteSingleToNodeList","createCauseException","getOrPromoteCancellingList","tryMakeCancelling","cancelling","tryMakeCompleting","tryMakeCompletingSlowPath","notifyRootCause","finishing","anotherChild","tryFinalizeSimpleState","tryWaitForChild","stateString","isCompleting","childJob","handlesException","cont","yieldContext","setElementLazy","prev","channel","pointers","onClosedHasNext","hasNextOnNoWaiterSuspend","r","cancellable","updCellResult","onClosedHasNextNoWaiterSuspend","<get-bufferEndCounter>","<get-isRendezvousOrUnlimited>","onClosedSend","sendOnNoWaiterSuspend","s","sendersAndCloseStatusCur","closed","onClosedSendOnNoWaiterSuspend","updateCellSend","waiter","updateCellSendSlow","bufferOrRendezvousSend","curSenders","BufferedChannel$onCancellationImplDoNotCall$ref","BufferedChannel$onCancellationImplDoNotCall$ref$lambda","onCancellationImplDoNotCall","receiveCatchingOnNoWaiterSuspend","onClosedReceiveCatchingOnNoWaiterSuspend","updateCellReceive","senders","updateCellReceiveSlow","helpExpandBuffer","trySelectResult","expandBuffer","updateCellExpandBuffer","updateCellExpandBufferSlow","incCompletedExpandBufferAttempts","nAttempts","incCompletedExpandBufferAttempts$default","<get-receiveException>","completeCloseOrCancel","completeClose","sendersCur","lastSegment","closeLinkedList","lastBufferedCellGlobalIndex","markAllEmptyCellsAsClosed","globalIndex","cancelSuspendedReceiveRequests","sendersCounter","suspendedReceivers","completeCancel","removeUnprocessedElements","onUndeliveredElement","undeliveredElementException","suspendedSenders","sender","isClosed","isClosedForReceive","isCellNonEmpty","findSegmentSend","startFrom","updateSendersCounterIfLower","curCounter","findSegmentReceive","updateReceiversCounterIfLower","findSegmentBufferEnd","currentBufferEndCounter","moveSegmentBufferEndToSpecifiedOrLast","BufferedChannel$onCancellationChannelResultImplDoNotCall$ref","BufferedChannel$onCancellationChannelResultImplDoNotCall$ref$lambda","onCancellationChannelResultImplDoNotCall","$element","select","$select","firstSegment","counter","pauseEB","closeStatus","createSegment$ref$lambda","holder","onBufferOverflow","_channel","trySendImpl","isSendOp","trySendDropLatest","awaitClose$lambda","consume","$collector","collectWithContextUndispatched","emitContext","countOrElement","$downstream","downstream","$resultChannel","$i","$flows","$nonClosed","$arrayFactory","$transform","$value","$previousFlow","$this_coroutineScope","currentContext","collectElement","collectJob","emissionParentJob","$previousKey","keySelector","areEquivalent","$action","$fromDownstream","onEach$o$collect$slambda","$accumulator","$operation","$initial","<get-nextOrClosed>","<get-aliveSegmentLeft>","<get-aliveSegmentRight>","createNewSegment","newTail","propertyName","minValue","maxValue","parsed","findClause","clauseObject","trySelectInternalResult","token","holdsLockImpl","owner","curOwner","$owner","locked","decPermits","p","coerceAvailablePermitsAtMaximum","addAcquireToQueue","curTail","enqIdx","tryResumeNextFromQueue","curHead","deqIdx","cellState","permits","acquiredPermits","combined","addedContext","collectContext","forbiddenElementsBitmask","fatalCompletion","trySuspend","takenState","cancelLater","dispatched","cancellationCause","caller","$onCancellation","upd","tryResumeImpl","dc","actualCompletion","task","queue","eh","continueCompleting","lastChild","waitChild","waitChildAgain","$this$sequence","onCancelling","node","joinInternal","joinSuspend","cancelMakeCompleting","makeCancelling","causeExceptionCache","causeException","addedBeforeCompletion","latestState","main","immediate","isSender","shouldSendSuspend","curSendersAndCloseStatus","globalCellIndex","ebCompleted","ebCompletedAndBit","pauseExpandBuffers","markCancellationStarted","closedByThisOperation","markCancelled","markClosed","invokeCloseHandler","closeHandler","minElem","cellStateString","updateState","expectedState","newState","curSequence","curSlots","oldState","subscriptionCount","slot","slots","resumes","$this$coroutineScope","onCompletion","props","$this$flowScope","coroutineContext","fromDownstream","fatalException","reason","internalResult","trySelectInternal","curState","clause","lockSuspend","contWithOwner","tryLockImpl","timeout","ts","expected","permissionsBitmask","forbiddenElementsBit","flows","arrayFactory","oldContext","action","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}