{"version":3,"file":"todomvc.js","mappings":"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,eAAAA,GAAS,qBACP,eAAAA,GAAS,uBACR,eAAAA,GAAS,wBACtB,eAAAA,GAAS,WACb,eAAAA,GAAS,OACJ,eAAAA,GAAS,YACb,eAAAA,GAAS,QACD,eAAAA,GAAS,gBACR,eAAAA,GAAS,iBACb,eAAAA,GAAS,aACZ,eAAAA,GAAS,UACX,eAAAA,GAAS,QACN,eAAAA,GAAS,WACF,eAAAA,GAAS,kBACjB,eAAAA,GAAS,UACR,eAAAA,GAAS,WACN,eAAAA,GAAS,cAEV,WAAAC,GAEZ,OACA,UACA,OACA,QAEA,WACA,WACA,SACA,QACA,gBACA,eACA,WACA,YACA,YACA,YACA,aACA,UACA,OACA,mBACA,oBACA,qBACA,uBACA,mBACA,kBACA,iBACA,wBACA,kBACA,gBACA,kBACA,kBACA,gBACA,YACA,iBACA,eACA,cACA,mBACA,iBACA,cACA,iBACA,gBACA,cACA,OACA,SACA,cACA,SACA,WACA,cACA,YACA,QACA,QACA,sBACA,YACA,aACA,eACA,gBACA,cACA,cACA,eACA,UACA,cACA,UACA,OACA,QACA,MACA,MACA,OACA,SACA,SACA,cACA,OACA,QACA,MACA,UACA,QACA,WACA,SACA,QACA,UACA,OACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,iBACA,iBACA,iBACA,iBACA,kBACA,kBACA,kBACA,kBACA,iBACA,iBACA,iBACA,iBACA,YACA,OACA,KACA,SACA,SACA,SACA,aACA,YACA,YACA,gBACA,QACA,eACA,mBACA,aACA,YACA,UACA,cACA,OACA,YACA,WACA,mBACA,OACA,QACA,OACA,SACA,gBACA,YACA,WACA,YACA,WACA,QACA,QACA,mBACA,qBACA,qBACA,iBACA,iBACA,aACA,oBACA,oBACA,cACA,oBACA,oBACA,mBACA,eACA,sBACA,OACA,cACA,cACA,OACA,SACA,cACA,YACA,WACA,aACA,YACA,kBACA,aACA,mBACA,YACA,iBACA,aACA,YACA,iBACA,qBACA,cACA,cACA,oBACA,mBACA,oBACA,mBACA,YACA,eACA,iBACA,qBACA,mBACA,uBACA,uBACA,qBACA,aACA,aACA,eACA,cACA,mBACA,MACA,gBACA,sBACA,kBACA,aACA,eACA,UACA,WACA,OACA,WACA,SACA,UACA,QACA,QACA,WACA,WACA,aACA,SACA,gBACA,iBACA,cACA,QACA,WACA,oBACA,QACA,cACA,UACA,QACA,eACA,eACA,kBACA,OACA,WACA,SACA,WACA,WACA,OACA,qBACA,iBACA,aACA,SACA,WACA,kBACA,QACA,QACA,QACA,QACA,IACA,uBACA,oBACA,aACA,oBACA,UACA,WACA,QACA,SACA,aACA,KACA,WACA,iBACA,qBACA,4BACA,0BACA,iBACA,gBACA,UACA,oBACA,oBACA,oBACA,oBACA,eACA,eACA,eACA,eACA,cACA,iBACA,YACA,gBACA,UACA,iBACA,cACA,gBACA,gBACA,oBACA,sBACA,uBACA,UACA,MACA,WACA,OACA,eACA,gBACA,YACA,SACA,OACA,UACA,iBACA,SACA,UACA,cArlBR,C,YfrIQ7F,EAEyC8F,EAAZzD,EAAAA,G,kEAF7BrC,EAEyC8F,EAAZzD,EAAAA,G,iCAA6CC,EAAA3E,G,mDAF1EqC,EAE6BqC,EAAAA,G,qDAF7BrC,EAE6BqC,EAAAA,G,+BAAY9B,EAAF5C,G,mDAYvCqC,EAEyC8F,EAAAA,G,qDAFzC9F,EAEyC8F,EAAAA,G,+BAAiCxD,EAAA3E,G,mDAF1EqC,EAAAA,G,wCAAAA,EAAAA,G,6BAEyCO,EAAF5C,G,mDAjB3C,EACIqC,EAAAA,G,qDADJ,K,wCAcA,EACIA,EAAAA,G,qDADJ,K,yDAwLsC,QAAD,C,kBApBrC,E,OAC8B,cAAO,GACR,cAAO,GUrMw6O,OVuNp8O,OAA4B,GUvNm9O,OVwN59O+F,OAAnB,aArBR,EAqBgD,K,WAAa,OAAX,OAAY,GUxN6/O,OVyNhiPA,OAAnB,a,SAtBR,G,kBAsB+D,OAAZ,OAAa,C,CAAf,MAtBjD,C,mDAvGJ,K,wCAsBiChH,GAA+B,OAAlB,KAAX,MAAW,2BAAkB,E,YAtBhE,K,oGAAA,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I,MhFQ7D,OgFLL,yBAA+D,QAAS,I,MhFWrF,OgFRc,0BAAgE,SAAU,I,MhFWE,MgFR7E,yBAAiE,QAAS,I,MhFQmJ,OgFL5N,0BAAgE,SAAU,I,MhFKsS,MgFF7W,6BAAkE,YAAa,I,MhFEgc,MgFC5gB,gCAAqE,eAAgB,I,MhFD4lB,YgFIprB,6BAAwE,YAAa,I,MhFJiwB,UgFOt1B,6BAAsE,YAAa,I,MhFPq6B,WgFUv/B,8BAAwE,aAAc,I,MhFVmkC,WgFa3pC,4BAAsE,WAAY,I,MhFbuuC,MgFgBxzC,6BAAkE,YAAa,I,MhFhBu4C,agFmBr9C,8BAA0E,aAAc,I,MhFnBuiD,agFsB9nD,+BAA2E,cAAe,GA5DrH,C,mDCEiC6f,GAC7B,OAAW,MAAY,QAAQ,G,SAQDG,G,MAA0C,OAAM,EAAS,Q,KACvF,E,EAAK,GAAW,EAAS,I,WACzB,E,uBjFGS,OiFDZ,QAAD,CAXQ,CjFGH,GiFDG,GjFEyC,EiFAjD,C,YA4CkCH,GAC9B,GAAI,IAAW,OAAc,YjFfusC,Y,MiFiBpuC1F,EjFjB4xC,EiFiB1vC,WAE3B,GAAgB,MAAZ,EAAJ,C,MACH,GAA2B,MAAvB,EAAS,SAAb,C,IACI8F,EAAa,OAAiB,GAC9B,WAAsB,E,EACtB,C,QAEA,EAAS,S,EANY,C,QASzB,OAAiB,GATrB,QAWJ,C,YC3D8B3J,G,OAAiB,GAAjBA,E,kBAAAA,C,aAOZ4J,G,OAAgB,UAAK,I,kDAbqB9gB,GAe3B,eAAgB,IAAZ,EAAuB,EAAa,EAfzB,C,YCmD9BL,G,IACdohB,EnFjB40D,GmFiB5zD,GnFjBm1D,cmFkBn2D,OAAW,EAAU,OAAS,EAAG,EAAU,KAAU,EACzD,C,YAiMkBphB,GAAiD,O,SCnPtDA,GAET,OAAa,G3CNoB,M2CMZ,IACJ,I3CPgB,M2COR,IACR,M3CRgB,K2CSjB,OACE,O3CVe,G2CWZ,M3CXY,M2CWJ,MACR,O3CZY,G2CaZ,O3CbY,G2CcZ,O3CdY,G2CeZ,O3CfY,G2CgBZ,Q3ChBY,E2CkBrC,CDqOiD,GAAiB,C,YE5GtCqhB,EAAYhH,G,I5BxGpCiH,EACArb,EACAsb,E,EpE4G4+B,KAAQ,KAAR,GAAe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","sources":["webpack://todomvc/webpack/universalModuleDefinition","webpack://todomvc/../../../../core/src/commonMain/kotlin/dev/fritz2/core/Lens.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Job.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/RenderContext.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Mount.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Maps.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Transform.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/SafeCollector.common.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Standard.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Store.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Tags.kt","webpack://todomvc/../../../../core/src/commonMain/kotlin/dev/fritz2/core/Id.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Attributes.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Events.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Foundation.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Arrays.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Strings.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Handlers.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Listener.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/dynamic.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Collections.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Scope.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Myer.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Patch.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Shortcuts.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Merge.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/core/SubStores.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Library.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Lazy.kt","webpack://todomvc/../../../../core/src/jsMain/kotlin/dev/fritz2/routing/Routing.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/StringBuilder.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Collections.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collectionJs.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_ArraysJs.kt","webpack://todomvc/../../../../examples/todomvc/build/generated/ksp/metadata/commonMain/kotlin/dev/fritz2/examples/todomvc/ToDoLenses.kt","webpack://todomvc/../../../../examples/todomvc/src/commonMain/kotlin/dev/fritz2/examples/todomvc/Model.kt","webpack://todomvc/../../../../examples/todomvc/src/jsMain/kotlin/dev/fritz2/examples/todomvc/TodoMvc.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Maps.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/js/math.polyfills.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/globalThis.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/math.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/ArrayBuffer.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/js.arrays/fill.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/stringJs.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/CoroutineContext.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/js-builtin-sources/core/builtins/native/kotlin/Number.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/js-builtin-sources/core/builtins/src/kotlin/Unit.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Sets.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/LinkedHashSet.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Ranges.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Sequences.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/common/src/kotlin/ExceptionsH.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Char.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Enum.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Primitives.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/BitMask.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/arrays.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/bitUtils.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/runtimeForStdLib.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/charSequenceJs.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/CharCode.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/numberConversion.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/unsigned/src/kotlin/UShort.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/collectionsHacks.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/compareTo.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/coreRuntime.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/typeCheckUtils.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/hacks.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/longJs.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/NumbersJs.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/metadataUtils.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/rangeTo.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/reflectRuntime.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/metadataUtilsOld.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Preconditions.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/kotlin.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_DigitChars.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableList.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/ArrayFunctions.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/ArrayList.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashMap.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/InternalHashMap.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashMapEntry.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashMapEntryDefault.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashSet.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/LinkedHashMap.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/CoroutineImpl.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/InterceptedCoroutine.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/cancellation/CancellationException.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/exceptions.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/random/PlatformRandom.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/math.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/random/Random.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/random/XorWowRandom.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/KClassImpl.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/primitives.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/reflection.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/StringBuilderJs.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/charJs.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_WhitespaceChars.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/numberConversions.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_ComparisonsJs.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/stringsCode.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractCollection.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractList.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractMap.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractSet.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/ArrayDeque.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/IndexedValue.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Iterables.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Iterators.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/PrimitiveIterators.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/SequenceBuilder.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Sequences.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/ContinuationInterceptor.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/CoroutineContextImpl.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/intrinsics/Intrinsics.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/internal/progressionUtil.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/PrimitiveRanges.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/ProgressionIterators.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/Progressions.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Appendable.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Char.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Result.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Tuples.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/HashCode.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/Continuation.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Strings.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/InternalMap.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/coroutineInternalJS.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/MutableCollections.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_CollectionsJs.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/noPackageHacks.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/StringNumberConversions.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/throwableExtensions.kt","webpack://todomvc/../../../../../examples/todomvc/build/compileSync/js/main/productionExecutable/kotlin/libraries/stdlib/js/src/kotlinx/dom/Mutations.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/88b0986a7186d029/atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/88b0986a7186d029/atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/Trace.common.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/88b0986a7186d029/atomicfu/src/jsAndWasmSharedMain/kotlin/kotlinx/atomicfu/AtomicFU.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Job.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/Channel.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/ChannelFlow.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/AbstractCoroutine.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Builders.common.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CancellableContinuation.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CancellableContinuationImpl.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/DispatchedTask.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CompletionState.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineDispatcher.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineExceptionHandler.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineScope.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineStart.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/EventLoop.common.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/ThreadLocal.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Exceptions.common.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/JobSupport.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/Concurrent.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/LinkedList.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/Synchronized.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/MainCoroutineDispatcher.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/NonCancellable.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Supervisor.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Unconfined.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Yield.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/DispatchedContinuation.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/BufferOverflow.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/BufferedChannel.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/ConcurrentLinkedList.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/InlineList.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/ChannelCoroutine.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/Channels.common.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/ConflatedBufferedChannel.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/Produce.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/Builders.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/Channels.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/Flow.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/SharedFlow.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/AbstractSharedFlow.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/SharingStarted.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/StateFlow.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/ThreadContext.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/Combine.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/FlowCoroutine.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/FlowExceptions.common.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/Merge.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/NopCollector.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/NullSurrogate.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/SendingCollector.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Distinct.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Emitters.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Errors.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Limit.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Share.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Zip.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/terminal/Collect.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Context.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/terminal/Reduce.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/Concurrent.common.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/CoroutineExceptionHandlerImpl.common.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/CoroutineExceptionHandlerImpl.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/CoroutineContext.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/OnUndeliveredElement.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/Scopes.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/Symbol.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/SystemProps.common.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/SystemProps.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/intrinsics/Cancellable.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/intrinsics/Undispatched.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/selects/Select.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/sync/Mutex.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/sync/Semaphore.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/CoroutineContext.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/Debug.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/JSDispatcher.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/Window.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/internal/CoroutineExceptionHandlerImpl.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmJsShared/src/EventLoop.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmJsShared/src/internal/JSDispatcher.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/Dispatchers.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/Exceptions.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/SchedulerTask.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/flow/internal/FlowExceptions.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/flow/internal/SafeCollector.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/LocalAtomics.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/StackTraceRecovery.kt","webpack://todomvc/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/ProbesSupport.kt","webpack://todomvc/webpack/bootstrap","webpack://todomvc/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"todomvc\"] = factory();\n\telse\n\t\troot[\"todomvc\"] = factory();\n})(globalThis, () => {\nreturn ","package dev.fritz2.core\n\n/**\n * Used by the fritz2 gradle-plugin to identify data classes it should generate [Lens]es for.\n */\n@Target(AnnotationTarget.CLASS)\nannotation class Lenses\n\n/**\n * Used by the fritz2 gradle-plugin to identify properties in sealed classes or interfaces, that should get ignored\n * by the lens generation.\n *\n * Typical use case are const properties, that are overridden inside the data class body and not the ctor.\n */\n@Target(AnnotationTarget.PROPERTY)\nannotation class NoLens\n\n/**\n * Describes a focus point into a data structure, i.e. a property of a given complex entity for read and write\n * access.\n *\n * @property id identifies the focus of this lens\n */\ninterface Lens<P, T> {\n    val id: String\n\n    /**\n     * gets the value of the focus target\n     *\n     * @param parent concrete instance to apply the focus tos\n     */\n    fun get(parent: P): T\n\n    /**\n     * sets the value of the focus target\n     *\n     * @param parent concrete instance to apply the focus to\n     * @param value the new value of the focus target\n     */\n    fun set(parent: P, value: T): P\n\n    /**\n     * manipulates the focus target's value inside the [parent]\n     *\n     * @param parent concrete instance to apply the focus to\n     * @param mapper function defining the manipulation\n     */\n    suspend fun apply(parent: P, mapper: suspend (T) -> T): P = set(parent, mapper(get(parent)))\n\n    /**\n     * appends to [Lens]es so that the resulting [Lens] points from the parent of the [Lens] this is called on to\n     * the target of [other]\n     *\n     * @param other [Lens] to append to this one\n     */\n    operator fun <X> plus(other: Lens<T, X>): Lens<P, X> = object : Lens<P, X> {\n        override val id = \"${this@Lens.id}.${other.id}\".trimEnd('.')\n        override fun get(parent: P): X = other.get(this@Lens.get(parent))\n        override fun set(parent: P, value: X): P = this@Lens.set(parent, other.set(this@Lens.get(parent), value))\n    }\n\n    /**\n     * For a lens on a non-nullable parent this method creates a lens that can be used on a nullable-parent\n     * Use this method only if you made sure, that it is never called on a null parent.\n     * Otherwise, a [NullPointerException] is thrown.\n     */\n    fun withNullParent(): Lens<P?, T> = object : Lens<P?, T> {\n        override val id: String = this@Lens.id\n\n        override fun get(parent: P?): T =\n            if (parent != null) this@Lens.get(parent)\n            else throw NullPointerException(\"get called with null parent on not-nullable lens@$id\")\n\n        override fun set(parent: P?, value: T): P? =\n            if (parent != null) this@Lens.set(parent, value)\n            else throw NullPointerException(\"set called with null parent on not-nullable lens@$id\")\n    }\n}\n\n/**\n * convenience function to create a [Lens]\n *\n * @param id of the [Lens]\n * @param getter of the [Lens]\n * @param setter of the [Lens]\n */\ninline fun <P, T> lensOf(id: String, crossinline getter: (P) -> T, crossinline setter: (P, T) -> P): Lens<P, T> =\n    object : Lens<P, T> {\n        override val id: String = id\n        override fun get(parent: P): T = getter(parent)\n        override fun set(parent: P, value: T): P = setter(parent, value)\n    }\n\n/**\n * creates a [Lens] converting [P] to and from a [String]\n *\n * @param format function for formatting a [P] to [String]\n * @param parse function for parsing a [String] to [P]\n */\ninline fun <P> lensOf(crossinline format: (P) -> String, crossinline parse: (String) -> P): Lens<P, String> =\n    object : Lens<P, String> {\n        override val id: String = \"\"\n        override fun get(parent: P): String = format(parent)\n        override fun set(parent: P, value: String): P = parse(value)\n    }\n\n/**\n * function to derive a valid id for a given instance that does not change over time.\n */\ntypealias IdProvider<T, I> = (T) -> I\n\n/**\n * Occurs when [Lens] points to non-existing element.\n */\nclass CollectionLensGetException : Exception() // is needed to cancel the coroutine correctly\n\n/**\n * Occurs when [Lens] tries to update a non-existing element.\n */\nclass CollectionLensSetException(message: String) : Exception(message)\n\n/**\n * creates a [Lens] pointing to a certain element in a [List]\n *\n * @param element current instance of the element to focus on\n * @param idProvider to identify the element in the list (i.e. when it's content changes over time)\n */\nfun <T, I> lensForElement(element: T, idProvider: IdProvider<T, I>): Lens<List<T>, T> = object : Lens<List<T>, T> {\n    override val id: String = idProvider(element).toString()\n\n    override fun get(parent: List<T>): T = parent.find {\n        idProvider(it) == idProvider(element)\n    } ?: throw CollectionLensGetException()\n\n    override fun set(parent: List<T>, value: T): List<T> = ArrayList<T>(parent.size).apply {\n        var count = 0\n        parent.forEach { item ->\n            if (idProvider(item) == idProvider(element)) {\n                count++\n                add(value)\n            } else add(item)\n        }\n        if (count == 0) throw CollectionLensSetException(\"no item found with id='${idProvider(element)}'\")\n        else if (count > 1) throw CollectionLensSetException(\"$count ambiguous items found with id='${idProvider(element)}'\")\n    }\n}\n\n/**\n * creates a [Lens] pointing to a certain [index] in a list\n *\n * @param index position to focus on\n */\nfun <T> lensForElement(index: Int): Lens<List<T>, T> = object : Lens<List<T>, T> {\n    override val id: String = index.toString()\n\n    override fun get(parent: List<T>): T =\n        parent.getOrNull(index) ?: throw CollectionLensGetException()\n\n    override fun set(parent: List<T>, value: T): List<T> =\n        if (index < 0 || index >= parent.size) throw CollectionLensSetException(\"no item found with index='$index'\")\n        else parent.mapIndexed { i, it -> if (i == index) value else it }\n\n}\n\n/**\n * creates a [Lens] pointing to a certain element in a [Map]\n *\n * @param key of the entry to focus on\n */\nfun <K, V> lensForElement(key: K): Lens<Map<K, V>, V> = object : Lens<Map<K, V>, V> {\n    override val id: String = key.toString()\n\n    override fun get(parent: Map<K, V>): V =\n        parent[key] ?: throw CollectionLensGetException()\n\n    override fun set(parent: Map<K, V>, value: V): Map<K, V> =\n        if (parent.containsKey(key)) parent + (key to value)\n        else throw CollectionLensSetException(\"no item found with key='$key'\")\n}\n\n/**\n * create a [Lens] for upcasting a base (sealed) class or interface to a specific subtype.\n */\ninline fun <P, reified C : P> lensForUpcasting(): Lens<P, C> = object : Lens<P, C> {\n    override val id: String = \"\"\n    override fun get(parent: P): C = (parent as? C) ?: throw CollectionLensGetException()\n    override fun set(parent: P, value: C): P = value\n}\n\n/**\n * Creates a [Lens] from a nullable parent to a non-nullable value using the provided [default] value.\n *\n * Use this method to apply a default value that will be used in the case that the real value is null.\n * When setting that value to the default value it will accordingly translate to null.\n *\n * The inverse Lens can be created using the [mapToNullableLens] factory.\n *\n * @param default value to be used instead of `null`\n */\ninternal fun <T> mapToNonNullLens(default: T): Lens<T?, T> = object : Lens<T?, T> {\n    override val id: String = \"\"\n    override fun get(parent: T?): T = parent ?: default\n    override fun set(parent: T?, value: T): T? = value.takeUnless { it == default }\n}\n\n/**\n * Creates a [Lens] from a _non-nullable_ parent to a _nullable_ value, mapping the provided [placeholder] to `null`\n * and vice versa.\n *\n * Use this method in cases where a nullable Store is needed but the data model used is actually non-nullable.\n *\n * The inverse Lens can be created using the [mapToNonNullLens] factory.\n *\n * @param placeholder value to be mapped to `null`\n */\ninternal fun <T> mapToNullableLens(placeholder: T): Lens<T, T?> = object : Lens<T, T?> {\n    override val id: String = \"\"\n    override fun get(parent: T): T? = parent.takeUnless { parent == placeholder }\n    override fun set(parent: T, value: T?): T = value ?: placeholder\n}","package dev.fritz2.core\n\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.events.Event\n\n/**\n * Prints [Exception] to error-[console] by ignoring [CollectionLensGetException].\n */\ninternal fun printErrorIgnoreLensException(cause: Throwable) {\n    when(cause) {\n        is CollectionLensGetException -> {}\n        else -> console.error(cause)\n    }\n}\n\n/**\n * Marks a class that it has a [Job] to start coroutines with.\n */\ninterface WithJob {\n\n    /**\n     * [Job] for launching coroutines in.\n     */\n    val job: Job\n\n    /**\n     * Default error handler printing the error to console.\n     *\n     * @param cause Throwable to handle\n     */\n    fun errorHandler(cause: Throwable): Unit = printErrorIgnoreLensException(cause)\n\n    /**\n     * Connects a [Flow] to a [Handler].\n     *\n     * @param handler [Handler] that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to a [Handler]\n     */\n    infix fun <A> Flow<A>.handledBy(handler: Handler<A>) = handler.process(this, job)\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @param execute function that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to\n     */\n    infix fun <A> Flow<A>.handledBy(execute: suspend (A) -> Unit) =\n        this.onEach { withContext(NonCancellable) { execute(it) } }.catch { errorHandler(it) }\n            .launchIn(MainScope() + job)\n\n\n    /**\n     * Connects [Event]s to a [Handler].\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param handler that will handle the fired [Event]\n     */\n    infix fun <E : Event> Flow<E>.handledBy(handler: Handler<Unit>) =\n        handler.process(this.map { }, job)\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param execute function that will handle the fired [Event]\n     */\n    infix fun <E : Event> Flow<E>.handledBy(execute: suspend (E) -> Unit) =\n        this.onEach { withContext(NonCancellable) { execute(it) } }.catch { errorHandler(it) }\n            .launchIn(MainScope() + job)\n\n\n\n}","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.cancelChildren\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.scan\nimport kotlinx.dom.clear\nimport org.w3c.dom.*\nimport kotlin.reflect.KClass\n\n/**\n * Context for rendering static and dynamical content\n */\ninterface RenderContext : WithJob, WithScope {\n\n    /**\n     * Renders the data of a [Flow] as [Tag]s to the DOM.\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V>.render(into: Tag<HTMLElement>? = null, content: Tag<*>.(V) -> Unit) {\n        val target = into?.apply(SET_MOUNT_POINT_DATA_ATTRIBUTE)\n            ?: div(MOUNT_POINT_STYLE_CLASS, content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n        val mountContext = MountContext(Job(job), target)\n\n        mountSimple(job, this) {\n            mountContext.runBeforeUnmounts()\n            mountContext.job.cancelChildren()\n            target.domNode.clear()\n            content(mountContext, it)\n            mountContext.runAfterMounts()\n        }\n    }\n\n    /**\n     * Renders the data of a [Flow] only if the given [predicate] is true.\n     *\n     * Example:\n     * ```kotlin\n     * data class Delivery(\n     *     val state: String,\n     *     val isVisible: Boolean\n     * )\n     *\n     * val storedDelivery = storeOf(Delivery(\"in production\", true))\n     *\n     * storedDelivery.data.renderIf(Delivery::isVisible) { delivery ->\n     *     // This whole block might be re-rendered if the state is changed! (read on)\n     *     p { +\"The state of your delivery is ${delivery.state}\" }\n     * }\n     * ```\n     *\n     * Beware that the data value [V] and its changes are still handled reactively inside the [content] expression!\n     *\n     * So while the [predicate] may remain stably `true`, some other aspect of the model [V] may change in between.\n     * As a result, the whole [content]-block would be re-rendered accordingly of course!\n     *\n     * Example:\n     * ```kotlin\n     * val storedDelivery = object : Store<Delivery> by storeOf(Delivery(\"in production\", true)) {\n     *     val proceed = handle<String> { delivery, newState ->\n     *         // we dont change the visibility, so the condition will remain the same, while the state changes!\n     *         delivery.copy(state = newState)\n     *     }\n     * }\n     *\n     * button {\n     *     +\"Proceed to conveyed\"\n     *     clicks.map { \"conveyed\" } handledBy storedDelivery.proceed\n     * }\n     *\n     * storedDelivery.data.renderIf(Delivery::isVisible) { delivery ->\n     *     // This whole block will re re-rendered on button click above!\n     *     p { +\"The state of your delivery is ${delivery.state}\" }\n     * }\n     * ```\n     *\n     * If you want the content to only change once if the condition changes (i.e. switches from true to false or back)\n     * you need to rely on an appropriate [Flow]-function like\n     * [distinctUntilChangedBy](https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed-by.html)\n     *\n     * Example:\n     * ```kotlin\n     * storedDelivery.data.distinctUntilChangedBy(Delivery::isVisible).renderIf(Delivery::isVisible) { delivery ->\n     *     // This wont be re-rendered if `Delivery.state` changes!\n     *     // The whole block will disappear on `Delivery.isVisible` changes to `false`,\n     *     // and appear again on `Delivery.isVisible == true`. Then with the current `state` at that moment of course!\n     *     p { +\"The state of your delivery is ${delivery.state}\" }\n     * }\n     * ```\n     *\n     * But in most cases, that is not what you really want! Strive for solutions, where the UI portions really adopt\n     * reactively. The above is a strange hybrid case, where not all state changes are reflected by the UI.\n     *\n     * @see renderTrue\n     * @see renderFalse\n     * @see renderIs\n     * @see renderNotNull\n     *\n     * @receiver [Flow] containing the data\n     * @param predicate must be true for the value to be rendered\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V>.renderIf(\n        predicate: (V) -> Boolean,\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(V) -> Unit\n    ) {\n        render(into) {\n            if (predicate(it)) {\n                content(it)\n            }\n        }\n    }\n\n    /**\n     * Renders the data of a boolean [Flow] only if its value is `true`.\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     *\n     * @see renderIf\n     * @see renderFalse\n     * @see renderIs\n     * @see renderNotNull\n     */\n    fun Flow<Boolean>.renderTrue(\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.() -> Unit\n    ) {\n        renderIf(predicate = { it }, into) { _ ->\n            content()\n        }\n    }\n\n    /**\n     * Renders the data of a boolean [Flow] only if its value is `false`.\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     *\n     * @see renderIf\n     * @see renderTrue\n     * @see renderIs\n     * @see renderNotNull\n     */\n    fun Flow<Boolean>.renderFalse(\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.() -> Unit\n    ) {\n        renderIf(predicate = { !it }, into) { _ ->\n            content()\n        }\n    }\n\n    /**\n     * Renders the non-null data of a [Flow].\n     *\n     * @see renderIf\n     * @see renderTrue\n     * @see renderFalse\n     * @see renderIs\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V?>.renderNotNull(\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(V) -> Unit\n    ) {\n        render(into) {\n            if (it != null) {\n                content(it)\n            }\n        }\n    }\n\n    /**\n     * Renders the data of a [Flow] of type [W].\n     *\n     * @see renderIf\n     * @see renderTrue\n     * @see renderFalse\n     * @see renderNotNull\n     *\n     * @receiver [Flow] containing the data\n     * @param klass reference to the type we want to check\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    @Suppress(\"UNCHECKED_CAST\")\n    fun <W : Any> Flow<*>.renderIs(\n        klass: KClass<W>,\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(W) -> Unit\n    ) {\n        render(into) {\n            if (klass.isInstance(it)) {\n                content(it as W)\n            }\n        }\n    }\n\n    /**\n     * Renders each element of a [Flow]s content.\n     * Internally the [Patch]es are determined using Myer's diff-algorithm.\n     * This allows the detection of moves. Keep in mind, that no [Patch] is derived,\n     * when an element stays the same, but changes its internal values.\n     *\n     * @param idProvider function to identify a unique entity in the list\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param batch hide [into] while rendering patches. Useful to avoid flickering when you make many changes (like sorting)\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<List<V>>.renderEach(\n        idProvider: IdProvider<V, *>? = null,\n        into: Tag<HTMLElement>? = null,\n        batch: Boolean = false,\n        content: RenderContext.(V) -> Tag<HTMLElement>\n    ) {\n        mountPatches(into, this, batch) { upstreamValues, mountPoints ->\n            upstreamValues.scan(Pair(emptyList(), emptyList())) { acc: Pair<List<V>, List<V>>, new ->\n                Pair(acc.second, new)\n            }.map { (old, new) ->\n                Myer.diff(old, new, idProvider).map { patch ->\n                    patch.map(job) { value, newJob ->\n                        val mountPoint = BuildContext(newJob, this, scope)\n                        content(mountPoint, value).also {\n                            mountPoints[it.domNode] = mountPoint\n                        }\n                    }\n                }\n            }\n        }\n\n\n    }\n\n    /**\n     * Renders each element of a [Store]s [List] content.\n     * Internally the [Patch]es are determined using Myer's diff-algorithm.\n     * This allows the detection of moves. Keep in mind, that no [Patch] is derived,\n     * when an element stays the same, but changes its internal values.\n     *\n     * @param idProvider function to identify a unique entity in the list\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Store<List<V>>.renderEach(\n        idProvider: IdProvider<V, *>,\n        into: Tag<HTMLElement>? = null,\n        content: RenderContext.(Store<V>) -> HtmlTag<HTMLElement>\n    ) {\n        val store = this\n        data.renderEach(idProvider, into) { value ->\n            content(store.mapByElement(value, idProvider))\n        }\n    }\n\n    /**\n     * Converts the content of a [Flow] to [String] by using [toString] method.\n     *\n     * @receiver [Flow] with content\n     * @return [Flow] with content as [String]\n     */\n    fun <T> Flow<T>.asString(): Flow<String> = this.map { it.toString() }\n\n    fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W\n\n    /**\n     * Evaluates the scope context and initializes a [ScopeContext]\n     * for setting new entries to the scope.\n     *\n     * @param context to evaluate\n     */\n    private inline fun evalScope(context: (ScopeContext.() -> Unit)): Scope {\n        return ScopeContext(this@RenderContext.scope).apply(context).scope\n    }\n\n    /**\n     * Creates a custom [HtmlTag] with the provided [content].\n     *\n     * @param tagName Name of the [HtmlTag] in DOM\n     * @param content content scope for inner [HtmlTag]s\n     * @return custom [HtmlTag]\n     */\n    fun custom(\n        tagName: String,\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<Element>.() -> Unit\n    ): HtmlTag<Element> =\n        register(HtmlTag(tagName, id, baseClass, job, evalScope(scope)), content)\n\n    fun a(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAnchorElement>.() -> Unit\n    ): HtmlTag<HTMLAnchorElement> =\n        register(HtmlTag(\"a\", id, baseClass, job, evalScope(scope)), content)\n\n    fun area(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAreaElement>.() -> Unit\n    ): HtmlTag<HTMLAreaElement> =\n        register(HtmlTag(\"area\", id, baseClass, job, evalScope(scope)), content)\n\n    fun br(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLBRElement>.() -> Unit\n    ): HtmlTag<HTMLBRElement> =\n        register(HtmlTag(\"br\", id, baseClass, job, evalScope(scope)), content)\n\n    fun button(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLButtonElement>.() -> Unit\n    ): HtmlTag<HTMLButtonElement> =\n        register(HtmlTag(\"button\", id, baseClass, job, evalScope(scope)), content)\n\n    fun canvas(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLCanvasElement>.() -> Unit\n    ): HtmlTag<HTMLCanvasElement> =\n        register(HtmlTag(\"canvas\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dl(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDListElement>.() -> Unit\n    ): HtmlTag<HTMLDListElement> =\n        register(HtmlTag(\"dl\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dt(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"dt\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dd(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"dd\", id, baseClass, job, evalScope(scope)), content)\n\n    fun data(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDataElement>.() -> Unit\n    ): HtmlTag<HTMLDataElement> =\n        register(HtmlTag(\"data\", id, baseClass, job, evalScope(scope)), content)\n\n    fun datalist(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDataListElement>.() -> Unit\n    ): HtmlTag<HTMLDataListElement> =\n        register(HtmlTag(\"datalist\", id, baseClass, job, evalScope(scope)), content)\n\n    fun details(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDetailsElement>.() -> Unit\n    ): HtmlTag<HTMLDetailsElement> =\n        register(HtmlTag(\"details\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dialog(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDialogElement>.() -> Unit\n    ): HtmlTag<HTMLDialogElement> =\n        register(HtmlTag(\"dialog\", id, baseClass, job, evalScope(scope)), content)\n\n    fun div(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDivElement>.() -> Unit\n    ): HtmlTag<HTMLDivElement> =\n        register(HtmlTag(\"div\", id, baseClass, job, evalScope(scope)), content)\n\n    fun embed(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLEmbedElement>.() -> Unit\n    ): HtmlTag<HTMLEmbedElement> =\n        register(HtmlTag(\"embed\", id, baseClass, job, evalScope(scope)), content)\n\n    fun fieldset(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLFieldSetElement>.() -> Unit\n    ): HtmlTag<HTMLFieldSetElement> =\n        register(HtmlTag(\"fieldset\", id, baseClass, job, evalScope(scope)), content)\n\n    fun form(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLFormElement>.() -> Unit\n    ): HtmlTag<HTMLFormElement> =\n        register(HtmlTag(\"form\", id, baseClass, job, evalScope(scope)), content)\n\n    fun hr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHRElement>.() -> Unit\n    ): HtmlTag<HTMLHRElement> =\n        register(HtmlTag(\"hr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h1(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h1\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h2(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h2\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h3(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h3\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h4(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h4\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h5(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h5\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h6(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h6\", id, baseClass, job, evalScope(scope)), content)\n\n    fun iframe(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLIFrameElement>.() -> Unit\n    ): HtmlTag<HTMLIFrameElement> =\n        register(HtmlTag(\"iframe\", id, baseClass, job, evalScope(scope)), content)\n\n    fun img(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLImageElement>.() -> Unit\n    ): HtmlTag<HTMLImageElement> =\n        register(HtmlTag(\"img\", id, baseClass, job, evalScope(scope)), content)\n\n    fun input(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLInputElement>.() -> Unit\n    ): HtmlTag<HTMLInputElement> =\n        register(HtmlTag(\"input\", id, baseClass, job, evalScope(scope)), content)\n\n    fun li(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLIElement>.() -> Unit\n    ): HtmlTag<HTMLLIElement> =\n        register(HtmlTag(\"li\", id, baseClass, job, evalScope(scope)), content)\n\n    fun label(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLabelElement>.() -> Unit\n    ): HtmlTag<HTMLLabelElement> =\n        register(HtmlTag(\"label\", id, baseClass, job, evalScope(scope)), content)\n\n    fun legend(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLegendElement>.() -> Unit\n    ): HtmlTag<HTMLLegendElement> =\n        register(HtmlTag(\"legend\", id, baseClass, job, evalScope(scope)), content)\n\n    fun map(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLMapElement>.() -> Unit\n    ): HtmlTag<HTMLMapElement> =\n        register(HtmlTag(\"map\", id, baseClass, job, evalScope(scope)), content)\n\n    fun audio(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAudioElement>.() -> Unit\n    ): HtmlTag<HTMLAudioElement> =\n        register(HtmlTag(\"audio\", id, baseClass, job, evalScope(scope)), content)\n\n    fun video(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLVideoElement>.() -> Unit\n    ): HtmlTag<HTMLVideoElement> =\n        register(HtmlTag(\"video\", id, baseClass, job, evalScope(scope)), content)\n\n    fun meter(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLMeterElement>.() -> Unit\n    ): HtmlTag<HTMLMeterElement> =\n        register(HtmlTag(\"meter\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ins(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLModElement>.() -> Unit\n    ): HtmlTag<HTMLModElement> =\n        register(HtmlTag(\"ins\", id, baseClass, job, evalScope(scope)), content)\n\n    fun del(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLModElement>.() -> Unit\n    ): HtmlTag<HTMLModElement> =\n        register(HtmlTag(\"del\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ol(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOListElement>.() -> Unit\n    ): HtmlTag<HTMLOListElement> =\n        register(HtmlTag(\"ol\", id, baseClass, job, evalScope(scope)), content)\n\n    fun `object`(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLObjectElement>.() -> Unit\n    ): HtmlTag<HTMLObjectElement> =\n        register(HtmlTag(\"object\", id, baseClass, job, evalScope(scope)), content)\n\n    fun optgroup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOptGroupElement>.() -> Unit\n    ): HtmlTag<HTMLOptGroupElement> =\n        register(HtmlTag(\"optgroup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun option(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOptionElement>.() -> Unit\n    ): HtmlTag<HTMLOptionElement> =\n        register(HtmlTag(\"option\", id, baseClass, job, evalScope(scope)), content)\n\n    fun output(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOutputElement>.() -> Unit\n    ): HtmlTag<HTMLOutputElement> =\n        register(HtmlTag(\"output\", id, baseClass, job, evalScope(scope)), content)\n\n    fun p(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLParagraphElement>.() -> Unit\n    ): HtmlTag<HTMLParagraphElement> =\n        register(HtmlTag(\"p\", id, baseClass, job, evalScope(scope)), content)\n\n    fun param(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLParamElement>.() -> Unit\n    ): HtmlTag<HTMLParamElement> =\n        register(HtmlTag(\"param\", id, baseClass, job, evalScope(scope)), content)\n\n    fun picture(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLPictureElement>.() -> Unit\n    ): HtmlTag<HTMLPictureElement> =\n        register(HtmlTag(\"picture\", id, baseClass, job, evalScope(scope)), content)\n\n    fun pre(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLPreElement>.() -> Unit\n    ): HtmlTag<HTMLPreElement> =\n        register(HtmlTag(\"pre\", id, baseClass, job, evalScope(scope)), content)\n\n    fun progress(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLProgressElement>.() -> Unit\n    ): HtmlTag<HTMLProgressElement> =\n        register(HtmlTag(\"progress\", id, baseClass, job, evalScope(scope)), content)\n\n    fun quote(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"quote\", id, baseClass, job, evalScope(scope)), content)\n\n    fun script(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLScriptElement>.() -> Unit\n    ): HtmlTag<HTMLScriptElement> =\n        register(HtmlTag(\"script\", id, baseClass, job, evalScope(scope)), content)\n\n    fun select(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSelectElement>.() -> Unit\n    ): HtmlTag<HTMLSelectElement> =\n        register(HtmlTag(\"select\", id, baseClass, job, evalScope(scope)), content)\n\n    fun span(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"span\", id, baseClass, job, evalScope(scope)), content)\n\n    fun caption(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCaptionElement>.() -> Unit\n    ): HtmlTag<HTMLTableCaptionElement> =\n        register(HtmlTag(\"caption\", id, baseClass, job, evalScope(scope)), content)\n\n    fun th(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCellElement>.() -> Unit\n    ): HtmlTag<HTMLTableCellElement> =\n        register(HtmlTag(\"th\", id, baseClass, job, evalScope(scope)), content)\n\n    fun td(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCellElement>.() -> Unit\n    ): HtmlTag<HTMLTableCellElement> =\n        register(HtmlTag(\"td\", id, baseClass, job, evalScope(scope)), content)\n\n    fun col(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableColElement>.() -> Unit\n    ): HtmlTag<HTMLTableColElement> =\n        register(HtmlTag(\"col\", id, baseClass, job, evalScope(scope)), content)\n\n    fun colgroup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableColElement>.() -> Unit\n    ): HtmlTag<HTMLTableColElement> =\n        register(HtmlTag(\"colgroup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun table(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableElement>.() -> Unit\n    ): HtmlTag<HTMLTableElement> =\n        register(HtmlTag(\"table\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableRowElement>.() -> Unit\n    ): HtmlTag<HTMLTableRowElement> =\n        register(HtmlTag(\"tr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tfoot(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"tfoot\", id, baseClass, job, evalScope(scope)), content)\n\n    fun thead(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"thead\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tbody(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"tbody\", id, baseClass, job, evalScope(scope)), content)\n\n    fun textarea(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTextAreaElement>.() -> Unit\n    ): HtmlTag<HTMLTextAreaElement> =\n        register(HtmlTag(\"textarea\", id, baseClass, job, evalScope(scope)), content)\n\n    fun time(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTimeElement>.() -> Unit\n    ): HtmlTag<HTMLTimeElement> =\n        register(HtmlTag(\"time\", id, baseClass, job, evalScope(scope)), content)\n\n    fun track(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTrackElement>.() -> Unit\n    ): HtmlTag<HTMLTrackElement> =\n        register(HtmlTag(\"track\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ul(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLUListElement>.() -> Unit\n    ): HtmlTag<HTMLUListElement> =\n        register(HtmlTag(\"ul\", id, baseClass, job, evalScope(scope)), content)\n\n    fun address(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"address\", id, baseClass, job, evalScope(scope)), content)\n\n    fun article(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"article\", id, baseClass, job, evalScope(scope)), content)\n\n    fun aside(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"aside\", id, baseClass, job, evalScope(scope)), content)\n\n    fun bdi(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"bdi\", id, baseClass, job, evalScope(scope)), content)\n\n    fun figcaption(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"figcaption\", id, baseClass, job, evalScope(scope)), content)\n\n    fun figure(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"figure\", id, baseClass, job, evalScope(scope)), content)\n\n    fun footer(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"footer\", id, baseClass, job, evalScope(scope)), content)\n\n    fun header(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"header\", id, baseClass, job, evalScope(scope)), content)\n\n    fun main(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"main\", id, baseClass, job, evalScope(scope)), content)\n\n    fun mark(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"mark\", id, baseClass, job, evalScope(scope)), content)\n\n    fun nav(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"nav\", id, baseClass, job, evalScope(scope)), content)\n\n    fun noscript(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"noscript\", id, baseClass, job, evalScope(scope)), content)\n\n    fun rp(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"rp\", id, baseClass, job, evalScope(scope)), content)\n\n    fun rt(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"rt\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ruby(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"ruby\", id, baseClass, job, evalScope(scope)), content)\n\n    fun section(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"section\", id, baseClass, job, evalScope(scope)), content)\n\n    fun summary(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"summary\", id, baseClass, job, evalScope(scope)), content)\n\n    fun wbr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"wbr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun blockquote(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"blockquote\", id, baseClass, job, evalScope(scope)), content)\n\n    fun em(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"em\", id, baseClass, job, evalScope(scope)), content)\n\n    fun strong(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"strong\", id, baseClass, job, evalScope(scope)), content)\n\n    fun s(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"s\", id, baseClass, job, evalScope(scope)), content)\n\n    fun cite(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"cite\", id, baseClass, job, evalScope(scope)), content)\n\n    fun q(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"q\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dfn(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"dfn\", id, baseClass, job, evalScope(scope)), content)\n\n    fun abbr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"abbr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun code(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"code\", id, baseClass, job, evalScope(scope)), content)\n\n    fun `var`(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"var\", id, baseClass, job, evalScope(scope)), content)\n\n    fun samp(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"samp\", id, baseClass, job, evalScope(scope)), content)\n\n    fun kbd(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"kbd\", id, baseClass, job, evalScope(scope)), content)\n\n    fun sub(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"sub\", id, baseClass, job, evalScope(scope)), content)\n\n    fun sup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"sup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun i(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"i\", id, baseClass, job, evalScope(scope)), content)\n\n    fun b(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"b\", id, baseClass, job, evalScope(scope)), content)\n\n    fun u(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"u\", id, baseClass, job, evalScope(scope)), content)\n\n    fun bdo(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"bdo\", id, baseClass, job, evalScope(scope)), content)\n\n    fun command(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"command\", id, baseClass, job, evalScope(scope)), content)\n\n    fun svg(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: SvgTag.() -> Unit\n    ): SvgTag =\n        register(SvgTag(\"svg\", id, baseClass, job = job, evalScope(scope)), content)\n\n    fun path(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: SvgTag.() -> Unit\n    ): SvgTag =\n        register(SvgTag(\"path\", id, baseClass, job = job, evalScope(scope)), content)\n}\n","package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.dom.clear\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.Node\n\n/**\n * Defines type for a handler for lifecycle-events\n */\ntypealias DomLifecycleHandler = suspend (WithDomNode<Element>, Any?) -> Unit\n\ninternal class DomLifecycleListener(\n    val target: WithDomNode<Element>,\n    val payload: Any? = null,\n    val handler: DomLifecycleHandler\n)\n\n/**\n * External interface to access the MountPoint where the lifecycle of [Tag]s and subtrees is handled.\n */\ninterface MountPoint {\n\n    /**\n     * Registers a [DomLifecycleHandler] on a given target that ist called right after the target is mounted to the DOM.\n     *\n     * @param target the element the lifecycle-handler will be registered for\n     * @param payload some optional data that might be used by the [handler] to do its work\n     * @param handler defines, what to do (with [payload]), when [target] has just been mounted to the DOM\n     */\n    fun afterMount(target: WithDomNode<Element>, payload: Any? = null, handler: DomLifecycleHandler)\n\n    /**\n     * Registers a [DomLifecycleHandler] on a given target that ist called right before the target is removed from the DOM.\n     *\n     * @param target the element the lifecycle-handler will be registered for\n     * @param payload some optional data that might be used by the [handler] to do its work\n     * @param handler defines, what to do (with [payload]), when [target] has just been mounted to the DOM\n     */\n    fun beforeUnmount(target: WithDomNode<Element>, payload: Any? = null, handler: DomLifecycleHandler)\n}\n\ninternal abstract class MountPointImpl : MountPoint, WithJob {\n\n\n    private val mutex = Mutex()\n\n    suspend fun runBeforeUnmounts() = withContext(NonCancellable) {\n        mutex.withLock {\n            beforeUnmountListeners.forEach {\n                try {\n                    it.handler(it.target, it.payload)\n                } catch (e: Exception) {\n                    console.error(\"Error in beforeUnmounts\", e)\n                }\n            }\n            beforeUnmountListeners.clear()\n        }\n    }\n\n\n    suspend fun runAfterMounts() = withContext(NonCancellable) {\n        afterMountListeners.forEach {\n            try {\n                it.handler(it.target, it.payload)\n            } catch (e: Exception) {\n                console.error(\"Error in afterMounts\", e)\n            }\n        }\n        afterMountListeners.clear()\n    }\n\n    private val afterMountListeners: MutableList<DomLifecycleListener> = mutableListOf()\n\n    private val beforeUnmountListeners: MutableList<DomLifecycleListener> = mutableListOf()\n\n    override fun afterMount(target: WithDomNode<Element>, payload: Any?, handler: DomLifecycleHandler) {\n        afterMountListeners.add(DomLifecycleListener(target, payload, handler))\n    }\n\n    override fun beforeUnmount(target: WithDomNode<Element>, payload: Any?, handler: DomLifecycleHandler) {\n        beforeUnmountListeners.add(DomLifecycleListener(target, payload, handler))\n    }\n}\n\nval MOUNT_POINT_KEY = Scope.Key<MountPoint>(\"MOUNT_POINT\")\n\n/**\n * Allows to access the nearest [MountPoint] from any [WithScope]\n */\nfun WithScope.mountPoint(): MountPoint? = this.scope[MOUNT_POINT_KEY]\n\n/**\n * Convenience method to register lifecycle handler for after a [Tag] is mounted\n *\n * @param handler [DomLifecycleHandler] to be called on this [Tag] after it is mounted to the DOM\n * @param payload optional payload the handler requires\n * @receiver the [Tag] to register the lifecycle handler for\n */\nfun <T : Element> Tag<T>.afterMount(payload: Any? = null, handler: DomLifecycleHandler) {\n    mountPoint()?.afterMount(this, payload, handler)\n}\n\n/**\n * Convenience method to register lifecycle handler for before a [Tag] is unmounted\n *\n * @param handler [DomLifecycleHandler] to be called on this [Tag] before it is removed from the DOM\n * @param payload optional payload the handler requires\n * @receiver the [Tag] to register the lifecycle handler for\n */\nfun <T : Element> Tag<T>.beforeUnmount(payload: Any? = null, handler: DomLifecycleHandler) {\n    mountPoint()?.beforeUnmount(this, payload, handler)\n}\n\ninternal class MountContext<T : HTMLElement>(\n    override val job: Job,\n    val target: Tag<T>,\n    mountScope: Scope = target.scope,\n) : Tag<HTMLElement>, MountPointImpl() {\n\n    override val domNode: HTMLElement = target.domNode\n    override val id = target.id\n    override val baseClass = target.baseClass\n    override fun className(value: String) = target.className(value)\n    override fun className(value: Flow<String>, initial: String) = target.className(value, initial)\n\n    override val annex: RenderContext = target.annex\n\n    override val scope: Scope = Scope(mountScope).apply { set(MOUNT_POINT_KEY, this@MountContext) }\n\n    override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        return target.register(element, content)\n    }\n\n    init {\n        target.beforeUnmount { _, _ -> runBeforeUnmounts() }\n    }\n}\n\ninternal class BuildContext(\n    override val job: Job,\n    target: Tag<*>,\n    mountScope: Scope,\n) : RenderContext, MountPointImpl() {\n\n    override val scope: Scope = Scope(mountScope).apply { set(MOUNT_POINT_KEY, this@BuildContext) }\n\n    override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        content(element)\n        return element\n    }\n\n    init {\n        target.beforeUnmount { _, _ -> runBeforeUnmounts() }\n    }\n}\n\n/**\n * Defines the dedicated style class, that any mount-point will get by default.\n * Its only purpose is to exclude the mount-point tag to appear in the visual representation of the DOM.\n */\nconst val MOUNT_POINT_STYLE_CLASS = \"mount-point\"\n\ninternal val SET_MOUNT_POINT_DATA_ATTRIBUTE: Tag<*>.() -> Unit = {\n    attr(\"data-mount-point\", true)\n}\n\n/**\n * collects the values of a given [Flow] one by one.\n * Use this for data-types that represent a single (simple or complex) value.\n *\n * @param parentJob parent Job for starting a new coroutine\n * @param upstream returns the Flow that should be mounted at this point\n * @param collect function which getting called when values are changing (rerender)\n */\ninline fun <T> mountSimple(parentJob: Job, upstream: Flow<T>, crossinline collect: suspend (T) -> Unit) {\n    (MainScope() + parentJob).launch(start = CoroutineStart.UNDISPATCHED) {\n        upstream.distinctUntilChanged().mapLatest { collect(it);it }.catch {\n            when (it) {\n                is CollectionLensGetException -> {}\n                else -> console.error(it)\n            }\n            // do not do anything here but canceling the coroutine, because this is an expected\n            // behaviour when dealing with filtering, renderEach and idProvider\n            cancel(\"error mounting\", it)\n        }.collect()\n    }\n}\n\n/**\n * Mounts a [Flow] of [Patch]es to the DOM either\n *  - creating a new context-Div as a child of the receiver\n *  - or, if [into] is set, replacing all children of this [Tag].\n *\n * @param into if set defines the target to mount the content to (replacing its static content)\n * @param upstream the [Flow] that should be mounted\n * @param batch hide [into] while rendering patches. Useful to avoid flickering when you make many changes (like sorting)\n * @param createPatches lambda defining, how to compare two versions of a [List]\n */\ninternal fun <V> RenderContext.mountPatches(\n    into: Tag<HTMLElement>?,\n    upstream: Flow<List<V>>,\n    batch: Boolean,\n    createPatches: Tag<HTMLElement>.(Flow<List<V>>, MutableMap<Node, MountPointImpl>) -> Flow<List<Patch<Tag<HTMLElement>>>>,\n) {\n    val target = into?.apply {\n        this.domNode.clear()\n        SET_MOUNT_POINT_DATA_ATTRIBUTE()\n    } ?: div(MOUNT_POINT_STYLE_CLASS, content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n    val mountPoints = mutableMapOf<Node, MountPointImpl>()\n\n    mountSimple(\n        target.job,\n        createPatches(target, upstream.onEach { if (batch) target.inlineStyle(\"visibility: hidden;\") }, mountPoints)\n    ) { patches ->\n        withContext(NonCancellable) {\n            patches.forEach { patch ->\n                when (patch) {\n                    is Patch.Insert -> insert(target.domNode, mountPoints, patch.element, patch.index)\n                    is Patch.InsertMany -> insertMany(target.domNode, mountPoints, patch.elements, patch.index)\n                    is Patch.Delete -> delete(target.domNode, mountPoints, patch.start, patch.count)\n                    is Patch.Move -> move(target.domNode, patch.from, patch.to)\n                }\n            }\n        }\n        if (batch) {\n            kotlinx.browser.window.awaitAnimationFrame()\n            target.inlineStyle(\"\")\n        }\n    }\n}\n\n\n/**\n * Inserts or appends elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param child Node to insert or append\n * @param index place to insert or append\n */\nprivate fun insertOrAppend(target: Node, child: Node, index: Int) {\n    if (index == target.childNodes.length) target.appendChild(child)\n    else target.childNodes.item(index)?.let {\n        target.insertBefore(child, it)\n    }\n}\n\n/**\n * Inserts or appends elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param element from type [WithDomNode]\n * @param index place to insert or append\n */\nprivate suspend inline fun insert(\n    target: Node,\n    mountPoints: MutableMap<Node, MountPointImpl>,\n    element: WithDomNode<*>,\n    index: Int\n) {\n    insertOrAppend(target, element.domNode, index)\n    mountPoints[element.domNode]?.runAfterMounts()\n}\n\n/**\n * Inserts a [List] of elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param elements [List] of [WithDomNode]s elements to insert\n * @param index place to insert or append\n */\nprivate suspend inline fun insertMany(\n    target: Node,\n    mountPoints: MutableMap<Node, MountPointImpl>,\n    elements: List<WithDomNode<*>>,\n    index: Int\n) {\n    val f = document.createDocumentFragment()\n    for (child in elements) {\n        f.append(child.domNode)\n        mountPoints[child.domNode]?.runAfterMounts()\n    }\n    insertOrAppend(target, f, index)\n}\n\n/**\n * Deletes elements from the DOM.\n *\n * @receiver target DOM-Node\n * @param start position for deleting\n * @param count of elements to delete\n */\nprivate suspend inline fun delete(target: Node, mountPoints: MutableMap<Node, MountPointImpl>, start: Int, count: Int) {\n    var itemToDelete = target.childNodes.item(start)\n    repeat(count) {\n        itemToDelete?.let {\n            itemToDelete = it.nextSibling\n            mountPoints.remove(it)?.let { mountPoint ->\n                mountPoint.runBeforeUnmounts()\n                mountPoint.job.cancelChildren()\n                target.removeChild(it)\n            }\n        }\n    }\n}\n\n/**\n * Moves elements from on place to another in the DOM.\n *\n * @receiver target DOM-Node\n * @param from position index\n * @param to position index\n */\nprivate fun move(target: Node, from: Int, to: Int) {\n    val itemToMove = target.childNodes.item(from)\n    if (itemToMove != null) insertOrAppend(target, itemToMove, to)\n}\n\n",null,null,null,null,"package dev.fritz2.core\n\nimport kotlinx.atomicfu.atomic\nimport kotlinx.browser.window\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.channels.Channel\nimport kotlinx.coroutines.channels.consumeEach\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.events.Event\n\n/**\n * Defines a type for transforming one value into the next\n */\ntypealias Update<D> = suspend (D) -> D\n\n/**\n * [Store] interface is the main type for all two-way data binding activities.\n */\ninterface Store<D> {\n\n    /**\n     * [Job] for launching coroutines in.\n     */\n    val job: Job\n\n    /**\n     * [id] of this [Store].\n     * ids of depending [Store]s are concatenated and separated by a dot.\n     */\n    val id: String\n\n    /**\n     * Path of this [Store] derived from the underlying model.\n     * Paths of depending [Store]s are concatenated and separated by a dot.\n     */\n    val path: String\n\n    /**\n     * the [Flow] representing the current value of the [Store]. Use this to bind it to ui-elements or derive calculated values by using [map] for example.\n     */\n    val data: Flow<D>\n\n    /**\n     * represents the current value of the [Store]\n     */\n    val current: D\n\n    /**\n     * a simple [SimpleHandler] that just takes the given action-value as the new value for the [Store].\n     */\n    val update: Handler<D>\n\n    /**\n     * abstract method defining, how this [Store] handles an [Update]\n     *\n     * @param update the [Update] to handle\n     */\n    suspend fun enqueue(update: Update<D>)\n\n    /**\n     * Factory method to create a [SimpleHandler] mapping the actual value of the [Store] and a given Action to a new value.\n     *\n     * @param execute lambda that is executed whenever a new action-value appears on the connected event-[Flow].\n     */\n    fun <A> handle(\n        execute: suspend (D, A) -> D\n    ) = SimpleHandler<A> { flow, job ->\n        val executeJob = flow.onEach { enqueue { d -> withContext(NonCancellable) { execute(d, it) } } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n        this.job.invokeOnCompletion { executeJob.cancel() }\n    }\n\n    /**\n     * Factory method to create a [SimpleHandler] that does not take an Action\n     *\n     * @param execute lambda that is executed for each event on the connected [Flow]\n     */\n    fun handle(\n        execute: suspend (D) -> D\n    ) = SimpleHandler<Unit> { flow, job ->\n        val executeJob = flow.onEach { enqueue { d -> withContext(NonCancellable) { execute(d) } } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n        this.job.invokeOnCompletion { executeJob.cancel() }\n    }\n\n    /**\n     * Factory method to create a [EmittingHandler] taking an action-value and the current store value to derive the new value.\n     * An [EmittingHandler] is a [Flow] by itself and can therefore be connected to other [SimpleHandler]s even in other [Store]s.\n     *\n     * @param execute lambda that is executed for each action-value on the connected [Flow]. You can emit values from this lambda.\n     */\n    fun <A, E> handleAndEmit(\n        execute: suspend FlowCollector<E>.(D, A) -> D\n    ) = EmittingHandler<A, E>({ inFlow, outFlow, job ->\n        val executeJob = inFlow.onEach { enqueue { d -> withContext(NonCancellable) { outFlow.execute(d, it) } } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n        this.job.invokeOnCompletion { executeJob.cancel() }\n    })\n\n    /**\n     * factory method to create an [EmittingHandler] that does not take an action in it's [execute]-lambda.\n     *\n     * @param execute lambda that is executed for each event on the connected [Flow]. You can emit values from this lambda.\n     */\n    fun <E> handleAndEmit(\n        execute: suspend FlowCollector<E>.(D) -> D\n    ) =\n        EmittingHandler<Unit, E>({ inFlow, outFlow, job ->\n            val executeJob = inFlow.onEach { enqueue { d -> withContext(NonCancellable) { outFlow.execute(d) } } }\n                .catch { d -> errorHandler(d) }\n                .launchIn(MainScope() + job)\n            this.job.invokeOnCompletion { executeJob.cancel() }\n        })\n\n    /**\n     * Default error handler printing the error to console.\n     *\n     * @param cause Throwable to handle\n     */\n    fun errorHandler(cause: Throwable): Unit = printErrorIgnoreLensException(cause)\n\n    /**\n     * Creates a new [Store] that contains data derived by a given [Lens].\n     *\n     * @param lens: a [Lens] describing the two-way data binding of the derived [Store].\n     */\n    fun <X> map(lens: Lens<D, X>): Store<X> = SubStore(this, lens)\n}\n\n/**\n * A [Store] can be initialized with a given value.\n *\n * @param initialData first current value of this [Store]\n * @param job Job to be used by the [Store]\n * @param id id of this [Store]. Ids of derived [Store]s will be concatenated.\n */\nopen class RootStore<D>(\n    initialData: D,\n    job: Job,\n    override val id: String = Id.next()\n) : Store<D> {\n    override val path: String = \"\"\n\n    private val state: MutableStateFlow<D> = MutableStateFlow(initialData)\n    private val queue = Channel<Update<D>>(Channel.UNLIMITED)\n\n    /**\n     * [Job] used as parent job on all coroutines started in [Handler]s in the scope of this [Store]\n     */\n    final override val job: Job = (MainScope() + job).launch(start = CoroutineStart.UNDISPATCHED) {\n        activeJobs.incrementAndGet()\n        queue.consumeEach { update ->\n            try {\n                state.value = update(state.value)\n            } catch (t: Throwable) {\n                errorHandler(t)\n            }\n        }\n    }.apply { invokeOnCompletion { activeJobs.decrementAndGet() } }\n\n    /**\n     * Emits a [Flow] with the current data of this [Store].\n     * The [Flow] internal data is only changed, when the value differs from the last one to avoid calculations\n     * and updates that are not necessary.\n     *\n     * Actual data therefore is derived by applying the updates on the internal channel one by one to get the next value.\n     */\n    final override val data: Flow<D> = flow {\n        try {\n            activeFlows.incrementAndGet()\n            emit(state)\n            this@RootStore.job.join()\n            emit(emptyFlow())\n        } finally {\n            activeFlows.decrementAndGet()\n        }\n    }.flatMapLatest { it }\n\n    /**\n     * Represents the current data of this [Store].\n     */\n    override val current: D\n        get() = state.value\n\n    /**\n     * in a [RootStore] an [Update] is handled by applying it to the internal [StateFlow].\n     */\n    override suspend fun enqueue(update: Update<D>): Unit = queue.send(update)\n\n    /**\n     * a simple [SimpleHandler] that just takes the given action-value as the new value for the [Store].\n     */\n    override val update = this.handle<D> { _, newValue -> newValue }\n\n    private val withJob = object : WithJob {\n        override val job: Job = this@RootStore.job\n        override fun errorHandler(cause: Throwable) = this@RootStore.errorHandler(cause)\n    }\n\n    /**\n     * Allows to use the [WithJob]-Context of this Store and to run [handledBy] on the Store-Job\n     */\n    fun runWithJob(init: WithJob.() -> Unit) = withJob.init()\n\n    /**\n     * Connects a [Flow] to a [Handler].\n     *\n     * @param handler [Handler] that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to a [Handler]\n     */\n    protected infix fun <A> Flow<A>.handledBy(handler: Handler<A>) = runWithJob { this@handledBy handledBy handler }\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @param execute function that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to\n     */\n    protected infix fun <A> Flow<A>.handledBy(execute: suspend (A) -> Unit) =\n        runWithJob { this@handledBy handledBy execute }\n\n    /**\n     * Connects [Event]s to a [Handler].\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param handler that will handle the fired [Event]\n     */\n    protected infix fun <E : Event> Flow<E>.handledBy(handler: Handler<Unit>) =\n        runWithJob { this@handledBy handledBy handler }\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param execute function that will handle the fired [Event]\n     */\n    protected infix fun <E : Event> Flow<E>.handledBy(execute: suspend (E) -> Unit) =\n        runWithJob { this@handledBy handledBy execute }\n\n    companion object {\n        private val activeFlows = atomic(0)\n        private val activeJobs = atomic(0)\n\n        /**\n         * Count of active [Store.data]-Flows, can be used to detect memory-leaks\n         */\n        val ACTIVE_FLOWS get() = activeFlows.value\n\n        /**\n         * Count of active [Store.job]-Instances, can be used to detect memory-leaks\n         */\n        val ACTIVE_JOBS get() = activeJobs.value\n\n        fun resetCounters() {\n            activeFlows.value = 0\n            activeJobs.value = 0\n        }\n\n        init {\n            window.asDynamic().fritz2 = {}\n            window.asDynamic().fritz2.active_jobs = { ACTIVE_JOBS }\n            window.asDynamic().fritz2.active_flows = { ACTIVE_FLOWS }\n        }\n    }\n}\n\n/**\n * Convenience function to create a simple [Store] without any handlers, etc.\n *\n * @param initialData first current value of this [Store]\n * @param job Job to be used by the [Store]\n * @param id id of this store. Ids of derived [Store]s will be concatenated.\n */\nfun <D> storeOf(initialData: D, job: Job, id: String = Id.next()): Store<D> =\n    RootStore(initialData, job, id)\n\n/**\n * Convenience function to create a simple [Store] without any handlers, etc.\n *\n * @param initialData first current value of this [Store]\n * @param job Job to be used by the [Store]\n * @param id id of this store. Ids of derived [Store]s will be concatenated.\n */\nfun <D> WithJob.storeOf(initialData: D, job: Job = this.job, id: String = Id.next()): Store<D> =\n    RootStore(initialData, job, id)\n","package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.plus\nimport kotlinx.dom.clear\nimport org.w3c.dom.Element\nimport org.w3c.dom.Node\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.svg.SVGElement\n\n/**\n * A marker to separate the layers of calls in the type-safe-builder pattern.\n */\n@DslMarker\nannotation class HtmlTagMarker\n\n/**\n * Represents a tag.\n * Sorry for the name, but we needed to delimit it from the [Element] it is wrapping.\n */\ninterface Tag<out E : Element> : RenderContext, WithDomNode<E>, WithEvents<E> {\n\n    /**\n     * id of this [Tag]\n     */\n    val id: String?\n\n    /**\n     * constant css-classes of this [Tag]\n     */\n    val baseClass: String?\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: String) {\n        domNode.setAttribute(name, value)\n    }\n\n    /**\n     * Sets an attribute only if its [value] is not null.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: String?) {\n        if (value != null) domNode.setAttribute(name, value)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: Flow<String>) {\n        mountSimple(job, value) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute only for all none null values of the flow.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: Flow<String?>) {\n        mountSimple(job, value) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun <T> attr(name: String, value: T) {\n        attr(name, value?.toString())\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun <T> attr(name: String, value: Flow<T>) {\n        mountSimple(job, value.map { it?.toString() }) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Boolean, trueValue: String = \"\") {\n        if (value) domNode.setAttribute(name, trueValue)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Boolean?, trueValue: String = \"\") {\n        if (value != null && value) domNode.setAttribute(name, trueValue)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Flow<Boolean>, trueValue: String = \"\") {\n        mountSimple(job, value) { v -> attr(name, v, trueValue) }\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Flow<Boolean?>, trueValue: String = \"\") {\n        mountSimple(job, value) { v -> attr(name, v, trueValue) }\n    }\n\n    /**\n     * Adds a [String] of class names to the classes attribute of this [Tag]\n     *\n     * @param value as [String]\n     */\n    fun className(value: String)\n\n    /**\n     * Adds a [Flow] of class names to the classes attribute of this [Tag]\n     *\n     * @param value [Flow] with [String]\n     */\n    fun className(value: Flow<String>, initial: String = \"\")\n\n    /**\n     * Uses a [Flow] of [T] to create some class names by a [transform] lambda expression and add them to the classes\n     * attribute of the [Tag].\n     *\n     * In order to set some classes immediately, you must provide an initial [T] which is used to create the\n     * initial classes value with the [transform] lambda.\n     *\n     * Use this function to avoid flickering effects on reactively based styling!\n     *\n     * @param value a [Flow] of [T] that provides the parameter for the [transform] lambda\n     * @param initial a [T] to be used as initial state in order to generate and add class names\n     * immediately without waiting for the first value of the [Flow]\n     * @param transform a lambda expression which finally creates class names by passing one [T]\n     */\n    fun <T> className(value: Flow<T>, initial: T, transform: (T) -> String) {\n        className(value.map(transform), transform(initial))\n    }\n\n    /**\n     * Sets the *class* attribute from a [List] of [String]s.\n     *\n     * @param values as [List] of [String]s\n     */\n    fun classList(values: List<String>) {\n        className(values.joinToString(\" \"))\n    }\n\n    /**\n     * Sets the *class* attribute from a [List] of [String]s.\n     *\n     * @param values [Flow] with [List] of [String]s\n     */\n    fun classList(values: Flow<List<String>>) {\n        className(values.map { it.joinToString(\" \") })\n    }\n\n    /**\n     * Sets the *class* attribute from a [Map] of [String] to [Boolean].\n     * If the value of the [Map]-entry is true, the key will be used inside the resulting [String].\n     *\n     * @param values as [Map] with key to set and corresponding values to decide\n     */\n    fun classMap(values: Map<String, Boolean>) {\n        className(values.filter { it.value }.keys.joinToString(\" \"))\n    }\n\n    /**\n     * Sets the *class* attribute from a [Map] of [String] to [Boolean].\n     * If the value of the [Map]-entry is true, the key will be used inside the resulting [String].\n     *\n     * @param values [Flow] of [Map] with key to set and corresponding values to decide\n     */\n    fun classMap(values: Flow<Map<String, Boolean>>) {\n        className(values.map { map -> map.filter { it.value }.keys.joinToString(\" \") })\n    }\n\n    /**\n     * Sets the *style* attribute.\n     *\n     * @param value [String] to set\n     */\n    fun inlineStyle(value: String) {\n        attr(\"style\", value)\n    }\n\n    /**\n     * Sets the *style* attribute.\n     *\n     * @param value [Flow] with [String]\n     */\n    fun inlineStyle(value: Flow<String>) {\n        attr(\"style\", value)\n    }\n\n    /**\n     * Sets all scope-entries as data-attributes to the element.\n     */\n    fun Scope.asDataAttr() {\n        for ((k, v) in this) {\n            attr(\"data-${k.name}\", v.toString())\n        }\n    }\n\n    override fun <X : Event> subscribe(eventName: String, capture: Boolean, selector: X.() -> Boolean): Listener<X, E> =\n        Listener(domNode.subscribe(eventName, capture, selector))\n\n    /**\n     * Adds text-content of a [Flow] at this position\n     *\n     * @param into target to render text-content to\n     * @receiver text-content\n     */\n    fun Flow<String>.renderText(into: Tag<*>? = null) {\n        val target = into?.apply(SET_MOUNT_POINT_DATA_ATTRIBUTE) ?: span(content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n        mountSimple(job, this) { content ->\n            target.domNode.clear()\n            target.domNode.appendChild(window.document.createTextNode(content))\n        }\n    }\n\n    /**\n     * Adds text-content of a [Flow] at this position\n     *\n     * @param into target to render text-content to\n     * @receiver text-content\n     */\n    fun <T> Flow<T>.renderText(into: Tag<*>? = null) = this.asString().renderText(into)\n\n    /**\n     * Adds static text-content at this position\n     *\n     * @receiver text-content\n     */\n    operator fun String.unaryPlus(): Node = domNode.appendChild(document.createTextNode(this))\n\n    /**\n     * Adds a comment in your HTML by using !\"Comment Text\".\n     *\n     * @receiver comment-content\n     */\n    operator fun String.not(): Node = domNode.appendChild(document.createComment(this))\n\n    /**\n     * Sets scope-entry for the given [key] as data-attribute to the element\n     * when available.\n     *\n     * @param key key of scope-entry to look for in scope\n     */\n    fun <T : Any> Scope.asDataAttr(key: Scope.Key<T>) {\n        this[key]?.let {\n            attr(\"data-${key.name}\", it.toString())\n        }\n    }\n\n    /**\n     * provides [RenderContext] next to this [Tag] on the same DOM-level.\n     */\n    val annex: RenderContext\n}\n\n/**\n * Implementation of [Tag] to represent HTML5-tags.\n *\n * @param tagName name of the tag. Used to create the corresponding [Element]\n * @property id the DOM-id of the element to be created\n * @property baseClass a static base value for the class-attribute. All dynamic values for this attribute will be concatenated to this base-value.\n * @property job used for launching coroutines in\n * @property scope set some arbitrary scope entries into the [Tag]'s scope\n */\n@HtmlTagMarker\nopen class HtmlTag<out E : Element>(\n    private val tagName: String,\n    final override val id: String? = null,\n    final override val baseClass: String? = null,\n    override val job: Job,\n    override val scope: Scope,\n) : Tag<E> {\n\n    override val domNode: E = window.document.createElement(tagName).also { element ->\n        if (id != null) element.id = id\n        if (!baseClass.isNullOrBlank()) element.className = baseClass\n    }.unsafeCast<E>()\n\n    /**\n     * Creates the content of the [HtmlTag] and appends it as a child to the wrapped [Element].\n     *\n     * @param element the parent element of the new content\n     * @param content lambda building the content (following the type-safe-builder pattern)\n     */\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    final override inline fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        content(element)\n        domNode.appendChild(element.domNode)\n        return element\n    }\n\n    /**\n     * This [MutableStateFlow] acts as a backing field for all class names. It holds arbitrary [List]s of\n     * [StateFlow]s which manage each portion of class names. This way, multiple calls of any [className] variant\n     * can be merged in one central place and must be mounted into the [Tag]s `class` attribute only once.\n     */\n    private val classesStateFlow by lazy {\n        MutableStateFlow<List<StateFlow<String>>>(listOfNotNull(baseClass?.let { MutableStateFlow(it) }))\n            .also { classesFlowList ->\n                attr(\"class\", classesFlowList.flatMapLatest { styleFlows ->\n                    combine(styleFlows) { joinClasses(*it) }\n                })\n            }\n    }\n\n    /**\n     * Small utility function to create the classes [String] from the current values of the [StateFlow]s.\n     *\n     * This function is used to create the initial class name values to be applied immediately\n     * to the domnode.\n     */\n    private fun buildClasses() = joinClasses(*classesStateFlow.value.map { it.value }.toTypedArray())\n\n    override fun className(value: String) {\n        classesStateFlow.value += MutableStateFlow(value)\n        // this ensures that the set state is applied *immediately* without `Flow`-\"delay\"\n        attr(\"class\", buildClasses())\n    }\n\n    override fun className(value: Flow<String>, initial: String) {\n        classesStateFlow.value += value\n            .catch { printErrorIgnoreLensException(it) }\n            .stateIn(MainScope() + job, SharingStarted.Eagerly, initial)\n\n        // this ensures that the set state is applied *immediately* without `Flow`-\"delay\".\n        // in this case, the `initial` value gets applied as \"promised\".\n        attr(\"class\", buildClasses())\n    }\n\n    internal inner class AnnexContext : RenderContext {\n        override fun <E : Node, T : WithDomNode<E>> register(element: T, content: (T) -> Unit): T {\n            domNode.parentElement?.let {\n                content(element)\n                it.appendChild(element.domNode)\n            }\n            return element\n        }\n\n        override val job: Job = this@HtmlTag.job\n\n        override val scope: Scope = this@HtmlTag.scope\n    }\n\n    /**\n     * provides [RenderContext] next to this [HtmlTag] on the same DOM-level.\n     */\n    override val annex: RenderContext by lazy { AnnexContext() }\n}\n\nconst val SVG_XMLNS = \"http://www.w3.org/2000/svg\"\n\n/**\n * Implementation of [HtmlTag] to represent the JavaScript\n * [SVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) to Kotlin\n */\nclass SvgTag(tagName: String, id: String? = null, baseClass: String? = null, job: Job, scope: Scope) :\n    HtmlTag<SVGElement>(tagName, id, baseClass, job, scope) {\n\n    override val domNode =\n        document.createElementNS(SVG_XMLNS, tagName).unsafeCast<SVGElement>().apply {\n            if (!baseClass.isNullOrBlank()) setAttributeNS(null, \"class\", baseClass)\n            if (!id.isNullOrBlank()) setAttributeNS(null, \"id\", id)\n        }\n\n    /**\n     * Sets the given [xml] string to the *innerHTML* of the [SVGElement].\n     *\n     * @param xml svg xml content\n     */\n    fun content(xml: String) {\n        domNode.innerHTML = xml\n    }\n\n    /**\n     * sets XML-namespace of a [Tag]\n     *\n     * @param value namespace to set\n     */\n    fun xmlns(value: String) = attr(\"xmlns\", value)\n}","package dev.fritz2.core\n\nobject Id {\n    private const val defaultLength = 6\n    private val chars = \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\".toCharArray()\n\n    fun next(length: Int = defaultLength) = buildString {\n        for (i in 0 until length) {\n            append(chars.random())\n        }\n    }\n}","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.flow.Flow\nimport org.w3c.dom.*\nimport org.w3c.fetch.RequestDestination\n\nfun SvgTag.viewBox(value: String) = attr(\"viewBox\", value)\nfun SvgTag.viewBox(value: Flow<String>) = attr(\"viewBox\", value)\n\nfun SvgTag.fill(value: String) = attr(\"fill\", value)\nfun SvgTag.fill(value: Flow<String>) = attr(\"fill\", value)\n\nfun SvgTag.d(value: String) = attr(\"d\", value)\nfun SvgTag.d(value: Flow<String>) = attr(\"d\", value)\n\n/*\n * Generated by https://github.com/chausknecht/HtmlTagAttributesExtractor\n * Pay attention to local modifications before pasting an updated output here!\n * Add manual extensions above this section (like the SVG attributes).\n */\n\n/*\n * HTMLElement attributes\n */\nfun Tag<HTMLElement>.title(value: String) = attr(\"title\", value)\nfun Tag<HTMLElement>.title(value: Flow<String>) = attr(\"title\", value)\n\nfun Tag<HTMLElement>.lang(value: String) = attr(\"lang\", value)\nfun Tag<HTMLElement>.lang(value: Flow<String>) = attr(\"lang\", value)\n\nfun Tag<HTMLElement>.translate(value: Boolean, trueValue: String = \"\") = attr(\"translate\", value, trueValue)\nfun Tag<HTMLElement>.translate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"translate\", value, trueValue)\n\nfun Tag<HTMLElement>.dir(value: String) = attr(\"dir\", value)\nfun Tag<HTMLElement>.dir(value: Flow<String>) = attr(\"dir\", value)\n\nfun Tag<HTMLElement>.hidden(value: Boolean, trueValue: String = \"\") = attr(\"hidden\", value, trueValue)\nfun Tag<HTMLElement>.hidden(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"hidden\", value, trueValue)\n\nfun Tag<HTMLElement>.tabIndex(value: Int) = attr(\"tabindex\", value)\nfun Tag<HTMLElement>.tabIndex(value: Flow<Int>) = attr(\"tabindex\", value)\n\nfun Tag<HTMLElement>.accessKey(value: String) = attr(\"accesskey\", value)\nfun Tag<HTMLElement>.accessKey(value: Flow<String>) = attr(\"accesskey\", value)\n\nfun Tag<HTMLElement>.draggable(value: Boolean, trueValue: String = \"\") = attr(\"draggable\", value, trueValue)\nfun Tag<HTMLElement>.draggable(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"draggable\", value, trueValue)\n\nfun Tag<HTMLElement>.contextMenu(value: HTMLMenuElement?) = attr(\"contextmenu\", value)\nfun Tag<HTMLElement>.contextMenu(value: Flow<HTMLMenuElement?>) = attr(\"contextmenu\", value)\n\nfun Tag<HTMLElement>.spellcheck(value: Boolean, trueValue: String = \"\") = attr(\"spellcheck\", value, trueValue)\nfun Tag<HTMLElement>.spellcheck(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"spellcheck\", value, trueValue)\n\nfun Tag<HTMLElement>.innerText(value: String) = attr(\"innertext\", value)\nfun Tag<HTMLElement>.innerText(value: Flow<String>) = attr(\"innertext\", value)\n\n// inherited attributes from supertype Element\nfun Tag<HTMLElement>.id(value: String) = attr(\"id\", value)\nfun Tag<HTMLElement>.id(value: Flow<String>) = attr(\"id\", value)\n\nfun Tag<HTMLElement>.slot(value: String) = attr(\"slot\", value)\nfun Tag<HTMLElement>.slot(value: Flow<String>) = attr(\"slot\", value)\n\nfun Tag<HTMLElement>.scrollTop(value: Double) = attr(\"scrolltop\", value)\nfun Tag<HTMLElement>.scrollTop(value: Flow<Double>) = attr(\"scrolltop\", value)\n\nfun Tag<HTMLElement>.scrollLeft(value: Double) = attr(\"scrollleft\", value)\nfun Tag<HTMLElement>.scrollLeft(value: Flow<Double>) = attr(\"scrollleft\", value)\n\nfun Tag<HTMLElement>.innerHTML(value: String) = attr(\"innerhtml\", value)\nfun Tag<HTMLElement>.innerHTML(value: Flow<String>) = attr(\"innerhtml\", value)\n\nfun Tag<HTMLElement>.outerHTML(value: String) = attr(\"outerhtml\", value)\nfun Tag<HTMLElement>.outerHTML(value: Flow<String>) = attr(\"outerhtml\", value)\n\n// inherited attributes from supertype Node\nfun Tag<HTMLElement>.nodeValue(value: String?) = attr(\"nodevalue\", value)\nfun Tag<HTMLElement>.nodeValue(value: Flow<String?>) = attr(\"nodevalue\", value)\n\nfun Tag<HTMLElement>.textContent(value: String?) = attr(\"textcontent\", value)\nfun Tag<HTMLElement>.textContent(value: Flow<String?>) = attr(\"textcontent\", value)\n\n// inherited attributes from supertype ElementContentEditable\nfun Tag<HTMLElement>.contentEditable(value: String) = attr(\"contenteditable\", value)\nfun Tag<HTMLElement>.contentEditable(value: Flow<String>) = attr(\"contenteditable\", value)\n\n\n/*\n * HTMLBaseElement attributes\n */\nfun Tag<HTMLBaseElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLBaseElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLBaseElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLBaseElement>.target(value: Flow<String>) = attr(\"target\", value)\n\n\n/*\n * HTMLLinkElement attributes\n */\nfun Tag<HTMLLinkElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLLinkElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLLinkElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLLinkElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLLinkElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLLinkElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLLinkElement>.`as`(value: RequestDestination) = attr(\"as\", value)\nfun Tag<HTMLLinkElement>.`as`(value: Flow<RequestDestination>) = attr(\"as\", value)\n\nfun Tag<HTMLLinkElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLLinkElement>.media(value: Flow<String>) = attr(\"media\", value)\n\nfun Tag<HTMLLinkElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLLinkElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLLinkElement>.hreflang(value: String) = attr(\"hreflang\", value)\nfun Tag<HTMLLinkElement>.hreflang(value: Flow<String>) = attr(\"hreflang\", value)\n\nfun Tag<HTMLLinkElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLLinkElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLLinkElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLLinkElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLLinkElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLLinkElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLLinkElement>.rev(value: String) = attr(\"rev\", value)\nfun Tag<HTMLLinkElement>.rev(value: Flow<String>) = attr(\"rev\", value)\n\nfun Tag<HTMLLinkElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLLinkElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLLinkElement>.scope(value: String) = attr(\"scope\", value)\nfun Tag<HTMLLinkElement>.scope(value: Flow<String>) = attr(\"scope\", value)\n\nfun Tag<HTMLLinkElement>.workerType(value: WorkerType) = attr(\"workertype\", value)\nfun Tag<HTMLLinkElement>.workerType(value: Flow<WorkerType>) = attr(\"workertype\", value)\n\n\n/*\n * HTMLMetaElement attributes\n */\nfun Tag<HTMLMetaElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLMetaElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLMetaElement>.httpEquiv(value: String) = attr(\"httpequiv\", value)\nfun Tag<HTMLMetaElement>.httpEquiv(value: Flow<String>) = attr(\"httpequiv\", value)\n\nfun Tag<HTMLMetaElement>.content(value: String) = attr(\"content\", value)\nfun Tag<HTMLMetaElement>.content(value: Flow<String>) = attr(\"content\", value)\n\nfun Tag<HTMLMetaElement>.scheme(value: String) = attr(\"scheme\", value)\nfun Tag<HTMLMetaElement>.scheme(value: Flow<String>) = attr(\"scheme\", value)\n\n\n/*\n * HTMLStyleElement attributes\n */\nfun Tag<HTMLStyleElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLStyleElement>.media(value: Flow<String>) = attr(\"media\", value)\n\nfun Tag<HTMLStyleElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLStyleElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLStyleElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLStyleElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLBodyElement attributes\n */\nfun Tag<HTMLBodyElement>.link(value: String) = attr(\"link\", value)\nfun Tag<HTMLBodyElement>.link(value: Flow<String>) = attr(\"link\", value)\n\nfun Tag<HTMLBodyElement>.vLink(value: String) = attr(\"vlink\", value)\nfun Tag<HTMLBodyElement>.vLink(value: Flow<String>) = attr(\"vlink\", value)\n\nfun Tag<HTMLBodyElement>.aLink(value: String) = attr(\"alink\", value)\nfun Tag<HTMLBodyElement>.aLink(value: Flow<String>) = attr(\"alink\", value)\n\nfun Tag<HTMLBodyElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLBodyElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLBodyElement>.background(value: String) = attr(\"background\", value)\nfun Tag<HTMLBodyElement>.background(value: Flow<String>) = attr(\"background\", value)\n\n\n/*\n * HTMLHeadingElement attributes\n */\nfun Tag<HTMLHeadingElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLHeadingElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLParagraphElement attributes\n */\nfun Tag<HTMLParagraphElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLParagraphElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLHRElement attributes\n */\nfun Tag<HTMLHRElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLHRElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLHRElement>.color(value: String) = attr(\"color\", value)\nfun Tag<HTMLHRElement>.color(value: Flow<String>) = attr(\"color\", value)\n\nfun Tag<HTMLHRElement>.noShade(value: Boolean, trueValue: String = \"\") = attr(\"noshade\", value, trueValue)\nfun Tag<HTMLHRElement>.noShade(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"noshade\", value, trueValue)\n\nfun Tag<HTMLHRElement>.size(value: String) = attr(\"size\", value)\nfun Tag<HTMLHRElement>.size(value: Flow<String>) = attr(\"size\", value)\n\nfun Tag<HTMLHRElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLHRElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLPreElement attributes\n */\nfun Tag<HTMLPreElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLPreElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\n\n/*\n * HTMLQuoteElement attributes\n */\nfun Tag<HTMLQuoteElement>.cite(value: String) = attr(\"cite\", value)\nfun Tag<HTMLQuoteElement>.cite(value: Flow<String>) = attr(\"cite\", value)\n\n\n/*\n * HTMLOListElement attributes\n */\nfun Tag<HTMLOListElement>.reversed(value: Boolean, trueValue: String = \"\") = attr(\"reversed\", value, trueValue)\nfun Tag<HTMLOListElement>.reversed(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"reversed\", value, trueValue)\n\nfun Tag<HTMLOListElement>.start(value: Int) = attr(\"start\", value)\nfun Tag<HTMLOListElement>.start(value: Flow<Int>) = attr(\"start\", value)\n\nfun Tag<HTMLOListElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLOListElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLOListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLOListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLUListElement attributes\n */\nfun Tag<HTMLUListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLUListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\nfun Tag<HTMLUListElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLUListElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLLIElement attributes\n */\nfun Tag<HTMLLIElement>.value(value: Int) = attr(\"value\", value)\nfun Tag<HTMLLIElement>.value(value: Flow<Int>) = attr(\"value\", value)\n\nfun Tag<HTMLLIElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLLIElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLDListElement attributes\n */\nfun Tag<HTMLDListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLDListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLDivElement attributes\n */\nfun Tag<HTMLDivElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLDivElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLAnchorElement attributes\n */\nfun Tag<HTMLAnchorElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLAnchorElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLAnchorElement>.download(value: String) = attr(\"download\", value)\nfun Tag<HTMLAnchorElement>.download(value: Flow<String>) = attr(\"download\", value)\n\nfun Tag<HTMLAnchorElement>.ping(value: String) = attr(\"ping\", value)\nfun Tag<HTMLAnchorElement>.ping(value: Flow<String>) = attr(\"ping\", value)\n\nfun Tag<HTMLAnchorElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLAnchorElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLAnchorElement>.hreflang(value: String) = attr(\"hreflang\", value)\nfun Tag<HTMLAnchorElement>.hreflang(value: Flow<String>) = attr(\"hreflang\", value)\n\nfun Tag<HTMLAnchorElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLAnchorElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLAnchorElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLAnchorElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLAnchorElement>.coords(value: String) = attr(\"coords\", value)\nfun Tag<HTMLAnchorElement>.coords(value: Flow<String>) = attr(\"coords\", value)\n\nfun Tag<HTMLAnchorElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLAnchorElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLAnchorElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLAnchorElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLAnchorElement>.rev(value: String) = attr(\"rev\", value)\nfun Tag<HTMLAnchorElement>.rev(value: Flow<String>) = attr(\"rev\", value)\n\nfun Tag<HTMLAnchorElement>.shape(value: String) = attr(\"shape\", value)\nfun Tag<HTMLAnchorElement>.shape(value: Flow<String>) = attr(\"shape\", value)\n\n// inherited attributes from supertype HTMLHyperlinkElementUtils\nfun Tag<HTMLAnchorElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLAnchorElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLAnchorElement>.protocol(value: String) = attr(\"protocol\", value)\nfun Tag<HTMLAnchorElement>.protocol(value: Flow<String>) = attr(\"protocol\", value)\n\nfun Tag<HTMLAnchorElement>.username(value: String) = attr(\"username\", value)\nfun Tag<HTMLAnchorElement>.username(value: Flow<String>) = attr(\"username\", value)\n\nfun Tag<HTMLAnchorElement>.password(value: String) = attr(\"password\", value)\nfun Tag<HTMLAnchorElement>.password(value: Flow<String>) = attr(\"password\", value)\n\nfun Tag<HTMLAnchorElement>.host(value: String) = attr(\"host\", value)\nfun Tag<HTMLAnchorElement>.host(value: Flow<String>) = attr(\"host\", value)\n\nfun Tag<HTMLAnchorElement>.hostname(value: String) = attr(\"hostname\", value)\nfun Tag<HTMLAnchorElement>.hostname(value: Flow<String>) = attr(\"hostname\", value)\n\nfun Tag<HTMLAnchorElement>.port(value: String) = attr(\"port\", value)\nfun Tag<HTMLAnchorElement>.port(value: Flow<String>) = attr(\"port\", value)\n\nfun Tag<HTMLAnchorElement>.pathname(value: String) = attr(\"pathname\", value)\nfun Tag<HTMLAnchorElement>.pathname(value: Flow<String>) = attr(\"pathname\", value)\n\nfun Tag<HTMLAnchorElement>.search(value: String) = attr(\"search\", value)\nfun Tag<HTMLAnchorElement>.search(value: Flow<String>) = attr(\"search\", value)\n\nfun Tag<HTMLAnchorElement>.hash(value: String) = attr(\"hash\", value)\nfun Tag<HTMLAnchorElement>.hash(value: Flow<String>) = attr(\"hash\", value)\n\n\n/*\n * HTMLDataElement attributes\n */\nfun Tag<HTMLDataElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLDataElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n\n/*\n * HTMLTimeElement attributes\n */\nfun Tag<HTMLTimeElement>.dateTime(value: String) = attr(\"datetime\", value)\nfun Tag<HTMLTimeElement>.dateTime(value: Flow<String>) = attr(\"datetime\", value)\n\n\n/*\n * HTMLBRElement attributes\n */\nfun Tag<HTMLBRElement>.clear(value: String) = attr(\"clear\", value)\nfun Tag<HTMLBRElement>.clear(value: Flow<String>) = attr(\"clear\", value)\n\n\n/*\n * HTMLModElement attributes\n */\nfun Tag<HTMLModElement>.cite(value: String) = attr(\"cite\", value)\nfun Tag<HTMLModElement>.cite(value: Flow<String>) = attr(\"cite\", value)\n\nfun Tag<HTMLModElement>.dateTime(value: String) = attr(\"datetime\", value)\nfun Tag<HTMLModElement>.dateTime(value: Flow<String>) = attr(\"datetime\", value)\n\n\n/*\n * HTMLSourceElement attributes\n */\nfun Tag<HTMLSourceElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLSourceElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLSourceElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLSourceElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLSourceElement>.srcset(value: String) = attr(\"srcset\", value)\nfun Tag<HTMLSourceElement>.srcset(value: Flow<String>) = attr(\"srcset\", value)\n\nfun Tag<HTMLSourceElement>.sizes(value: String) = attr(\"sizes\", value)\nfun Tag<HTMLSourceElement>.sizes(value: Flow<String>) = attr(\"sizes\", value)\n\nfun Tag<HTMLSourceElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLSourceElement>.media(value: Flow<String>) = attr(\"media\", value)\n\n\n/*\n * HTMLImageElement attributes\n */\nfun Tag<HTMLImageElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLImageElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLImageElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLImageElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLImageElement>.srcset(value: String) = attr(\"srcset\", value)\nfun Tag<HTMLImageElement>.srcset(value: Flow<String>) = attr(\"srcset\", value)\n\nfun Tag<HTMLImageElement>.sizes(value: String) = attr(\"sizes\", value)\nfun Tag<HTMLImageElement>.sizes(value: Flow<String>) = attr(\"sizes\", value)\n\nfun Tag<HTMLImageElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLImageElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLImageElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLImageElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\nfun Tag<HTMLImageElement>.isMap(value: Boolean, trueValue: String = \"\") = attr(\"ismap\", value, trueValue)\nfun Tag<HTMLImageElement>.isMap(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"ismap\", value, trueValue)\n\nfun Tag<HTMLImageElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLImageElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLImageElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLImageElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLImageElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLImageElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLImageElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLImageElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLImageElement>.lowsrc(value: String) = attr(\"lowsrc\", value)\nfun Tag<HTMLImageElement>.lowsrc(value: Flow<String>) = attr(\"lowsrc\", value)\n\nfun Tag<HTMLImageElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLImageElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLImageElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLImageElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLImageElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLImageElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLImageElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLImageElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLImageElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLImageElement>.border(value: Flow<String>) = attr(\"border\", value)\n\n\n/*\n * HTMLIFrameElement attributes\n */\nfun Tag<HTMLIFrameElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLIFrameElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLIFrameElement>.srcdoc(value: String) = attr(\"srcdoc\", value)\nfun Tag<HTMLIFrameElement>.srcdoc(value: Flow<String>) = attr(\"srcdoc\", value)\n\nfun Tag<HTMLIFrameElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLIFrameElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLIFrameElement>.allowFullscreen(value: Boolean, trueValue: String = \"\") = attr(\"allowfullscreen\", value, trueValue)\nfun Tag<HTMLIFrameElement>.allowFullscreen(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"allowfullscreen\", value, trueValue)\n\nfun Tag<HTMLIFrameElement>.allowUserMedia(value: Boolean, trueValue: String = \"\") = attr(\"allowusermedia\", value, trueValue)\nfun Tag<HTMLIFrameElement>.allowUserMedia(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"allowusermedia\", value, trueValue)\n\nfun Tag<HTMLIFrameElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLIFrameElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLIFrameElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLIFrameElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLIFrameElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLIFrameElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLIFrameElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLIFrameElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLIFrameElement>.scrolling(value: String) = attr(\"scrolling\", value)\nfun Tag<HTMLIFrameElement>.scrolling(value: Flow<String>) = attr(\"scrolling\", value)\n\nfun Tag<HTMLIFrameElement>.frameBorder(value: String) = attr(\"frameborder\", value)\nfun Tag<HTMLIFrameElement>.frameBorder(value: Flow<String>) = attr(\"frameborder\", value)\n\nfun Tag<HTMLIFrameElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLIFrameElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLIFrameElement>.marginHeight(value: String) = attr(\"marginheight\", value)\nfun Tag<HTMLIFrameElement>.marginHeight(value: Flow<String>) = attr(\"marginheight\", value)\n\nfun Tag<HTMLIFrameElement>.marginWidth(value: String) = attr(\"marginwidth\", value)\nfun Tag<HTMLIFrameElement>.marginWidth(value: Flow<String>) = attr(\"marginwidth\", value)\n\n\n/*\n * HTMLEmbedElement attributes\n */\nfun Tag<HTMLEmbedElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLEmbedElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLEmbedElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLEmbedElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLEmbedElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLEmbedElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLEmbedElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLEmbedElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLEmbedElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLEmbedElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLEmbedElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLEmbedElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLObjectElement attributes\n */\nfun Tag<HTMLObjectElement>.data(value: String) = attr(\"data\", value)\nfun Tag<HTMLObjectElement>.data(value: Flow<String>) = attr(\"data\", value)\n\nfun Tag<HTMLObjectElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLObjectElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLObjectElement>.typeMustMatch(value: Boolean, trueValue: String = \"\") = attr(\"typemustmatch\", value, trueValue)\nfun Tag<HTMLObjectElement>.typeMustMatch(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"typemustmatch\", value, trueValue)\n\nfun Tag<HTMLObjectElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLObjectElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLObjectElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLObjectElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\nfun Tag<HTMLObjectElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLObjectElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLObjectElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLObjectElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLObjectElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLObjectElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLObjectElement>.archive(value: String) = attr(\"archive\", value)\nfun Tag<HTMLObjectElement>.archive(value: Flow<String>) = attr(\"archive\", value)\n\nfun Tag<HTMLObjectElement>.code(value: String) = attr(\"code\", value)\nfun Tag<HTMLObjectElement>.code(value: Flow<String>) = attr(\"code\", value)\n\nfun Tag<HTMLObjectElement>.declare(value: Boolean, trueValue: String = \"\") = attr(\"declare\", value, trueValue)\nfun Tag<HTMLObjectElement>.declare(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"declare\", value, trueValue)\n\nfun Tag<HTMLObjectElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLObjectElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLObjectElement>.standby(value: String) = attr(\"standby\", value)\nfun Tag<HTMLObjectElement>.standby(value: Flow<String>) = attr(\"standby\", value)\n\nfun Tag<HTMLObjectElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLObjectElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLObjectElement>.codeBase(value: String) = attr(\"codebase\", value)\nfun Tag<HTMLObjectElement>.codeBase(value: Flow<String>) = attr(\"codebase\", value)\n\nfun Tag<HTMLObjectElement>.codeType(value: String) = attr(\"codetype\", value)\nfun Tag<HTMLObjectElement>.codeType(value: Flow<String>) = attr(\"codetype\", value)\n\nfun Tag<HTMLObjectElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLObjectElement>.border(value: Flow<String>) = attr(\"border\", value)\n\n\n/*\n * HTMLParamElement attributes\n */\nfun Tag<HTMLParamElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLParamElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLParamElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLParamElement>.value(value: Flow<String>) = attr(\"value\", value)\n\nfun Tag<HTMLParamElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLParamElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLParamElement>.valueType(value: String) = attr(\"valuetype\", value)\nfun Tag<HTMLParamElement>.valueType(value: Flow<String>) = attr(\"valuetype\", value)\n\n\n/*\n * HTMLVideoElement attributes\n */\nfun Tag<HTMLVideoElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLVideoElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLVideoElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLVideoElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLVideoElement>.poster(value: String) = attr(\"poster\", value)\nfun Tag<HTMLVideoElement>.poster(value: Flow<String>) = attr(\"poster\", value)\n\nfun Tag<HTMLVideoElement>.playsInline(value: Boolean, trueValue: String = \"\") = attr(\"playsinline\", value, trueValue)\nfun Tag<HTMLVideoElement>.playsInline(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"playsinline\", value, trueValue)\n\n\n/*\n * HTMLTrackElement attributes\n */\nfun Tag<HTMLTrackElement>.kind(value: String) = attr(\"kind\", value)\nfun Tag<HTMLTrackElement>.kind(value: Flow<String>) = attr(\"kind\", value)\n\nfun Tag<HTMLTrackElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLTrackElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLTrackElement>.srclang(value: String) = attr(\"srclang\", value)\nfun Tag<HTMLTrackElement>.srclang(value: Flow<String>) = attr(\"srclang\", value)\n\nfun Tag<HTMLTrackElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLTrackElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLTrackElement>.default(value: Boolean, trueValue: String = \"\") = attr(\"default\", value, trueValue)\nfun Tag<HTMLTrackElement>.default(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"default\", value, trueValue)\n\n\n/*\n * HTMLMediaElement attributes\n */\nfun Tag<HTMLMediaElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLMediaElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLMediaElement>.srcObject(value: MediaProvider?) = attr(\"srcobject\", value)\nfun Tag<HTMLMediaElement>.srcObject(value: Flow<MediaProvider?>) = attr(\"srcobject\", value)\n\nfun Tag<HTMLMediaElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLMediaElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLMediaElement>.preload(value: String) = attr(\"preload\", value)\nfun Tag<HTMLMediaElement>.preload(value: Flow<String>) = attr(\"preload\", value)\n\nfun Tag<HTMLMediaElement>.currentTime(value: Double) = attr(\"currenttime\", value)\nfun Tag<HTMLMediaElement>.currentTime(value: Flow<Double>) = attr(\"currenttime\", value)\n\nfun Tag<HTMLMediaElement>.defaultPlaybackRate(value: Double) = attr(\"defaultplaybackrate\", value)\nfun Tag<HTMLMediaElement>.defaultPlaybackRate(value: Flow<Double>) = attr(\"defaultplaybackrate\", value)\n\nfun Tag<HTMLMediaElement>.playbackRate(value: Double) {\n    domNode.playbackRate = value\n    domNode.defaultPlaybackRate = value\n    domNode.setAttribute(\"playbackrate\", value.toString())\n}\n\nfun Tag<HTMLMediaElement>.playbackRate(value: Flow<Double>) {\n    mountSimple(job, value) { v -> playbackRate(v) }\n}\n\nfun Tag<HTMLMediaElement>.autoplay(value: Boolean, trueValue: String = \"\") = attr(\"autoplay\", value, trueValue)\nfun Tag<HTMLMediaElement>.autoplay(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autoplay\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.loop(value: Boolean, trueValue: String = \"\") = attr(\"loop\", value, trueValue)\nfun Tag<HTMLMediaElement>.loop(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"loop\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.controls(value: Boolean, trueValue: String = \"\") = attr(\"controls\", value, trueValue)\nfun Tag<HTMLMediaElement>.controls(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"controls\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.volume(value: Double) = attr(\"volume\", value)\nfun Tag<HTMLMediaElement>.volume(value: Flow<Double>) = attr(\"volume\", value)\n\nfun Tag<HTMLMediaElement>.muted(value: Boolean, trueValue: String = \"\") {\n    domNode.muted = value\n    domNode.defaultMuted = value\n    if (value) domNode.setAttribute(\"muted\", trueValue)\n    else domNode.removeAttribute(\"muted\")\n}\n\nfun Tag<HTMLMediaElement>.muted(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> muted(v, trueValue) }\n}\n\nfun Tag<HTMLMediaElement>.defaultMuted(value: Boolean, trueValue: String = \"\") = attr(\"defaultmuted\", value, trueValue)\nfun Tag<HTMLMediaElement>.defaultMuted(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultmuted\", value, trueValue)\n\n\n/*\n * HTMLMapElement attributes\n */\nfun Tag<HTMLMapElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLMapElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLAreaElement attributes\n */\nfun Tag<HTMLAreaElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLAreaElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLAreaElement>.coords(value: String) = attr(\"coords\", value)\nfun Tag<HTMLAreaElement>.coords(value: Flow<String>) = attr(\"coords\", value)\n\nfun Tag<HTMLAreaElement>.shape(value: String) = attr(\"shape\", value)\nfun Tag<HTMLAreaElement>.shape(value: Flow<String>) = attr(\"shape\", value)\n\nfun Tag<HTMLAreaElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLAreaElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLAreaElement>.download(value: String) = attr(\"download\", value)\nfun Tag<HTMLAreaElement>.download(value: Flow<String>) = attr(\"download\", value)\n\nfun Tag<HTMLAreaElement>.ping(value: String) = attr(\"ping\", value)\nfun Tag<HTMLAreaElement>.ping(value: Flow<String>) = attr(\"ping\", value)\n\nfun Tag<HTMLAreaElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLAreaElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLAreaElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLAreaElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLAreaElement>.noHref(value: Boolean, trueValue: String = \"\") = attr(\"nohref\", value, trueValue)\nfun Tag<HTMLAreaElement>.noHref(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"nohref\", value, trueValue)\n\n// inherited attributes from supertype HTMLHyperlinkElementUtils\nfun Tag<HTMLAreaElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLAreaElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLAreaElement>.protocol(value: String) = attr(\"protocol\", value)\nfun Tag<HTMLAreaElement>.protocol(value: Flow<String>) = attr(\"protocol\", value)\n\nfun Tag<HTMLAreaElement>.username(value: String) = attr(\"username\", value)\nfun Tag<HTMLAreaElement>.username(value: Flow<String>) = attr(\"username\", value)\n\nfun Tag<HTMLAreaElement>.password(value: String) = attr(\"password\", value)\nfun Tag<HTMLAreaElement>.password(value: Flow<String>) = attr(\"password\", value)\n\nfun Tag<HTMLAreaElement>.host(value: String) = attr(\"host\", value)\nfun Tag<HTMLAreaElement>.host(value: Flow<String>) = attr(\"host\", value)\n\nfun Tag<HTMLAreaElement>.hostname(value: String) = attr(\"hostname\", value)\nfun Tag<HTMLAreaElement>.hostname(value: Flow<String>) = attr(\"hostname\", value)\n\nfun Tag<HTMLAreaElement>.port(value: String) = attr(\"port\", value)\nfun Tag<HTMLAreaElement>.port(value: Flow<String>) = attr(\"port\", value)\n\nfun Tag<HTMLAreaElement>.pathname(value: String) = attr(\"pathname\", value)\nfun Tag<HTMLAreaElement>.pathname(value: Flow<String>) = attr(\"pathname\", value)\n\nfun Tag<HTMLAreaElement>.search(value: String) = attr(\"search\", value)\nfun Tag<HTMLAreaElement>.search(value: Flow<String>) = attr(\"search\", value)\n\nfun Tag<HTMLAreaElement>.hash(value: String) = attr(\"hash\", value)\nfun Tag<HTMLAreaElement>.hash(value: Flow<String>) = attr(\"hash\", value)\n\n\n/*\n * HTMLTableElement attributes\n */\nfun Tag<HTMLTableElement>.caption(value: HTMLTableCaptionElement?) = attr(\"caption\", value)\nfun Tag<HTMLTableElement>.caption(value: Flow<HTMLTableCaptionElement?>) = attr(\"caption\", value)\n\nfun Tag<HTMLTableElement>.tHead(value: HTMLTableSectionElement?) = attr(\"thead\", value)\nfun Tag<HTMLTableElement>.tHead(value: Flow<HTMLTableSectionElement?>) = attr(\"thead\", value)\n\nfun Tag<HTMLTableElement>.tFoot(value: HTMLTableSectionElement?) = attr(\"tfoot\", value)\nfun Tag<HTMLTableElement>.tFoot(value: Flow<HTMLTableSectionElement?>) = attr(\"tfoot\", value)\n\nfun Tag<HTMLTableElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLTableElement>.border(value: Flow<String>) = attr(\"border\", value)\n\nfun Tag<HTMLTableElement>.frame(value: String) = attr(\"frame\", value)\nfun Tag<HTMLTableElement>.frame(value: Flow<String>) = attr(\"frame\", value)\n\nfun Tag<HTMLTableElement>.rules(value: String) = attr(\"rules\", value)\nfun Tag<HTMLTableElement>.rules(value: Flow<String>) = attr(\"rules\", value)\n\nfun Tag<HTMLTableElement>.summary(value: String) = attr(\"summary\", value)\nfun Tag<HTMLTableElement>.summary(value: Flow<String>) = attr(\"summary\", value)\n\nfun Tag<HTMLTableElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLTableElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLTableElement>.cellPadding(value: String) = attr(\"cellpadding\", value)\nfun Tag<HTMLTableElement>.cellPadding(value: Flow<String>) = attr(\"cellpadding\", value)\n\nfun Tag<HTMLTableElement>.cellSpacing(value: String) = attr(\"cellspacing\", value)\nfun Tag<HTMLTableElement>.cellSpacing(value: Flow<String>) = attr(\"cellspacing\", value)\n\n\n/*\n * HTMLTableCaptionElement attributes\n */\nfun Tag<HTMLTableCaptionElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableCaptionElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLTableColElement attributes\n */\nfun Tag<HTMLTableColElement>.span(value: Int) = attr(\"span\", value)\nfun Tag<HTMLTableColElement>.span(value: Flow<Int>) = attr(\"span\", value)\n\nfun Tag<HTMLTableColElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableColElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableColElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableColElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableColElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableColElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableColElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableColElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableColElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableColElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLTableSectionElement attributes\n */\nfun Tag<HTMLTableSectionElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableSectionElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableSectionElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableSectionElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableSectionElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableSectionElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableSectionElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableSectionElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\n\n/*\n * HTMLTableRowElement attributes\n */\nfun Tag<HTMLTableRowElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableRowElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableRowElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableRowElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableRowElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableRowElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableRowElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableRowElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableRowElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableRowElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\n\n/*\n * HTMLTableCellElement attributes\n */\nfun Tag<HTMLTableCellElement>.colSpan(value: Int) = attr(\"colspan\", value)\nfun Tag<HTMLTableCellElement>.colSpan(value: Flow<Int>) = attr(\"colspan\", value)\n\nfun Tag<HTMLTableCellElement>.rowSpan(value: Int) = attr(\"rowspan\", value)\nfun Tag<HTMLTableCellElement>.rowSpan(value: Flow<Int>) = attr(\"rowspan\", value)\n\nfun Tag<HTMLTableCellElement>.headers(value: String) = attr(\"headers\", value)\nfun Tag<HTMLTableCellElement>.headers(value: Flow<String>) = attr(\"headers\", value)\n\nfun Tag<HTMLTableCellElement>.scope(value: String) = attr(\"scope\", value)\nfun Tag<HTMLTableCellElement>.scope(value: Flow<String>) = attr(\"scope\", value)\n\nfun Tag<HTMLTableCellElement>.abbr(value: String) = attr(\"abbr\", value)\nfun Tag<HTMLTableCellElement>.abbr(value: Flow<String>) = attr(\"abbr\", value)\n\nfun Tag<HTMLTableCellElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableCellElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableCellElement>.axis(value: String) = attr(\"axis\", value)\nfun Tag<HTMLTableCellElement>.axis(value: Flow<String>) = attr(\"axis\", value)\n\nfun Tag<HTMLTableCellElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLTableCellElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLTableCellElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableCellElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLTableCellElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableCellElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableCellElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableCellElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableCellElement>.noWrap(value: Boolean, trueValue: String = \"\") = attr(\"nowrap\", value, trueValue)\nfun Tag<HTMLTableCellElement>.noWrap(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"nowrap\", value, trueValue)\n\nfun Tag<HTMLTableCellElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableCellElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableCellElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableCellElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\n\n/*\n * HTMLFormElement attributes\n */\nfun Tag<HTMLFormElement>.acceptCharset(value: String) = attr(\"acceptcharset\", value)\nfun Tag<HTMLFormElement>.acceptCharset(value: Flow<String>) = attr(\"acceptcharset\", value)\n\nfun Tag<HTMLFormElement>.action(value: String) = attr(\"action\", value)\nfun Tag<HTMLFormElement>.action(value: Flow<String>) = attr(\"action\", value)\n\nfun Tag<HTMLFormElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLFormElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLFormElement>.enctype(value: String) = attr(\"enctype\", value)\nfun Tag<HTMLFormElement>.enctype(value: Flow<String>) = attr(\"enctype\", value)\n\nfun Tag<HTMLFormElement>.encoding(value: String) = attr(\"encoding\", value)\nfun Tag<HTMLFormElement>.encoding(value: Flow<String>) = attr(\"encoding\", value)\n\nfun Tag<HTMLFormElement>.method(value: String) = attr(\"method\", value)\nfun Tag<HTMLFormElement>.method(value: Flow<String>) = attr(\"method\", value)\n\nfun Tag<HTMLFormElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFormElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLFormElement>.noValidate(value: Boolean, trueValue: String = \"\") = attr(\"novalidate\", value, trueValue)\nfun Tag<HTMLFormElement>.noValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"novalidate\", value, trueValue)\n\nfun Tag<HTMLFormElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLFormElement>.target(value: Flow<String>) = attr(\"target\", value)\n\n\n/*\n * HTMLLabelElement attributes\n */\nfun Tag<HTMLLabelElement>.`for`(value: String) = attr(\"for\", value)\nfun Tag<HTMLLabelElement>.`for`(value: Flow<String>) = attr(\"for\", value)\n\n\n/*\n * HTMLInputElement attributes\n */\nfun Tag<HTMLInputElement>.accept(value: String) = attr(\"accept\", value)\nfun Tag<HTMLInputElement>.accept(value: Flow<String>) = attr(\"accept\", value)\n\nfun Tag<HTMLInputElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLInputElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLInputElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLInputElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLInputElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLInputElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLInputElement>.defaultChecked(value: Boolean, trueValue: String = \"\") = attr(\"defaultchecked\", value, trueValue)\nfun Tag<HTMLInputElement>.defaultChecked(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultchecked\", value, trueValue)\n\nfun Tag<HTMLInputElement>.checked(value: Boolean, trueValue: String = \"\") {\n    domNode.checked = value\n    domNode.defaultChecked = value\n    if (value) domNode.setAttribute(\"checked\", trueValue)\n    else domNode.removeAttribute(\"checked\")\n}\n\nfun Tag<HTMLInputElement>.checked(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> checked(v, trueValue) }\n}\n\nfun Tag<HTMLInputElement>.dirName(value: String) = attr(\"dirname\", value)\nfun Tag<HTMLInputElement>.dirName(value: Flow<String>) = attr(\"dirname\", value)\n\nfun Tag<HTMLInputElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLInputElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLInputElement>.formAction(value: String) = attr(\"formaction\", value)\nfun Tag<HTMLInputElement>.formAction(value: Flow<String>) = attr(\"formaction\", value)\n\nfun Tag<HTMLInputElement>.formEnctype(value: String) = attr(\"formenctype\", value)\nfun Tag<HTMLInputElement>.formEnctype(value: Flow<String>) = attr(\"formenctype\", value)\n\nfun Tag<HTMLInputElement>.formMethod(value: String) = attr(\"formmethod\", value)\nfun Tag<HTMLInputElement>.formMethod(value: Flow<String>) = attr(\"formmethod\", value)\n\nfun Tag<HTMLInputElement>.formNoValidate(value: Boolean, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\nfun Tag<HTMLInputElement>.formNoValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\n\nfun Tag<HTMLInputElement>.formTarget(value: String) = attr(\"formtarget\", value)\nfun Tag<HTMLInputElement>.formTarget(value: Flow<String>) = attr(\"formtarget\", value)\n\nfun Tag<HTMLInputElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLInputElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLInputElement>.indeterminate(value: Boolean, trueValue: String = \"\") = attr(\"indeterminate\", value, trueValue)\nfun Tag<HTMLInputElement>.indeterminate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"indeterminate\", value, trueValue)\n\nfun Tag<HTMLInputElement>.inputMode(value: String) = attr(\"inputmode\", value)\nfun Tag<HTMLInputElement>.inputMode(value: Flow<String>) = attr(\"inputmode\", value)\n\nfun Tag<HTMLInputElement>.max(value: String) = attr(\"max\", value)\nfun Tag<HTMLInputElement>.max(value: Flow<String>) = attr(\"max\", value)\n\nfun Tag<HTMLInputElement>.maxLength(value: Int) = attr(\"maxlength\", value)\nfun Tag<HTMLInputElement>.maxLength(value: Flow<Int>) = attr(\"maxlength\", value)\n\nfun Tag<HTMLInputElement>.min(value: String) = attr(\"min\", value)\nfun Tag<HTMLInputElement>.min(value: Flow<String>) = attr(\"min\", value)\n\nfun Tag<HTMLInputElement>.minLength(value: Int) = attr(\"minlength\", value)\nfun Tag<HTMLInputElement>.minLength(value: Flow<Int>) = attr(\"minlength\", value)\n\nfun Tag<HTMLInputElement>.multiple(value: Boolean, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\nfun Tag<HTMLInputElement>.multiple(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\n\nfun Tag<HTMLInputElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLInputElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLInputElement>.pattern(value: String) = attr(\"pattern\", value)\nfun Tag<HTMLInputElement>.pattern(value: Flow<String>) = attr(\"pattern\", value)\n\nfun Tag<HTMLInputElement>.placeholder(value: String) = attr(\"placeholder\", value)\nfun Tag<HTMLInputElement>.placeholder(value: Flow<String>) = attr(\"placeholder\", value)\n\nfun Tag<HTMLInputElement>.readOnly(value: Boolean, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\nfun Tag<HTMLInputElement>.readOnly(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\n\nfun Tag<HTMLInputElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLInputElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLInputElement>.size(value: Int) = attr(\"size\", value)\nfun Tag<HTMLInputElement>.size(value: Flow<Int>) = attr(\"size\", value)\n\nfun Tag<HTMLInputElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLInputElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLInputElement>.step(value: String) = attr(\"step\", value)\nfun Tag<HTMLInputElement>.step(value: Flow<String>) = attr(\"step\", value)\n\nfun Tag<HTMLInputElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLInputElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLInputElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLInputElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLInputElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLInputElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\nfun Tag<HTMLInputElement>.valueAsDate(value: String) = attr(\"valueasdate\", value)\nfun Tag<HTMLInputElement>.valueAsDate(value: Flow<String>) = attr(\"valueasdate\", value)\n\nfun Tag<HTMLInputElement>.valueAsNumber(value: Double) = attr(\"valueasnumber\", value)\nfun Tag<HTMLInputElement>.valueAsNumber(value: Flow<Double>) = attr(\"valueasnumber\", value)\n\nfun Tag<HTMLInputElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLInputElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLInputElement>.selectionStart(value: Int?) = attr(\"selectionstart\", value)\nfun Tag<HTMLInputElement>.selectionStart(value: Flow<Int?>) = attr(\"selectionstart\", value)\n\nfun Tag<HTMLInputElement>.selectionEnd(value: Int?) = attr(\"selectionend\", value)\nfun Tag<HTMLInputElement>.selectionEnd(value: Flow<Int?>) = attr(\"selectionend\", value)\n\nfun Tag<HTMLInputElement>.selectionDirection(value: String?) = attr(\"selectiondirection\", value)\nfun Tag<HTMLInputElement>.selectionDirection(value: Flow<String?>) = attr(\"selectiondirection\", value)\n\nfun Tag<HTMLInputElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLInputElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLInputElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLInputElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\n\n/*\n * HTMLButtonElement attributes\n */\nfun Tag<HTMLButtonElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLButtonElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLButtonElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.formAction(value: String) = attr(\"formaction\", value)\nfun Tag<HTMLButtonElement>.formAction(value: Flow<String>) = attr(\"formaction\", value)\n\nfun Tag<HTMLButtonElement>.formEnctype(value: String) = attr(\"formenctype\", value)\nfun Tag<HTMLButtonElement>.formEnctype(value: Flow<String>) = attr(\"formenctype\", value)\n\nfun Tag<HTMLButtonElement>.formMethod(value: String) = attr(\"formmethod\", value)\nfun Tag<HTMLButtonElement>.formMethod(value: Flow<String>) = attr(\"formmethod\", value)\n\nfun Tag<HTMLButtonElement>.formNoValidate(value: Boolean, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\nfun Tag<HTMLButtonElement>.formNoValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.formTarget(value: String) = attr(\"formtarget\", value)\nfun Tag<HTMLButtonElement>.formTarget(value: Flow<String>) = attr(\"formtarget\", value)\n\nfun Tag<HTMLButtonElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLButtonElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLButtonElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLButtonElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLButtonElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLButtonElement>.value(value: Flow<String>) = attr(\"value\", value)\n\nfun Tag<HTMLButtonElement>.menu(value: HTMLMenuElement?) = attr(\"menu\", value)\nfun Tag<HTMLButtonElement>.menu(value: Flow<HTMLMenuElement?>) = attr(\"menu\", value)\n\n\n/*\n * HTMLSelectElement attributes\n */\nfun Tag<HTMLSelectElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLSelectElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLSelectElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLSelectElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLSelectElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.multiple(value: Boolean, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\nfun Tag<HTMLSelectElement>.multiple(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLSelectElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLSelectElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLSelectElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.size(value: Int) = attr(\"size\", value)\nfun Tag<HTMLSelectElement>.size(value: Flow<Int>) = attr(\"size\", value)\n\nfun Tag<HTMLSelectElement>.length(value: Int) = attr(\"length\", value)\nfun Tag<HTMLSelectElement>.length(value: Flow<Int>) = attr(\"length\", value)\n\nfun Tag<HTMLSelectElement>.selectedIndex(value: Int) = attr(\"selectedindex\", value)\nfun Tag<HTMLSelectElement>.selectedIndex(value: Flow<Int>) = attr(\"selectedindex\", value)\n\nfun Tag<HTMLSelectElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLSelectElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n\n/*\n * HTMLOptGroupElement attributes\n */\nfun Tag<HTMLOptGroupElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLOptGroupElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLOptGroupElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLOptGroupElement>.label(value: Flow<String>) = attr(\"label\", value)\n\n\n/*\n * HTMLOptionElement attributes\n */\nfun Tag<HTMLOptionElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLOptionElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLOptionElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLOptionElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLOptionElement>.defaultSelected(value: Boolean, trueValue: String = \"\") = attr(\"defaultselected\", value, trueValue)\nfun Tag<HTMLOptionElement>.defaultSelected(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultselected\", value, trueValue)\n\nfun Tag<HTMLOptionElement>.selected(value: Boolean, trueValue: String = \"\") {\n    domNode.selected = value\n    domNode.defaultSelected = value\n    if (value) domNode.setAttribute(\"selected\", trueValue)\n    else domNode.removeAttribute(\"selected\")\n}\n\nfun Tag<HTMLOptionElement>.selected(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> selected(v, trueValue) }\n}\n\nfun Tag<HTMLOptionElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLOptionElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n/*\n * HTMLTextAreaElement attributes\n */\nfun Tag<HTMLTextAreaElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLTextAreaElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLTextAreaElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.cols(value: Int) = attr(\"cols\", value)\nfun Tag<HTMLTextAreaElement>.cols(value: Flow<Int>) = attr(\"cols\", value)\n\nfun Tag<HTMLTextAreaElement>.dirName(value: String) = attr(\"dirname\", value)\nfun Tag<HTMLTextAreaElement>.dirName(value: Flow<String>) = attr(\"dirname\", value)\n\nfun Tag<HTMLTextAreaElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.inputMode(value: String) = attr(\"inputmode\", value)\nfun Tag<HTMLTextAreaElement>.inputMode(value: Flow<String>) = attr(\"inputmode\", value)\n\nfun Tag<HTMLTextAreaElement>.maxLength(value: Int) = attr(\"maxlength\", value)\nfun Tag<HTMLTextAreaElement>.maxLength(value: Flow<Int>) = attr(\"maxlength\", value)\n\nfun Tag<HTMLTextAreaElement>.minLength(value: Int) = attr(\"minlength\", value)\nfun Tag<HTMLTextAreaElement>.minLength(value: Flow<Int>) = attr(\"minlength\", value)\n\nfun Tag<HTMLTextAreaElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLTextAreaElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLTextAreaElement>.placeholder(value: String) = attr(\"placeholder\", value)\nfun Tag<HTMLTextAreaElement>.placeholder(value: Flow<String>) = attr(\"placeholder\", value)\n\nfun Tag<HTMLTextAreaElement>.readOnly(value: Boolean, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.readOnly(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.rows(value: Int) = attr(\"rows\", value)\nfun Tag<HTMLTextAreaElement>.rows(value: Flow<Int>) = attr(\"rows\", value)\n\nfun Tag<HTMLTextAreaElement>.wrap(value: String) = attr(\"wrap\", value)\nfun Tag<HTMLTextAreaElement>.wrap(value: Flow<String>) = attr(\"wrap\", value)\n\nfun Tag<HTMLTextAreaElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLTextAreaElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLTextAreaElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLTextAreaElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\nfun Tag<HTMLTextAreaElement>.selectionStart(value: Int?) = attr(\"selectionstart\", value)\nfun Tag<HTMLTextAreaElement>.selectionStart(value: Flow<Int?>) = attr(\"selectionstart\", value)\n\nfun Tag<HTMLTextAreaElement>.selectionEnd(value: Int?) = attr(\"selectionend\", value)\nfun Tag<HTMLTextAreaElement>.selectionEnd(value: Flow<Int?>) = attr(\"selectionend\", value)\n\nfun Tag<HTMLTextAreaElement>.selectionDirection(value: String?) = attr(\"selectiondirection\", value)\nfun Tag<HTMLTextAreaElement>.selectionDirection(value: Flow<String?>) = attr(\"selectiondirection\", value)\n\n\n/*\n * HTMLKeygenElement attributes\n */\nfun Tag<HTMLKeygenElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLKeygenElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLKeygenElement>.challenge(value: String) = attr(\"challenge\", value)\nfun Tag<HTMLKeygenElement>.challenge(value: Flow<String>) = attr(\"challenge\", value)\n\nfun Tag<HTMLKeygenElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLKeygenElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLKeygenElement>.keytype(value: String) = attr(\"keytype\", value)\nfun Tag<HTMLKeygenElement>.keytype(value: Flow<String>) = attr(\"keytype\", value)\n\nfun Tag<HTMLKeygenElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLKeygenElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLOutputElement attributes\n */\nfun Tag<HTMLOutputElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLOutputElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLOutputElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLOutputElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLOutputElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLOutputElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\n\n/*\n * HTMLProgressElement attributes\n */\nfun Tag<HTMLProgressElement>.value(value: Double) = attr(\"value\", value)\nfun Tag<HTMLProgressElement>.value(value: Flow<Double>) = attr(\"value\", value)\n\nfun Tag<HTMLProgressElement>.max(value: Double) = attr(\"max\", value)\nfun Tag<HTMLProgressElement>.max(value: Flow<Double>) = attr(\"max\", value)\n\n\n/*\n * HTMLMeterElement attributes\n */\nfun Tag<HTMLMeterElement>.value(value: Double) = attr(\"value\", value)\nfun Tag<HTMLMeterElement>.value(value: Flow<Double>) = attr(\"value\", value)\n\nfun Tag<HTMLMeterElement>.min(value: Double) = attr(\"min\", value)\nfun Tag<HTMLMeterElement>.min(value: Flow<Double>) = attr(\"min\", value)\n\nfun Tag<HTMLMeterElement>.max(value: Double) = attr(\"max\", value)\nfun Tag<HTMLMeterElement>.max(value: Flow<Double>) = attr(\"max\", value)\n\nfun Tag<HTMLMeterElement>.low(value: Double) = attr(\"low\", value)\nfun Tag<HTMLMeterElement>.low(value: Flow<Double>) = attr(\"low\", value)\n\nfun Tag<HTMLMeterElement>.high(value: Double) = attr(\"high\", value)\nfun Tag<HTMLMeterElement>.high(value: Flow<Double>) = attr(\"high\", value)\n\nfun Tag<HTMLMeterElement>.optimum(value: Double) = attr(\"optimum\", value)\nfun Tag<HTMLMeterElement>.optimum(value: Flow<Double>) = attr(\"optimum\", value)\n\n\n/*\n * HTMLFieldSetElement attributes\n */\nfun Tag<HTMLFieldSetElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLFieldSetElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLFieldSetElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFieldSetElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLLegendElement attributes\n */\nfun Tag<HTMLLegendElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLLegendElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLDetailsElement attributes\n */\nfun Tag<HTMLDetailsElement>.open(value: Boolean, trueValue: String = \"\") = attr(\"open\", value, trueValue)\nfun Tag<HTMLDetailsElement>.open(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"open\", value, trueValue)\n\n\n/*\n * HTMLMenuElement attributes\n */\nfun Tag<HTMLMenuElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLMenuElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLMenuElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLMenuElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLMenuElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLMenuElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLMenuItemElement attributes\n */\nfun Tag<HTMLMenuItemElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLMenuItemElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLMenuItemElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLMenuItemElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLMenuItemElement>.icon(value: String) = attr(\"icon\", value)\nfun Tag<HTMLMenuItemElement>.icon(value: Flow<String>) = attr(\"icon\", value)\n\nfun Tag<HTMLMenuItemElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLMenuItemElement>.checked(value: Boolean, trueValue: String = \"\") = attr(\"checked\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.checked(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"checked\", value, trueValue)\n\nfun Tag<HTMLMenuItemElement>.radiogroup(value: String) = attr(\"radiogroup\", value)\nfun Tag<HTMLMenuItemElement>.radiogroup(value: Flow<String>) = attr(\"radiogroup\", value)\n\nfun Tag<HTMLMenuItemElement>.default(value: Boolean, trueValue: String = \"\") = attr(\"default\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.default(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"default\", value, trueValue)\n\n\n/*\n * HTMLDialogElement attributes\n */\nfun Tag<HTMLDialogElement>.open(value: Boolean, trueValue: String = \"\") = attr(\"open\", value, trueValue)\nfun Tag<HTMLDialogElement>.open(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"open\", value, trueValue)\n\nfun Tag<HTMLDialogElement>.returnValue(value: String) = attr(\"returnvalue\", value)\nfun Tag<HTMLDialogElement>.returnValue(value: Flow<String>) = attr(\"returnvalue\", value)\n\n\n/*\n * HTMLScriptElement attributes\n */\nfun Tag<HTMLScriptElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLScriptElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLScriptElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLScriptElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLScriptElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLScriptElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLScriptElement>.async(value: Boolean, trueValue: String = \"\") = attr(\"async\", value, trueValue)\nfun Tag<HTMLScriptElement>.async(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"async\", value, trueValue)\n\nfun Tag<HTMLScriptElement>.defer(value: Boolean, trueValue: String = \"\") = attr(\"defer\", value, trueValue)\nfun Tag<HTMLScriptElement>.defer(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defer\", value, trueValue)\n\nfun Tag<HTMLScriptElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLScriptElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLScriptElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLScriptElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLScriptElement>.event(value: String) = attr(\"event\", value)\nfun Tag<HTMLScriptElement>.event(value: Flow<String>) = attr(\"event\", value)\n\nfun Tag<HTMLScriptElement>.`for`(value: String) = attr(\"for\", value)\nfun Tag<HTMLScriptElement>.`for`(value: Flow<String>) = attr(\"for\", value)\n\n\n/*\n * HTMLSlotElement attributes\n */\nfun Tag<HTMLSlotElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLSlotElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLCanvasElement attributes\n */\nfun Tag<HTMLCanvasElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLCanvasElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLCanvasElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLCanvasElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\n\n/*\n * HTMLAppletElement attributes\n */\nfun Tag<HTMLAppletElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLAppletElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLAppletElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLAppletElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLAppletElement>.archive(value: String) = attr(\"archive\", value)\nfun Tag<HTMLAppletElement>.archive(value: Flow<String>) = attr(\"archive\", value)\n\nfun Tag<HTMLAppletElement>.code(value: String) = attr(\"code\", value)\nfun Tag<HTMLAppletElement>.code(value: Flow<String>) = attr(\"code\", value)\n\nfun Tag<HTMLAppletElement>.codeBase(value: String) = attr(\"codebase\", value)\nfun Tag<HTMLAppletElement>.codeBase(value: Flow<String>) = attr(\"codebase\", value)\n\nfun Tag<HTMLAppletElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLAppletElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLAppletElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLAppletElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLAppletElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLAppletElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLAppletElement>.`object`(value: String) = attr(\"object\", value)\nfun Tag<HTMLAppletElement>.`object`(value: Flow<String>) = attr(\"object\", value)\n\nfun Tag<HTMLAppletElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLAppletElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLAppletElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLAppletElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLMarqueeElement attributes\n */\nfun Tag<HTMLMarqueeElement>.behavior(value: String) = attr(\"behavior\", value)\nfun Tag<HTMLMarqueeElement>.behavior(value: Flow<String>) = attr(\"behavior\", value)\n\nfun Tag<HTMLMarqueeElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLMarqueeElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLMarqueeElement>.direction(value: String) = attr(\"direction\", value)\nfun Tag<HTMLMarqueeElement>.direction(value: Flow<String>) = attr(\"direction\", value)\n\nfun Tag<HTMLMarqueeElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLMarqueeElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLMarqueeElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLMarqueeElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLMarqueeElement>.loop(value: Int) = attr(\"loop\", value)\nfun Tag<HTMLMarqueeElement>.loop(value: Flow<Int>) = attr(\"loop\", value)\n\nfun Tag<HTMLMarqueeElement>.scrollAmount(value: Int) = attr(\"scrollamount\", value)\nfun Tag<HTMLMarqueeElement>.scrollAmount(value: Flow<Int>) = attr(\"scrollamount\", value)\n\nfun Tag<HTMLMarqueeElement>.scrollDelay(value: Int) = attr(\"scrolldelay\", value)\nfun Tag<HTMLMarqueeElement>.scrollDelay(value: Flow<Int>) = attr(\"scrolldelay\", value)\n\nfun Tag<HTMLMarqueeElement>.trueSpeed(value: Boolean, trueValue: String = \"\") = attr(\"truespeed\", value, trueValue)\nfun Tag<HTMLMarqueeElement>.trueSpeed(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"truespeed\", value, trueValue)\n\nfun Tag<HTMLMarqueeElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLMarqueeElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLMarqueeElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLMarqueeElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLFrameSetElement attributes\n */\nfun Tag<HTMLFrameSetElement>.cols(value: String) = attr(\"cols\", value)\nfun Tag<HTMLFrameSetElement>.cols(value: Flow<String>) = attr(\"cols\", value)\n\nfun Tag<HTMLFrameSetElement>.rows(value: String) = attr(\"rows\", value)\nfun Tag<HTMLFrameSetElement>.rows(value: Flow<String>) = attr(\"rows\", value)\n\n\n/*\n * HTMLFrameElement attributes\n */\nfun Tag<HTMLFrameElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFrameElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLFrameElement>.scrolling(value: String) = attr(\"scrolling\", value)\nfun Tag<HTMLFrameElement>.scrolling(value: Flow<String>) = attr(\"scrolling\", value)\n\nfun Tag<HTMLFrameElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLFrameElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLFrameElement>.frameBorder(value: String) = attr(\"frameborder\", value)\nfun Tag<HTMLFrameElement>.frameBorder(value: Flow<String>) = attr(\"frameborder\", value)\n\nfun Tag<HTMLFrameElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLFrameElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLFrameElement>.noResize(value: Boolean, trueValue: String = \"\") = attr(\"noresize\", value, trueValue)\nfun Tag<HTMLFrameElement>.noResize(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"noresize\", value, trueValue)\n\nfun Tag<HTMLFrameElement>.marginHeight(value: String) = attr(\"marginheight\", value)\nfun Tag<HTMLFrameElement>.marginHeight(value: Flow<String>) = attr(\"marginheight\", value)\n\nfun Tag<HTMLFrameElement>.marginWidth(value: String) = attr(\"marginwidth\", value)\nfun Tag<HTMLFrameElement>.marginWidth(value: Flow<String>) = attr(\"marginwidth\", value)\n\n\n/*\n * HTMLDirectoryElement attributes\n */\nfun Tag<HTMLDirectoryElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLDirectoryElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLFontElement attributes\n */\nfun Tag<HTMLFontElement>.color(value: String) = attr(\"color\", value)\nfun Tag<HTMLFontElement>.color(value: Flow<String>) = attr(\"color\", value)\n\nfun Tag<HTMLFontElement>.face(value: String) = attr(\"face\", value)\nfun Tag<HTMLFontElement>.face(value: Flow<String>) = attr(\"face\", value)\n\nfun Tag<HTMLFontElement>.size(value: String) = attr(\"size\", value)\nfun Tag<HTMLFontElement>.size(value: Flow<String>) = attr(\"size\", value)\n","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.browser.window\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.*\nimport org.w3c.dom.Window\nimport org.w3c.dom.clipboard.ClipboardEvent\nimport org.w3c.dom.events.*\nimport org.w3c.xhr.ProgressEvent\n\n/**\n * Contains all javascript event types.\n * Take a look [here](https://www.w3schools.com/jsref/dom_obj_event.asp).\n *\n * Sometimes it is necessary to use a more generic type (like [Event])\n * because the type that is offered to the listener is not always consistent\n * (on different browsers, different actions, etc.)\n */\ninterface WithEvents<out T : EventTarget> {\n\n    companion object {\n        private const val ABORT = \"abort\"\n        private const val AFTERPRINT = \"afterprint\"\n        private const val ANIMATIONEND = \"animationend\"\n        private const val ANIMATIONITERATION = \"animationiteration\"\n        private const val ANIMATIONSTART = \"animationstart\"\n        private const val BEFOREPRINT = \"beforeprint\"\n        private const val BEFOREUNLOAD = \"beforeunload\"\n        private const val BLUR = \"blur\"\n        private const val CANPLAY = \"canplay\"\n        private const val CANPLAYTHROUGH = \"canplaythrough\"\n        private const val CHANGE = \"change\"\n        private const val CLICK = \"click\"\n        private const val CONTEXTMENU = \"contextmenu\"\n        private const val COPY = \"copy\"\n        private const val CUT = \"cut\"\n        private const val DBLCLICK = \"dblclick\"\n        private const val DRAG = \"drag\"\n        private const val DRAGEND = \"dragend\"\n        private const val DRAGENTER = \"dragenter\"\n        private const val DRAGLEAVE = \"dragleave\"\n        private const val DRAGOVER = \"dragover\"\n        private const val DRAGSTART = \"dragstart\"\n        private const val DROP = \"drop\"\n        private const val DURATIONCHANGE = \"durationchange\"\n        private const val ENDED = \"ended\"\n        private const val ERROR = \"error\"\n        private const val FOCUS = \"focus\"\n        private const val FOCUSIN = \"focusin\"\n        private const val FOCUSOUT = \"focusout\"\n        private const val FULLSCREENCHANGE = \"fullscreenchange\"\n        private const val FULLSCREENERROR = \"fullscreenerror\"\n        private const val HASHCHANGE = \"hashchange\"\n        private const val INPUT = \"input\"\n        private const val INVALID = \"invalid\"\n        private const val KEYDOWN = \"keydown\"\n        private const val KEYPRESS = \"keypress\"\n        private const val KEYUP = \"keyup\"\n        private const val LOAD = \"load\"\n        private const val LOADEDDATA = \"loadeddata\"\n        private const val LOADEDMETADATA = \"loadedmetadata\"\n        private const val MOUSEENTER = \"mouseenter\"\n        private const val MOUSELEAVE = \"mouseleave\"\n        private const val MOUSEMOVE = \"mousemove\"\n        private const val MOUSEOVER = \"mouseover\"\n        private const val MOUSEOUT = \"mouseout\"\n        private const val MOUSEUP = \"mouseup\"\n        private const val OFFLINE = \"offline\"\n        private const val ONLINE = \"online\"\n        private const val OPEN = \"open\"\n        private const val PAGEHIDE = \"pagehide\"\n        private const val PAGESHOW = \"pageshow\"\n        private const val PASTE = \"paste\"\n        private const val LOADSTART = \"loadstart\"\n        private const val MESSAGE = \"message\"\n        private const val MOUSEDOWN = \"mousedown\"\n        private const val PAUSE = \"pause\"\n        private const val PLAY = \"play\"\n        private const val PLAYING = \"playing\"\n        private const val POPSTATE = \"popstate\"\n        private const val PROGRESS = \"progress\"\n        private const val RATECHANGE = \"ratechange\"\n        private const val RESIZE = \"resize\"\n        private const val RESET = \"reset\"\n        private const val SCROLL = \"scroll\"\n        private const val SEARCH = \"search\"\n        private const val SEEKED = \"seeked\"\n        private const val SEEKING = \"seeking\"\n        private const val SELECT = \"select\"\n        private const val SHOW = \"show\"\n        private const val STALLED = \"stalled\"\n        private const val STORAGE = \"storage\"\n        private const val SUBMIT = \"submit\"\n        private const val SUSPEND = \"suspend\"\n        private const val TIMEUPDATE = \"timeupdate\"\n        private const val TOGGLE = \"toggle\"\n        private const val TOUCHCANCEL = \"touchcancel\"\n        private const val TOUCHEND = \"touchend\"\n        private const val TOUCHMOVE = \"touchmove\"\n        private const val TOUCHSTART = \"touchstart\"\n        private const val TRANSITIONEND = \"transitionend\"\n        private const val UNLOAD = \"unload\"\n        private const val VOLUMECHANGE = \"volumechange\"\n        private const val WAITING = \"waiting\"\n        private const val WHEEL = \"wheel\"\n    }\n\n    /**\n     * Creates an [Listener] for the given event [eventName].\n     *\n     * @param eventName the [DOM-API name](https://developer.mozilla.org/en-US/docs/Web/API/Element#events) of an event.\n     * Can be a custom name.\n     * @param capture if `true`, activates capturing mode, else remains in `bubble` mode (default)\n     * @param selector optional lambda expression to select specific events with option to manipulate it\n     * (e.g. `preventDefault` or `stopPropagation`).\n     *\n     * @return a [Listener]-object, which is more or less a [Flow] of the specific `Event`-type.\n     */\n    fun <X : Event> subscribe(\n        eventName: String,\n        capture: Boolean = false,\n        selector: X.() -> Boolean = { true }\n    ): Listener<X, T>\n\n    /**\n     * occurs when the loading of a media is aborted\n     */\n    val aborts: Listener<Event, T> get() = subscribe(ABORT)\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun aborts(init: Event.() -> Unit): Listener<Event, T> = subscribe(ABORT) { init(); true }\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun abortsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ABORT, selector = selector)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     */\n    val afterprints: Listener<Event, T> get() = subscribe(AFTERPRINT)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprints(init: Event.() -> Unit): Listener<Event, T> = subscribe(AFTERPRINT) { init(); true }\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprintsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(AFTERPRINT, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val animationends: Listener<Event, T> get() = subscribe(ANIMATIONEND)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationends(init: Event.() -> Unit): Listener<Event, T> = subscribe(ANIMATIONEND) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationendsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONEND, selector = selector)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     */\n    val animationiterations: Listener<Event, T> get() = subscribe(ANIMATIONITERATION)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterations(init: Event.() -> Unit): Listener<Event, T> = subscribe(ANIMATIONITERATION) { init(); true }\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterationsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONITERATION, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has started\n     */\n    val animationstarts: Listener<Event, T> get() = subscribe(ANIMATIONSTART)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstarts(init: Event.() -> Unit): Listener<Event, T> = subscribe(ANIMATIONSTART) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has started\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstartsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONSTART, selector = selector)\n\n    /**\n     * occurs when a page is about to be printed\n     */\n    val beforeprints: Listener<Event, T> get() = subscribe(BEFOREPRINT)\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprints(init: Event.() -> Unit): Listener<Event, T> = subscribe(BEFOREPRINT) { init(); true }\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprintsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(BEFOREPRINT, selector = selector)\n\n    /**\n     * occurs before the document is about to be unloaded\n     */\n    val beforeunloads: Listener<Event, T> get() = subscribe(BEFOREUNLOAD)\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloads(init: Event.() -> Unit): Listener<Event, T> = subscribe(BEFOREUNLOAD) { init(); true }\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloadsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(BEFOREUNLOAD, selector = selector)\n\n    /**\n     * occurs when an element loses focus\n     */\n    val blurs: Listener<FocusEvent, T> get() = subscribe(BLUR)\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blurs(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(BLUR) { init(); true }\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blursIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> = subscribe(BLUR, selector = selector)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     */\n    val canplays: Listener<Event, T> get() = subscribe(CANPLAY)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplays(init: Event.() -> Unit): Listener<Event, T> = subscribe(CANPLAY) { init(); true }\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaysIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(CANPLAY, selector = selector)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     */\n    val canplaythroughs: Listener<Event, T> get() = subscribe(CANPLAYTHROUGH)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughs(init: Event.() -> Unit): Listener<Event, T> = subscribe(CANPLAYTHROUGH) { init(); true }\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CANPLAYTHROUGH, selector = selector)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     */\n    val changes: Listener<Event, T> get() = subscribe(CHANGE)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changes(init: Event.() -> Unit): Listener<Event, T> = subscribe(CHANGE) { init(); true }\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(CHANGE, selector = selector)\n\n    /**\n     * occurs when the user clicks on an element\n     */\n    val clicks: Listener<MouseEvent, T> get() = subscribe(CLICK)\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicks(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(CLICK) { init(); true }\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicksIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> = subscribe(CLICK, selector = selector)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     */\n    val contextmenus: Listener<MouseEvent, T> get() = subscribe(CONTEXTMENU)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenus(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(CONTEXTMENU) { init(); true }\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenusIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(CONTEXTMENU, selector = selector)\n\n    /**\n     * occurs when the user copies the content of an element\n     */\n    val copys: Listener<ClipboardEvent, T> get() = subscribe(COPY)\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copys(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> = subscribe(COPY) { init(); true }\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copysIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(COPY, selector = selector)\n\n    /**\n     * occurs when the user cuts the content of an element\n     */\n    val cuts: Listener<ClipboardEvent, T> get() = subscribe(CUT)\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cuts(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> = subscribe(CUT) { init(); true }\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cutsIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(CUT, selector = selector)\n\n    /**\n     * occurs when the user double-clicks on an element\n     */\n    val dblclicks: Listener<MouseEvent, T> get() = subscribe(DBLCLICK)\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicks(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(DBLCLICK) { init(); true }\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicksIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(DBLCLICK, selector = selector)\n\n    /**\n     * occurs when an element is being dragged\n     */\n    val drags: Listener<DragEvent, T> get() = subscribe(DRAG)\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun drags(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAG) { init(); true }\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> = subscribe(DRAG, selector = selector)\n\n    /**\n     * occurs when the user has finished dragging an element\n     */\n    val dragends: Listener<DragEvent, T> get() = subscribe(DRAGEND)\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragends(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGEND) { init(); true }\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragendsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> = subscribe(DRAGEND, selector = selector)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     */\n    val dragenters: Listener<DragEvent, T> get() = subscribe(DRAGENTER)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragenters(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGENTER) { init(); true }\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragentersIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGENTER, selector = selector)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     */\n    val dragleaves: Listener<DragEvent, T> get() = subscribe(DRAGLEAVE)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleaves(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGLEAVE) { init(); true }\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleavesIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGLEAVE, selector = selector)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     */\n    val dragovers: Listener<DragEvent, T> get() = subscribe(DRAGOVER)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragovers(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGOVER) { init(); true }\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragoversIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGOVER, selector = selector)\n\n    /**\n     * occurs when the user starts to drag an element\n     */\n    val dragstarts: Listener<DragEvent, T> get() = subscribe(DRAGSTART)\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstarts(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGSTART) { init(); true }\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstartsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGSTART, selector = selector)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     */\n    val drops: Listener<DragEvent, T> get() = subscribe(DROP)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun drops(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DROP) { init(); true }\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dropsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> = subscribe(DROP, selector = selector)\n\n    /**\n     * occurs when the duration of the media is changed\n     */\n    val durationchanges: Listener<Event, T> get() = subscribe(DURATIONCHANGE)\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(DURATIONCHANGE) { init(); true }\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchangesIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(DURATIONCHANGE, selector = selector)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     */\n    val endeds: Listener<Event, T> get() = subscribe(ENDED)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endeds(init: Event.() -> Unit): Listener<Event, T> = subscribe(ENDED) { init(); true }\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endedsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ENDED, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val errors: Listener<Event, T> get() = subscribe(ERROR)\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errors(init: Event.() -> Unit): Listener<Event, T> = subscribe(ERROR) { init(); true }\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errorsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ERROR, selector = selector)\n\n    /**\n     * occurs when an element gets focus\n     */\n    val focuss: Listener<FocusEvent, T> get() = subscribe(FOCUS)\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focuss(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUS) { init(); true }\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focussIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> = subscribe(FOCUS, selector = selector)\n\n    /**\n     * occurs when an element is about to get focus\n     */\n    val focusins: Listener<FocusEvent, T> get() = subscribe(FOCUSIN)\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusins(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUSIN) { init(); true }\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusinsIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSIN, selector = selector)\n\n    /**\n     * occurs when an element is about to lose focus\n     */\n    val focusouts: Listener<FocusEvent, T> get() = subscribe(FOCUSOUT)\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusouts(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUSOUT) { init(); true }\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusoutsIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSOUT, selector = selector)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     */\n    val fullscreenchanges: Listener<Event, T> get() = subscribe(FULLSCREENCHANGE)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(FULLSCREENCHANGE) { init(); true }\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchangesIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENCHANGE, selector = selector)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     */\n    val fullscreenerrors: Listener<Event, T> get() = subscribe(FULLSCREENERROR)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrors(init: Event.() -> Unit): Listener<Event, T> = subscribe(FULLSCREENERROR) { init(); true }\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrorsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENERROR, selector = selector)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     */\n    val hashchanges: Listener<HashChangeEvent, T> get() = subscribe(HASHCHANGE)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchanges(init: HashChangeEvent.() -> Unit): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE) { init(); true }\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchangesIf(selector: HashChangeEvent.() -> Boolean): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE, selector = selector)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     */\n    val inputs: Listener<Event, T> get() = subscribe(INPUT)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputs(init: Event.() -> Unit): Listener<Event, T> = subscribe(INPUT) { init(); true }\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(INPUT, selector = selector)\n\n    /**\n     * occurs when an element is invalid\n     */\n    val invalids: Listener<Event, T> get() = subscribe(INVALID)\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalids(init: Event.() -> Unit): Listener<Event, T> = subscribe(INVALID) { init(); true }\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalidsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(INVALID, selector = selector)\n\n    /**\n     * occurs when the user is pressing a key\n     */\n    val keydowns: Listener<KeyboardEvent, T> get() = subscribe(KEYDOWN)\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydowns(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> = subscribe(KEYDOWN) { init(); true }\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydownsIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYDOWN, selector = selector)\n\n    /**\n     * occurs when the user presses a key\n     */\n    val keypresss: Listener<KeyboardEvent, T> get() = subscribe(KEYPRESS)\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresss(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> = subscribe(KEYPRESS) { init(); true }\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresssIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYPRESS, selector = selector)\n\n    /**\n     * occurs when the user releases a key\n     */\n    val keyups: Listener<KeyboardEvent, T> get() = subscribe(KEYUP)\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyups(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> = subscribe(KEYUP) { init(); true }\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyupsIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYUP, selector = selector)\n\n    /**\n     * occurs when an object has loaded\n     */\n    val loads: Listener<Event, T> get() = subscribe(LOAD)\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loads(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOAD) { init(); true }\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(LOAD, selector = selector)\n\n    /**\n     * occurs when media data is loaded\n     */\n    val loadeddatas: Listener<Event, T> get() = subscribe(LOADEDDATA)\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatas(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOADEDDATA) { init(); true }\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatasIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(LOADEDDATA, selector = selector)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     */\n    val loadedmetadatas: Listener<Event, T> get() = subscribe(LOADEDMETADATA)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatas(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOADEDMETADATA) { init(); true }\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatasIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(LOADEDMETADATA, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     */\n    val mouseenters: Listener<MouseEvent, T> get() = subscribe(MOUSEENTER)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseenters(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEENTER) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseentersIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEENTER, selector = selector)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     */\n    val mouseleaves: Listener<MouseEvent, T> get() = subscribe(MOUSELEAVE)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleaves(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSELEAVE) { init(); true }\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleavesIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSELEAVE, selector = selector)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     */\n    val mousemoves: Listener<MouseEvent, T> get() = subscribe(MOUSEMOVE)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemoves(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEMOVE) { init(); true }\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemovesIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEMOVE, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     */\n    val mouseovers: Listener<MouseEvent, T> get() = subscribe(MOUSEOVER)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseovers(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEOVER) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoversIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOVER, selector = selector)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     */\n    val mouseouts: Listener<MouseEvent, T> get() = subscribe(MOUSEOUT)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseouts(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEOUT) { init(); true }\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoutsIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOUT, selector = selector)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     */\n    val mouseups: Listener<MouseEvent, T> get() = subscribe(MOUSEUP)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseups(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEUP) { init(); true }\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseupsIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEUP, selector = selector)\n\n    /**\n     * occurs when the browser starts to work offline\n     */\n    val offlines: Listener<Event, T> get() = subscribe(OFFLINE)\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlines(init: Event.() -> Unit): Listener<Event, T> = subscribe(OFFLINE) { init(); true }\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlinesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(OFFLINE, selector = selector)\n\n    /**\n     * occurs when the browser starts to work online\n     */\n    val onlines: Listener<Event, T> get() = subscribe(ONLINE)\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlines(init: Event.() -> Unit): Listener<Event, T> = subscribe(ONLINE) { init(); true }\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlinesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ONLINE, selector = selector)\n\n    /**\n     * occurs when a connection with the event source is opened\n     */\n    val opens: Listener<Event, T> get() = subscribe(OPEN)\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opens(init: Event.() -> Unit): Listener<Event, T> = subscribe(OPEN) { init(); true }\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opensIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(OPEN, selector = selector)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     */\n    val pagehides: Listener<PageTransitionEvent, T> get() = subscribe(PAGEHIDE)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehides(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE) { init(); true }\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehidesIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE, selector = selector)\n\n    /**\n     * occurs when the user navigates to a webpage\n     */\n    val pageshows: Listener<PageTransitionEvent, T> get() = subscribe(PAGESHOW)\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshows(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW) { init(); true }\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshowsIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW, selector = selector)\n\n    /**\n     * occurs when the user pastes some content in an element\n     */\n    val pastes: Listener<ClipboardEvent, T> get() = subscribe(PASTE)\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastes(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> = subscribe(PASTE) { init(); true }\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastesIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(PASTE, selector = selector)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     */\n    val loadstarts: Listener<ProgressEvent, T> get() = subscribe(LOADSTART)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstarts(init: ProgressEvent.() -> Unit): Listener<ProgressEvent, T> = subscribe(LOADSTART) { init(); true }\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstartsIf(selector: ProgressEvent.() -> Boolean): Listener<ProgressEvent, T> =\n        subscribe(LOADSTART, selector = selector)\n\n    /**\n     * occurs when a message is received through the event source\n     */\n    val messages: Listener<Event, T> get() = subscribe(MESSAGE)\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messages(init: Event.() -> Unit): Listener<Event, T> = subscribe(MESSAGE) { init(); true }\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messagesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(MESSAGE, selector = selector)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     */\n    val mousedowns: Listener<MouseEvent, T> get() = subscribe(MOUSEDOWN)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedowns(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEDOWN) { init(); true }\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedownsIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEDOWN, selector = selector)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     */\n    val pauses: Listener<Event, T> get() = subscribe(PAUSE)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pauses(init: Event.() -> Unit): Listener<Event, T> = subscribe(PAUSE) { init(); true }\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pausesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PAUSE, selector = selector)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     */\n    val plays: Listener<Event, T> get() = subscribe(PLAY)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun plays(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAY) { init(); true }\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PLAY, selector = selector)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     */\n    val playings: Listener<Event, T> get() = subscribe(PLAYING)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playings(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAYING) { init(); true }\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playingsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PLAYING, selector = selector)\n\n    /**\n     * occurs when the window's history changes\n     */\n    val popstates: Listener<PopStateEvent, T> get() = subscribe(POPSTATE)\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstates(init: PopStateEvent.() -> Unit): Listener<PopStateEvent, T> = subscribe(POPSTATE) { init(); true }\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstatesIf(selector: PopStateEvent.() -> Boolean): Listener<PopStateEvent, T> =\n        subscribe(POPSTATE, selector = selector)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     */\n    val progresss: Listener<Event, T> get() = subscribe(PROGRESS)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresss(init: Event.() -> Unit): Listener<Event, T> = subscribe(PROGRESS) { init(); true }\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresssIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PROGRESS, selector = selector)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     */\n    val ratechanges: Listener<Event, T> get() = subscribe(RATECHANGE)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(RATECHANGE) { init(); true }\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechangesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(RATECHANGE, selector = selector)\n\n    /**\n     * occurs when the document view is resized\n     */\n    val resizes: Listener<Event, T> get() = subscribe(RESIZE)\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizes(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESIZE) { init(); true }\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(RESIZE, selector = selector)\n\n    /**\n     * occurs when a form is reset\n     */\n    val resets: Listener<Event, T> get() = subscribe(RESET)\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resets(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESET) { init(); true }\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resetsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(RESET, selector = selector)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     */\n    val scrolls: Listener<Event, T> get() = subscribe(SCROLL)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrolls(init: Event.() -> Unit): Listener<Event, T> = subscribe(SCROLL) { init(); true }\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrollsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SCROLL, selector = selector)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     */\n    val searchs: Listener<Event, T> get() = subscribe(SEARCH)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchs(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEARCH) { init(); true }\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SEARCH, selector = selector)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     */\n    val seekeds: Listener<Event, T> get() = subscribe(SEEKED)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekeds(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKED) { init(); true }\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekedsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SEEKED, selector = selector)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     */\n    val seekings: Listener<Event, T> get() = subscribe(SEEKING)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekings(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKING) { init(); true }\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekingsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SEEKING, selector = selector)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     */\n    val selects: Listener<Event, T> get() = subscribe(SELECT)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selects(init: Event.() -> Unit): Listener<Event, T> = subscribe(SELECT) { init(); true }\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selectsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SELECT, selector = selector)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     */\n    val shows: Listener<Event, T> get() = subscribe(SHOW)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun shows(init: Event.() -> Unit): Listener<Event, T> = subscribe(SHOW) { init(); true }\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun showsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SHOW, selector = selector)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     */\n    val stalleds: Listener<Event, T> get() = subscribe(STALLED)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalleds(init: Event.() -> Unit): Listener<Event, T> = subscribe(STALLED) { init(); true }\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalledsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(STALLED, selector = selector)\n\n    /**\n     * occurs when a Web Storage area is updated\n     */\n    val storages: Listener<StorageEvent, T> get() = subscribe(STORAGE)\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storages(init: StorageEvent.() -> Unit): Listener<StorageEvent, T> = subscribe(STORAGE) { init(); true }\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storagesIf(selector: StorageEvent.() -> Boolean): Listener<StorageEvent, T> =\n        subscribe(STORAGE, selector = selector)\n\n    /**\n     * occurs when a form is submitted\n     */\n    val submits: Listener<Event, T> get() = subscribe(SUBMIT)\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submits(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUBMIT) { init(); true }\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submitsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SUBMIT, selector = selector)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     */\n    val suspends: Listener<Event, T> get() = subscribe(SUSPEND)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspends(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUSPEND) { init(); true }\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspendsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SUSPEND, selector = selector)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     */\n    val timeupdates: Listener<Event, T> get() = subscribe(TIMEUPDATE)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdates(init: Event.() -> Unit): Listener<Event, T> = subscribe(TIMEUPDATE) { init(); true }\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdatesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(TIMEUPDATE, selector = selector)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     */\n    val toggles: Listener<Event, T> get() = subscribe(TOGGLE)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun toggles(init: Event.() -> Unit): Listener<Event, T> = subscribe(TOGGLE) { init(); true }\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun togglesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(TOGGLE, selector = selector)\n\n    /**\n     * occurs when the touch is interrupted\n     */\n    val touchcancels: Listener<TouchEvent, T> get() = subscribe(TOUCHCANCEL)\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancels(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHCANCEL) { init(); true }\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancelsIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHCANCEL, selector = selector)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     */\n    val touchends: Listener<TouchEvent, T> get() = subscribe(TOUCHEND)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchends(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHEND) { init(); true }\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchendsIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHEND, selector = selector)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     */\n    val touchmoves: Listener<TouchEvent, T> get() = subscribe(TOUCHMOVE)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmoves(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHMOVE) { init(); true }\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmovesIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHMOVE, selector = selector)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     */\n    val touchstarts: Listener<TouchEvent, T> get() = subscribe(TOUCHSTART)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstarts(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHSTART) { init(); true }\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstartsIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHSTART, selector = selector)\n\n    /**\n     * occurs when a CSS transition has completed\n     */\n    val transitionends: Listener<Event, T> get() = subscribe(TRANSITIONEND)\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionends(init: Event.() -> Unit): Listener<Event, T> = subscribe(TRANSITIONEND) { init(); true }\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionendsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TRANSITIONEND, selector = selector)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     */\n    val unloads: Listener<Event, T> get() = subscribe(UNLOAD)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloads(init: Event.() -> Unit): Listener<Event, T> = subscribe(UNLOAD) { init(); true }\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloadsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(UNLOAD, selector = selector)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     */\n    val volumechanges: Listener<Event, T> get() = subscribe(VOLUMECHANGE)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(VOLUMECHANGE) { init(); true }\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechangesIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(VOLUMECHANGE, selector = selector)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     */\n    val waitings: Listener<Event, T> get() = subscribe(WAITING)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitings(init: Event.() -> Unit): Listener<Event, T> = subscribe(WAITING) { init(); true }\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitingsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(WAITING, selector = selector)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     */\n    val wheels: Listener<WheelEvent, T> get() = subscribe(WHEEL)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheels(init: WheelEvent.() -> Unit): Listener<WheelEvent, T> = subscribe(WHEEL) { init(); true }\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheelsIf(selector: WheelEvent.() -> Boolean): Listener<WheelEvent, T> = subscribe(WHEEL, selector = selector)\n\n    /**\n     * occurs when the loading of a media is aborted\n     */\n    val abortsCaptured: Listener<Event, T> get() = subscribe(ABORT, true)\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun abortsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ABORT, true) { init(); true }\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun abortsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ABORT, true, selector = selector)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     */\n    val afterprintsCaptured: Listener<Event, T> get() = subscribe(AFTERPRINT, true)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprintsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(AFTERPRINT, true) { init(); true }\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprintsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(AFTERPRINT, true, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val animationendsCaptured: Listener<Event, T> get() = subscribe(ANIMATIONEND, true)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationendsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(ANIMATIONEND, true) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationendsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONEND, true, selector = selector)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     */\n    val animationiterationsCaptured: Listener<Event, T> get() = subscribe(ANIMATIONITERATION, true)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterationsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(ANIMATIONITERATION, true) { init(); true }\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterationsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONITERATION, true, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has started\n     */\n    val animationstartsCaptured: Listener<Event, T> get() = subscribe(ANIMATIONSTART, true)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstartsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(ANIMATIONSTART, true) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has started\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstartsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONSTART, true, selector = selector)\n\n    /**\n     * occurs when a page is about to be printed\n     */\n    val beforeprintsCaptured: Listener<Event, T> get() = subscribe(BEFOREPRINT, true)\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprintsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(BEFOREPRINT, true) { init(); true }\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprintsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(BEFOREPRINT, true, selector = selector)\n\n    /**\n     * occurs before the document is about to be unloaded\n     */\n    val beforeunloadsCaptured: Listener<Event, T> get() = subscribe(BEFOREUNLOAD, true)\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloadsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(BEFOREUNLOAD, true) { init(); true }\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloadsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(BEFOREUNLOAD, true, selector = selector)\n\n    /**\n     * occurs when an element loses focus\n     */\n    val blursCaptured: Listener<FocusEvent, T> get() = subscribe(BLUR, true)\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blursCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(BLUR, true) { init(); true }\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blursCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(BLUR, true, selector = selector)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     */\n    val canplaysCaptured: Listener<Event, T> get() = subscribe(CANPLAY, true)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaysCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(CANPLAY, true) { init(); true }\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaysCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CANPLAY, true, selector = selector)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     */\n    val canplaythroughsCaptured: Listener<Event, T> get() = subscribe(CANPLAYTHROUGH, true)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(CANPLAYTHROUGH, true) { init(); true }\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CANPLAYTHROUGH, true, selector = selector)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     */\n    val changesCaptured: Listener<Event, T> get() = subscribe(CHANGE, true)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(CHANGE, true) { init(); true }\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CHANGE, true, selector = selector)\n\n    /**\n     * occurs when the user clicks on an element\n     */\n    val clicksCaptured: Listener<MouseEvent, T> get() = subscribe(CLICK, true)\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicksCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(CLICK, true) { init(); true }\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicksCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(CLICK, true, selector = selector)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     */\n    val contextmenusCaptured: Listener<MouseEvent, T> get() = subscribe(CONTEXTMENU, true)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenusCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(CONTEXTMENU, true) { init(); true }\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenusCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(CONTEXTMENU, true, selector = selector)\n\n    /**\n     * occurs when the user copies the content of an element\n     */\n    val copysCaptured: Listener<ClipboardEvent, T> get() = subscribe(COPY, true)\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copysCaptured(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> =\n        subscribe(COPY, true) { init(); true }\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copysCapturedIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(COPY, true, selector = selector)\n\n    /**\n     * occurs when the user cuts the content of an element\n     */\n    val cutsCaptured: Listener<ClipboardEvent, T> get() = subscribe(CUT, true)\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cutsCaptured(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> =\n        subscribe(CUT, true) { init(); true }\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cutsCapturedIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(CUT, true, selector = selector)\n\n    /**\n     * occurs when the user double-clicks on an element\n     */\n    val dblclicksCaptured: Listener<MouseEvent, T> get() = subscribe(DBLCLICK, true)\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicksCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(DBLCLICK, true) { init(); true }\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicksCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(DBLCLICK, true, selector = selector)\n\n    /**\n     * occurs when an element is being dragged\n     */\n    val dragsCaptured: Listener<DragEvent, T> get() = subscribe(DRAG, true)\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAG, true) { init(); true }\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAG, true, selector = selector)\n\n    /**\n     * occurs when the user has finished dragging an element\n     */\n    val dragendsCaptured: Listener<DragEvent, T> get() = subscribe(DRAGEND, true)\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragendsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGEND, true) { init(); true }\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragendsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGEND, true, selector = selector)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     */\n    val dragentersCaptured: Listener<DragEvent, T> get() = subscribe(DRAGENTER, true)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragentersCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGENTER, true) { init(); true }\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragentersCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGENTER, true, selector = selector)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     */\n    val dragleavesCaptured: Listener<DragEvent, T> get() = subscribe(DRAGLEAVE, true)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleavesCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGLEAVE, true) { init(); true }\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleavesCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGLEAVE, true, selector = selector)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     */\n    val dragoversCaptured: Listener<DragEvent, T> get() = subscribe(DRAGOVER, true)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragoversCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGOVER, true) { init(); true }\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragoversCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGOVER, true, selector = selector)\n\n    /**\n     * occurs when the user starts to drag an element\n     */\n    val dragstartsCaptured: Listener<DragEvent, T> get() = subscribe(DRAGSTART, true)\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstartsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGSTART, true) { init(); true }\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstartsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGSTART, true, selector = selector)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     */\n    val dropsCaptured: Listener<DragEvent, T> get() = subscribe(DROP, true)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dropsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DROP, true) { init(); true }\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dropsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DROP, true, selector = selector)\n\n    /**\n     * occurs when the duration of the media is changed\n     */\n    val durationchangesCaptured: Listener<Event, T> get() = subscribe(DURATIONCHANGE, true)\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchangesCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(DURATIONCHANGE, true) { init(); true }\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(DURATIONCHANGE, true, selector = selector)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     */\n    val endedsCaptured: Listener<Event, T> get() = subscribe(ENDED, true)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endedsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ENDED, true) { init(); true }\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endedsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ENDED, true, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val errorsCaptured: Listener<Event, T> get() = subscribe(ERROR, true)\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errorsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ERROR, true) { init(); true }\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errorsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ERROR, true, selector = selector)\n\n    /**\n     * occurs when an element gets focus\n     */\n    val focussCaptured: Listener<FocusEvent, T> get() = subscribe(FOCUS, true)\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focussCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUS, true) { init(); true }\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focussCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUS, true, selector = selector)\n\n    /**\n     * occurs when an element is about to get focus\n     */\n    val focusinsCaptured: Listener<FocusEvent, T> get() = subscribe(FOCUSIN, true)\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusinsCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> =\n        subscribe(FOCUSIN, true) { init(); true }\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusinsCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSIN, true, selector = selector)\n\n    /**\n     * occurs when an element is about to lose focus\n     */\n    val focusoutsCaptured: Listener<FocusEvent, T> get() = subscribe(FOCUSOUT, true)\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusoutsCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> =\n        subscribe(FOCUSOUT, true) { init(); true }\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusoutsCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSOUT, true, selector = selector)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     */\n    val fullscreenchangesCaptured: Listener<Event, T> get() = subscribe(FULLSCREENCHANGE, true)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchangesCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(FULLSCREENCHANGE, true) { init(); true }\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENCHANGE, true, selector = selector)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     */\n    val fullscreenerrorsCaptured: Listener<Event, T> get() = subscribe(FULLSCREENERROR, true)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrorsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(FULLSCREENERROR, true) { init(); true }\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrorsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENERROR, true, selector = selector)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     */\n    val hashchangesCaptured: Listener<HashChangeEvent, T> get() = subscribe(HASHCHANGE, true)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchangesCaptured(init: HashChangeEvent.() -> Unit): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE, true) { init(); true }\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchangesCapturedIf(selector: HashChangeEvent.() -> Boolean): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE, true, selector = selector)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     */\n    val inputsCaptured: Listener<Event, T> get() = subscribe(INPUT, true)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(INPUT, true) { init(); true }\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(INPUT, true, selector = selector)\n\n    /**\n     * occurs when an element is invalid\n     */\n    val invalidsCaptured: Listener<Event, T> get() = subscribe(INVALID, true)\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalidsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(INVALID, true) { init(); true }\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalidsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(INVALID, true, selector = selector)\n\n    /**\n     * occurs when the user is pressing a key\n     */\n    val keydownsCaptured: Listener<KeyboardEvent, T> get() = subscribe(KEYDOWN, true)\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydownsCaptured(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> =\n        subscribe(KEYDOWN, true) { init(); true }\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydownsCapturedIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYDOWN, true, selector = selector)\n\n    /**\n     * occurs when the user presses a key\n     */\n    val keypresssCaptured: Listener<KeyboardEvent, T> get() = subscribe(KEYPRESS, true)\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresssCaptured(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> =\n        subscribe(KEYPRESS, true) { init(); true }\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresssCapturedIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYPRESS, true, selector = selector)\n\n    /**\n     * occurs when the user releases a key\n     */\n    val keyupsCaptured: Listener<KeyboardEvent, T> get() = subscribe(KEYUP, true)\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyupsCaptured(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> =\n        subscribe(KEYUP, true) { init(); true }\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyupsCapturedIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYUP, true, selector = selector)\n\n    /**\n     * occurs when an object has loaded\n     */\n    val loadsCaptured: Listener<Event, T> get() = subscribe(LOAD, true)\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOAD, true) { init(); true }\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(LOAD, true, selector = selector)\n\n    /**\n     * occurs when media data is loaded\n     */\n    val loadeddatasCaptured: Listener<Event, T> get() = subscribe(LOADEDDATA, true)\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatasCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOADEDDATA, true) { init(); true }\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatasCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(LOADEDDATA, true, selector = selector)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     */\n    val loadedmetadatasCaptured: Listener<Event, T> get() = subscribe(LOADEDMETADATA, true)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatasCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(LOADEDMETADATA, true) { init(); true }\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatasCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(LOADEDMETADATA, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     */\n    val mouseentersCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEENTER, true)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseentersCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEENTER, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseentersCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEENTER, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     */\n    val mouseleavesCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSELEAVE, true)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleavesCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSELEAVE, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleavesCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSELEAVE, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     */\n    val mousemovesCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEMOVE, true)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemovesCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEMOVE, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemovesCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEMOVE, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     */\n    val mouseoversCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEOVER, true)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoversCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEOVER, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoversCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOVER, true, selector = selector)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     */\n    val mouseoutsCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEOUT, true)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoutsCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEOUT, true) { init(); true }\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoutsCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOUT, true, selector = selector)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     */\n    val mouseupsCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEUP, true)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseupsCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEUP, true) { init(); true }\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseupsCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEUP, true, selector = selector)\n\n    /**\n     * occurs when the browser starts to work offline\n     */\n    val offlinesCaptured: Listener<Event, T> get() = subscribe(OFFLINE, true)\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlinesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(OFFLINE, true) { init(); true }\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlinesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(OFFLINE, true, selector = selector)\n\n    /**\n     * occurs when the browser starts to work online\n     */\n    val onlinesCaptured: Listener<Event, T> get() = subscribe(ONLINE, true)\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlinesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ONLINE, true) { init(); true }\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlinesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ONLINE, true, selector = selector)\n\n    /**\n     * occurs when a connection with the event source is opened\n     */\n    val opensCaptured: Listener<Event, T> get() = subscribe(OPEN, true)\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opensCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(OPEN, true) { init(); true }\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opensCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(OPEN, true, selector = selector)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     */\n    val pagehidesCaptured: Listener<PageTransitionEvent, T> get() = subscribe(PAGEHIDE, true)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehidesCaptured(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE, true) { init(); true }\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehidesCapturedIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE, true, selector = selector)\n\n    /**\n     * occurs when the user navigates to a webpage\n     */\n    val pageshowsCaptured: Listener<PageTransitionEvent, T> get() = subscribe(PAGESHOW, true)\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshowsCaptured(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW, true) { init(); true }\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshowsCapturedIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW, true, selector = selector)\n\n    /**\n     * occurs when the user pastes some content in an element\n     */\n    val pastesCaptured: Listener<ClipboardEvent, T> get() = subscribe(PASTE, true)\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastesCaptured(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> =\n        subscribe(PASTE, true) { init(); true }\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastesCapturedIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(PASTE, true, selector = selector)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     */\n    val loadstartsCaptured: Listener<ProgressEvent, T> get() = subscribe(LOADSTART, true)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstartsCaptured(init: ProgressEvent.() -> Unit): Listener<ProgressEvent, T> =\n        subscribe(LOADSTART, true) { init(); true }\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstartsCapturedIf(selector: ProgressEvent.() -> Boolean): Listener<ProgressEvent, T> =\n        subscribe(LOADSTART, true, selector = selector)\n\n    /**\n     * occurs when a message is received through the event source\n     */\n    val messagesCaptured: Listener<Event, T> get() = subscribe(MESSAGE, true)\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messagesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(MESSAGE, true) { init(); true }\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messagesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(MESSAGE, true, selector = selector)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     */\n    val mousedownsCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEDOWN, true)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedownsCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEDOWN, true) { init(); true }\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedownsCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEDOWN, true, selector = selector)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     */\n    val pausesCaptured: Listener<Event, T> get() = subscribe(PAUSE, true)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pausesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PAUSE, true) { init(); true }\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pausesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(PAUSE, true, selector = selector)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     */\n    val playsCaptured: Listener<Event, T> get() = subscribe(PLAY, true)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAY, true) { init(); true }\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PLAY, true, selector = selector)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     */\n    val playingsCaptured: Listener<Event, T> get() = subscribe(PLAYING, true)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playingsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAYING, true) { init(); true }\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playingsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(PLAYING, true, selector = selector)\n\n    /**\n     * occurs when the window's history changes\n     */\n    val popstatesCaptured: Listener<PopStateEvent, T> get() = subscribe(POPSTATE, true)\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstatesCaptured(init: PopStateEvent.() -> Unit): Listener<PopStateEvent, T> =\n        subscribe(POPSTATE, true) { init(); true }\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstatesCapturedIf(selector: PopStateEvent.() -> Boolean): Listener<PopStateEvent, T> =\n        subscribe(POPSTATE, true, selector = selector)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     */\n    val progresssCaptured: Listener<Event, T> get() = subscribe(PROGRESS, true)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresssCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PROGRESS, true) { init(); true }\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresssCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(PROGRESS, true, selector = selector)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     */\n    val ratechangesCaptured: Listener<Event, T> get() = subscribe(RATECHANGE, true)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechangesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(RATECHANGE, true) { init(); true }\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(RATECHANGE, true, selector = selector)\n\n    /**\n     * occurs when the document view is resized\n     */\n    val resizesCaptured: Listener<Event, T> get() = subscribe(RESIZE, true)\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESIZE, true) { init(); true }\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(RESIZE, true, selector = selector)\n\n    /**\n     * occurs when a form is reset\n     */\n    val resetsCaptured: Listener<Event, T> get() = subscribe(RESET, true)\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resetsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESET, true) { init(); true }\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resetsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(RESET, true, selector = selector)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     */\n    val scrollsCaptured: Listener<Event, T> get() = subscribe(SCROLL, true)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrollsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SCROLL, true) { init(); true }\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrollsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SCROLL, true, selector = selector)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     */\n    val searchsCaptured: Listener<Event, T> get() = subscribe(SEARCH, true)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEARCH, true) { init(); true }\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SEARCH, true, selector = selector)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     */\n    val seekedsCaptured: Listener<Event, T> get() = subscribe(SEEKED, true)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekedsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKED, true) { init(); true }\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekedsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SEEKED, true, selector = selector)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     */\n    val seekingsCaptured: Listener<Event, T> get() = subscribe(SEEKING, true)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekingsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKING, true) { init(); true }\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekingsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SEEKING, true, selector = selector)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     */\n    val selectsCaptured: Listener<Event, T> get() = subscribe(SELECT, true)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selectsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SELECT, true) { init(); true }\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selectsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SELECT, true, selector = selector)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     */\n    val showsCaptured: Listener<Event, T> get() = subscribe(SHOW, true)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun showsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SHOW, true) { init(); true }\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun showsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SHOW, true, selector = selector)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     */\n    val stalledsCaptured: Listener<Event, T> get() = subscribe(STALLED, true)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalledsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(STALLED, true) { init(); true }\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalledsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(STALLED, true, selector = selector)\n\n    /**\n     * occurs when a Web Storage area is updated\n     */\n    val storagesCaptured: Listener<StorageEvent, T> get() = subscribe(STORAGE, true)\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storagesCaptured(init: StorageEvent.() -> Unit): Listener<StorageEvent, T> =\n        subscribe(STORAGE, true) { init(); true }\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storagesCapturedIf(selector: StorageEvent.() -> Boolean): Listener<StorageEvent, T> =\n        subscribe(STORAGE, true, selector = selector)\n\n    /**\n     * occurs when a form is submitted\n     */\n    val submitsCaptured: Listener<Event, T> get() = subscribe(SUBMIT, true)\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submitsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUBMIT, true) { init(); true }\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submitsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SUBMIT, true, selector = selector)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     */\n    val suspendsCaptured: Listener<Event, T> get() = subscribe(SUSPEND, true)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspendsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUSPEND, true) { init(); true }\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspendsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SUSPEND, true, selector = selector)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     */\n    val timeupdatesCaptured: Listener<Event, T> get() = subscribe(TIMEUPDATE, true)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdatesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(TIMEUPDATE, true) { init(); true }\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdatesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TIMEUPDATE, true, selector = selector)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     */\n    val togglesCaptured: Listener<Event, T> get() = subscribe(TOGGLE, true)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun togglesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(TOGGLE, true) { init(); true }\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun togglesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TOGGLE, true, selector = selector)\n\n    /**\n     * occurs when the touch is interrupted\n     */\n    val touchcancelsCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHCANCEL, true)\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancelsCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHCANCEL, true) { init(); true }\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancelsCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHCANCEL, true, selector = selector)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     */\n    val touchendsCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHEND, true)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchendsCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHEND, true) { init(); true }\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchendsCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHEND, true, selector = selector)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     */\n    val touchmovesCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHMOVE, true)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmovesCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHMOVE, true) { init(); true }\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmovesCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHMOVE, true, selector = selector)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     */\n    val touchstartsCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHSTART, true)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstartsCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHSTART, true) { init(); true }\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstartsCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHSTART, true, selector = selector)\n\n    /**\n     * occurs when a CSS transition has completed\n     */\n    val transitionendsCaptured: Listener<Event, T> get() = subscribe(TRANSITIONEND, true)\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionendsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(TRANSITIONEND, true) { init(); true }\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionendsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TRANSITIONEND, true, selector = selector)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     */\n    val unloadsCaptured: Listener<Event, T> get() = subscribe(UNLOAD, true)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloadsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(UNLOAD, true) { init(); true }\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloadsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(UNLOAD, true, selector = selector)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     */\n    val volumechangesCaptured: Listener<Event, T> get() = subscribe(VOLUMECHANGE, true)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechangesCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(VOLUMECHANGE, true) { init(); true }\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(VOLUMECHANGE, true, selector = selector)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     */\n    val waitingsCaptured: Listener<Event, T> get() = subscribe(WAITING, true)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitingsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(WAITING, true) { init(); true }\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitingsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(WAITING, true, selector = selector)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     */\n    val wheelsCaptured: Listener<WheelEvent, T> get() = subscribe(WHEEL, true)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheelsCaptured(init: WheelEvent.() -> Unit): Listener<WheelEvent, T> = subscribe(WHEEL, true) { init(); true }\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheelsCapturedIf(selector: WheelEvent.() -> Boolean): Listener<WheelEvent, T> =\n        subscribe(WHEEL, true, selector = selector)\n}\n\n/**\n * Represents all [Event]s of the browser [window] object as [Event]-flows\n */\nobject Window : WithEvents<Window> {\n\n    private val scope = MainScope()\n\n    override fun <X : Event> subscribe(\n        eventName: String,\n        capture: Boolean,\n        selector: X.() -> Boolean\n    ): Listener<X, Window> =\n        Listener(window.subscribe<X, Window>(eventName, capture, selector).shareIn(scope, SharingStarted.Lazily))\n\n    override val aborts by lazy { super.aborts }\n    override val afterprints by lazy { super.afterprints }\n    override val animationends by lazy { super.animationends }\n    override val animationiterations by lazy { super.animationiterations }\n    override val animationstarts by lazy { super.animationstarts }\n    override val beforeprints by lazy { super.beforeprints }\n    override val beforeunloads by lazy { super.beforeunloads }\n    override val blurs by lazy { super.blurs }\n    override val canplays by lazy { super.canplays }\n    override val canplaythroughs by lazy { super.canplaythroughs }\n    override val changes by lazy { super.changes }\n    override val clicks by lazy { super.clicks }\n    override val contextmenus by lazy { super.contextmenus }\n    override val copys by lazy { super.copys }\n    override val cuts by lazy { super.cuts }\n    override val dblclicks by lazy { super.dblclicks }\n    override val drags by lazy { super.drags }\n    override val dragends by lazy { super.dragends }\n    override val dragenters by lazy { super.dragenters }\n    override val dragleaves by lazy { super.dragleaves }\n    override val dragovers by lazy { super.dragovers }\n    override val dragstarts by lazy { super.dragstarts }\n    override val drops by lazy { super.drops }\n    override val durationchanges by lazy { super.durationchanges }\n    override val endeds by lazy { super.endeds }\n    override val errors by lazy { super.errors }\n    override val focuss by lazy { super.focuss }\n    override val focusins by lazy { super.focusins }\n    override val focusouts by lazy { super.focusouts }\n    override val fullscreenchanges by lazy { super.fullscreenchanges }\n    override val fullscreenerrors by lazy { super.fullscreenerrors }\n    override val hashchanges by lazy { super.hashchanges }\n    override val inputs by lazy { super.inputs }\n    override val invalids by lazy { super.invalids }\n    override val keydowns by lazy { super.keydowns }\n    override val keypresss by lazy { super.keypresss }\n    override val keyups by lazy { super.keyups }\n    override val loads by lazy { super.loads }\n    override val loadeddatas by lazy { super.loadeddatas }\n    override val loadedmetadatas by lazy { super.loadedmetadatas }\n    override val loadstarts by lazy { super.loadstarts }\n    override val messages by lazy { super.messages }\n    override val mousedowns by lazy { super.mousedowns }\n    override val mouseenters by lazy { super.mouseenters }\n    override val mouseleaves by lazy { super.mouseleaves }\n    override val mousemoves by lazy { super.mousemoves }\n    override val mouseovers by lazy { super.mouseovers }\n    override val mouseouts by lazy { super.mouseouts }\n    override val mouseups by lazy { super.mouseups }\n    override val offlines by lazy { super.offlines }\n    override val onlines by lazy { super.onlines }\n    override val opens by lazy { super.opens }\n    override val pagehides by lazy { super.pagehides }\n    override val pageshows by lazy { super.pageshows }\n    override val pastes by lazy { super.pastes }\n    override val pauses by lazy { super.pauses }\n    override val plays by lazy { super.plays }\n    override val playings by lazy { super.playings }\n    override val popstates by lazy { super.popstates }\n    override val progresss by lazy { super.progresss }\n    override val ratechanges by lazy { super.ratechanges }\n    override val resizes by lazy { super.resizes }\n    override val resets by lazy { super.resets }\n    override val scrolls by lazy { super.scrolls }\n    override val searchs by lazy { super.searchs }\n    override val seekeds by lazy { super.seekeds }\n    override val seekings by lazy { super.seekings }\n    override val selects by lazy { super.selects }\n    override val shows by lazy { super.shows }\n    override val stalleds by lazy { super.stalleds }\n    override val storages by lazy { super.storages }\n    override val submits by lazy { super.submits }\n    override val suspends by lazy { super.suspends }\n    override val timeupdates by lazy { super.timeupdates }\n    override val toggles by lazy { super.toggles }\n    override val touchcancels by lazy { super.touchcancels }\n    override val touchends by lazy { super.touchends }\n    override val touchmoves by lazy { super.touchmoves }\n    override val touchstarts by lazy { super.touchstarts }\n    override val transitionends by lazy { super.transitionends }\n    override val unloads by lazy { super.unloads }\n    override val volumechanges by lazy { super.volumechanges }\n    override val waitings by lazy { super.waitings }\n    override val wheels by lazy { super.wheels }\n\n    override val abortsCaptured by lazy { super.abortsCaptured }\n    override val afterprintsCaptured by lazy { super.afterprintsCaptured }\n    override val animationendsCaptured by lazy { super.animationendsCaptured }\n    override val animationiterationsCaptured by lazy { super.animationiterationsCaptured }\n    override val animationstartsCaptured by lazy { super.animationstartsCaptured }\n    override val beforeprintsCaptured by lazy { super.beforeprintsCaptured }\n    override val beforeunloadsCaptured by lazy { super.beforeunloadsCaptured }\n    override val blursCaptured by lazy { super.blursCaptured }\n    override val canplaysCaptured by lazy { super.canplaysCaptured }\n    override val canplaythroughsCaptured by lazy { super.canplaythroughsCaptured }\n    override val changesCaptured by lazy { super.changesCaptured }\n    override val clicksCaptured by lazy { super.clicksCaptured }\n    override val contextmenusCaptured by lazy { super.contextmenusCaptured }\n    override val copysCaptured by lazy { super.copysCaptured }\n    override val cutsCaptured by lazy { super.cutsCaptured }\n    override val dblclicksCaptured by lazy { super.dblclicksCaptured }\n    override val dragsCaptured by lazy { super.dragsCaptured }\n    override val dragendsCaptured by lazy { super.dragendsCaptured }\n    override val dragentersCaptured by lazy { super.dragentersCaptured }\n    override val dragleavesCaptured by lazy { super.dragleavesCaptured }\n    override val dragoversCaptured by lazy { super.dragoversCaptured }\n    override val dragstartsCaptured by lazy { super.dragstartsCaptured }\n    override val dropsCaptured by lazy { super.dropsCaptured }\n    override val durationchangesCaptured by lazy { super.durationchangesCaptured }\n    override val endedsCaptured by lazy { super.endedsCaptured }\n    override val errorsCaptured by lazy { super.errorsCaptured }\n    override val focussCaptured by lazy { super.focussCaptured }\n    override val focusinsCaptured by lazy { super.focusinsCaptured }\n    override val focusoutsCaptured by lazy { super.focusoutsCaptured }\n    override val fullscreenchangesCaptured by lazy { super.fullscreenchangesCaptured }\n    override val fullscreenerrorsCaptured by lazy { super.fullscreenerrorsCaptured }\n    override val hashchangesCaptured by lazy { super.hashchangesCaptured }\n    override val inputsCaptured by lazy { super.inputsCaptured }\n    override val invalidsCaptured by lazy { super.invalidsCaptured }\n    override val keydownsCaptured by lazy { super.keydownsCaptured }\n    override val keypresssCaptured by lazy { super.keypresssCaptured }\n    override val keyupsCaptured by lazy { super.keyupsCaptured }\n    override val loadsCaptured by lazy { super.loadsCaptured }\n    override val loadeddatasCaptured by lazy { super.loadeddatasCaptured }\n    override val loadedmetadatasCaptured by lazy { super.loadedmetadatasCaptured }\n    override val loadstartsCaptured by lazy { super.loadstartsCaptured }\n    override val messagesCaptured by lazy { super.messagesCaptured }\n    override val mousedownsCaptured by lazy { super.mousedownsCaptured }\n    override val mouseentersCaptured by lazy { super.mouseentersCaptured }\n    override val mouseleavesCaptured by lazy { super.mouseleavesCaptured }\n    override val mousemovesCaptured by lazy { super.mousemovesCaptured }\n    override val mouseoversCaptured by lazy { super.mouseoversCaptured }\n    override val mouseoutsCaptured by lazy { super.mouseoutsCaptured }\n    override val mouseupsCaptured by lazy { super.mouseupsCaptured }\n    override val offlinesCaptured by lazy { super.offlinesCaptured }\n    override val onlinesCaptured by lazy { super.onlinesCaptured }\n    override val opensCaptured by lazy { super.opensCaptured }\n    override val pagehidesCaptured by lazy { super.pagehidesCaptured }\n    override val pageshowsCaptured by lazy { super.pageshowsCaptured }\n    override val pastesCaptured by lazy { super.pastesCaptured }\n    override val pausesCaptured by lazy { super.pausesCaptured }\n    override val playsCaptured by lazy { super.playsCaptured }\n    override val playingsCaptured by lazy { super.playingsCaptured }\n    override val popstatesCaptured by lazy { super.popstatesCaptured }\n    override val progresssCaptured by lazy { super.progresssCaptured }\n    override val ratechangesCaptured by lazy { super.ratechangesCaptured }\n    override val resizesCaptured by lazy { super.resizesCaptured }\n    override val resetsCaptured by lazy { super.resetsCaptured }\n    override val scrollsCaptured by lazy { super.scrollsCaptured }\n    override val searchsCaptured by lazy { super.searchsCaptured }\n    override val seekedsCaptured by lazy { super.seekedsCaptured }\n    override val seekingsCaptured by lazy { super.seekingsCaptured }\n    override val selectsCaptured by lazy { super.selectsCaptured }\n    override val showsCaptured by lazy { super.showsCaptured }\n    override val stalledsCaptured by lazy { super.stalledsCaptured }\n    override val storagesCaptured by lazy { super.storagesCaptured }\n    override val submitsCaptured by lazy { super.submitsCaptured }\n    override val suspendsCaptured by lazy { super.suspendsCaptured }\n    override val timeupdatesCaptured by lazy { super.timeupdatesCaptured }\n    override val togglesCaptured by lazy { super.togglesCaptured }\n    override val touchcancelsCaptured by lazy { super.touchcancelsCaptured }\n    override val touchendsCaptured by lazy { super.touchendsCaptured }\n    override val touchmovesCaptured by lazy { super.touchmovesCaptured }\n    override val touchstartsCaptured by lazy { super.touchstartsCaptured }\n    override val transitionendsCaptured by lazy { super.transitionendsCaptured }\n    override val unloadsCaptured by lazy { super.unloadsCaptured }\n    override val volumechangesCaptured by lazy { super.volumechangesCaptured }\n    override val waitingsCaptured by lazy { super.waitingsCaptured }\n    override val wheelsCaptured by lazy { super.wheelsCaptured }\n}","package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.launch\nimport kotlinx.dom.clear\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLStyleElement\nimport org.w3c.dom.Node\nimport org.w3c.dom.css.CSSStyleSheet\n\n/**\n * Occurs when the targeted html element is not present in document.\n *\n * @param message exception message\n */\nclass MountTargetNotFoundException(message: String) : Exception(message)\n\n/**\n * Creates a [RenderContext] for [Tag]s and\n * mounts it to a constant element in the static html file\n * which id matches the [selector].\n *\n * @param selector [query selector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)\n * of the element to mount to\n * @param override if true all child elements are removed before rendering\n * @param scope scope for tag\n * @param content [RenderContext] for rendering the data to the DOM\n * @throws MountTargetNotFoundException if target element with [selector] not found\n */\nfun render(\n    selector: String,\n    override: Boolean = true,\n    scope: (ScopeContext.() -> Unit) = {},\n    content: RenderContext.() -> Unit\n) {\n    document.querySelector(selector)?.let { parentElement ->\n        if (parentElement is HTMLElement) {\n            render(parentElement, override, scope, content)\n        } else MountTargetNotFoundException(\"element with id=$selector is not an HTMLElement\")\n    } ?: throw MountTargetNotFoundException(\"html document contains no element with id=$selector\")\n}\n\n/**\n * Creates a [RenderContext] for [Tag]s and mounts it to a [targetElement].\n *\n * @param targetElement [HTMLElement] to mount to, default is *document.body*\n * @param override if true all child elements are removed before rendering\n * @param content [RenderContext] for rendering the data to the DOM\n * @param scope scope for tag\n * @throws MountTargetNotFoundException if [targetElement] not found\n */\nfun render(\n    targetElement: HTMLElement? = document.body,\n    override: Boolean = true,\n    scope: (ScopeContext.() -> Unit) = {},\n    content: RenderContext.() -> Unit\n) {\n    //add style sheet containing mount-point-class\n    addGlobalStyle(\".$MOUNT_POINT_STYLE_CLASS { display: contents; }\")\n\n    if (targetElement != null) {\n        if (override) targetElement.clear()\n\n        val mountPoint = object : RenderContext, MountPointImpl() {\n            override val job = Job()\n            override val scope: Scope = ScopeContext(Scope()).also {\n                scope(it)\n                it.set(MOUNT_POINT_KEY, this)\n            }.scope\n\n            override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n                content(element)\n                targetElement.appendChild(element.domNode)\n                return element\n            }\n\n        }\n\n        MainScope().launch {\n            content(mountPoint)\n            mountPoint.runAfterMounts()\n        }\n\n    } else throw MountTargetNotFoundException(\"targetElement should not be null\")\n}\n\nconst val FRITZ2_GLOBAL_STYLESHEET_ID = \"fritz2-global-styles\"\n\ninternal fun getOrCreateGlobalStylesheet() = (document.getElementById(FRITZ2_GLOBAL_STYLESHEET_ID)?.let {\n    (it as HTMLStyleElement).sheet\n} ?: (document.createElement(\"style\") as HTMLStyleElement).also {\n    it.setAttribute(\"id\", FRITZ2_GLOBAL_STYLESHEET_ID)\n    it.appendChild(document.createTextNode(\"\"))\n    document.head!!.appendChild(it)\n}.sheet!!) as CSSStyleSheet\n\n/**\n * Adds global css-rules to a fritz2-specific stylesheet added to the document when first called\n *\n * @param css the valid css-code to insert\n */\nfun addGlobalStyle(css: String) {\n    getOrCreateGlobalStylesheet().insertRule(css, 0)\n}\n\n/**\n * Adds global css-rules to a fritz2-specific stylesheet added to the document when first called\n *\n * @param css the valid rules to insert\n */\nfun addGlobalStyles(css: List<String>) {\n    val stylesheet = getOrCreateGlobalStylesheet()\n    css.forEach { stylesheet.insertRule(it, 0) }\n}\n\n/**\n * Joins all given [classes] strings to one html-class-attribute [String]\n * by filtering all out which are null or blank.\n */\n@Deprecated(\"Use joinClasses instead.\", ReplaceWith(\"joinClasses(*classes)\"))\nfun classes(vararg classes: String?): String = joinClasses(*classes)\n\n/**\n * Joins all given [classes] strings to one html-class-attribute [String].\n * Individual Strings that are null or blank are filtered out.\n *\n * #### Examples\n *\n * ```\n * val classes = joinClasses(\n *     \"class1\",\n *     null,\n *     \"class2\",\n *     \"\"\n * )\n * println(classes) // prints \"class1 class2\"\n * ```\n *\n * Using this function, it is also possible to conditionally construct classes strings without having\n * to do dangerous string concatenation:\n *\n * ```\n * val classes = joinClasses(\n *    \"class1\",\n *    \"class2\".takeIf { it.length > 10 }\n * )\n *\n * println(classes) // prints \"class1\"\n * ```\n */\nfun joinClasses(vararg classes: String?): String =\n    classes.filterNot(String?::isNullOrBlank).joinToString(separator = \" \")\n\n/**\n * Helper function to call a native js function with concrete return type [T]\n */\n@JsName(\"Function\")\ninternal external fun <T> nativeFunction(vararg params: String, block: String): T",null,null,"package dev.fritz2.core\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.FlowCollector\nimport kotlinx.coroutines.flow.MutableSharedFlow\n\n/**\n * This [Flow] implementation represents a flow that emits exactly one value during its lifetime.\n *\n * @param value the value to emit on the flow\n */\nclass OnlyOnceFlow<T>(private val value: T) : Flow<T> {\n    private var collected = false\n\n    override suspend fun collect(collector: FlowCollector<T>) {\n        if (!collected) {\n            collected = true\n            collector.emit(value)\n        }\n    }\n}\n\n/**\n * This factory function creates an [OnlyOnceFlow].\n *\n * @param value the value to emit on the flow\n */\nfun <T> flowOnceOf(value: T) = OnlyOnceFlow(value)\n\n/**\n * Base-interface of the different types of handlers\n *\n * @property process function describing how this handler collects a [Flow] when called\n */\ninterface Handler<A> {\n    val process: (Flow<A>, Job) -> Unit\n\n    /**\n     * Calls this handler exactly once.\n     *\n     * @param data parameter forwarded to the handler\n     */\n    operator fun invoke(data: A) = this.process(flowOnceOf(data), Job())\n}\n\n/**\n * Calls this handler exactly once.\n */\noperator fun Handler<Unit>.invoke() = this.process(flowOnceOf(Unit), Job())\n\n/**\n * Defines, how to handle actions in your [Store]. Each Handler accepts actions of a defined type.\n * If your handler just needs the current value of the [Store] and no action, use [Unit].\n *\n * @param process defines how to handle the values of the connected [Flow]\n */\nvalue class SimpleHandler<A>(override val process: (Flow<A>, Job) -> Unit) : Handler<A>\n\n/**\n * An [EmittingHandler] is a special [Handler] that constitutes a new [Flow] by itself. You can emit values to this [Flow] from your code\n * and connect it to other [Handler]s on this or on other [Store]s. This way inter-store-communication is done in fritz2.\n *\n * @param collectWithChannel defines how to handle the values of the connected [Flow]\n * @property process function defining how this [Handler] collects a [Flow] when connected using [handledBy]\n */\nclass EmittingHandler<A, E>(\n    private val collectWithChannel: (Flow<A>, FlowCollector<E>, Job) -> Unit,\n    private val flow: MutableSharedFlow<E> = MutableSharedFlow()\n) : Handler<A>, Flow<E> by flow {\n\n    override val process: (Flow<A>, Job) -> Unit = { upstream, job ->\n        collectWithChannel(upstream, flow, job)\n    }\n}\n","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.channels.awaitClose\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.callbackFlow\nimport kotlinx.coroutines.flow.map\nimport org.w3c.dom.*\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.files.FileList\n\n/**\n * Creates a [Listener] for the given [Event] type and [eventName].\n *\n * @param eventName the [DOM-API name](https://developer.mozilla.org/en-US/docs/Web/API/Element#events) of an event.\n * Can be a custom name.\n * @param capture if `true`, activates capturing mode, else remains in `bubble` mode (default)\n * @param selector optional lambda expression to select specific events with option to manipulate it\n * (e.g. `preventDefault` or `stopPropagation`).\n *\n * @return a [Listener]-object, which is more or less a [Flow] of the specific `Event`-type.\n */\nfun <E : Event, T : EventTarget> T.subscribe(\n    eventName: String,\n    capture: Boolean = false,\n    selector: E.() -> Boolean = { true }\n): Listener<E, T> =\n    Listener(\n        callbackFlow {\n            val listener: (E) -> Unit = {\n                try {\n                    if (it.selector()) trySend(it.unsafeCast<E>())\n                } catch (e: Exception) {\n                    console.error(\"Unexpected event type while listening for `$eventName` event\", e)\n                }\n            }\n            this@subscribe.addEventListener(eventName, listener.unsafeCast<Event.() -> Unit>(), capture)\n\n            awaitClose { this@subscribe.removeEventListener(eventName, listener.unsafeCast<Event.() -> Unit>(), capture) }\n        }\n    )\n\n/**\n * Encapsulates the [Flow] of the [Event].\n *\n * Acts as a marker class in order to keep the type of the element, so we can offer dedicated methods to extract\n * values from some specific events.\n *\n * @see [values]\n */\nvalue class Listener<X : Event, out T : EventTarget>(private val events: Flow<X>) : Flow<X> by events\n\n/**\n * Extracts the [HTMLInputElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().value }\n\n/**\n * Extracts the [HTMLSelectElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLSelectElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLSelectElement>().value }\n\n/**\n * Extracts the [HTMLInputElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLFieldSetElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().value }\n\n/**\n * Extracts the [HTMLTextAreaElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLTextAreaElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLTextAreaElement>().value }\n\n/**\n * Extracts a [FileList] from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.files(): Flow<FileList?> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().files }\n\n/**\n * Extracts the [HTMLInputElement.checked] state from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.states(): Flow<Boolean> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().checked }\n\n/**\n * Extracts the [HTMLSelectElement.selectedIndex] from the [Event.target].\n */\nfun Listener<*, HTMLSelectElement>.selectedIndex(): Flow<Int> =\n    this.map { it.target.unsafeCast<HTMLSelectElement>().selectedIndex }\n\n/**\n * Extracts the [HTMLOptionElement.value] from the selected [HTMLOptionElement].\n */\nfun Listener<*, HTMLSelectElement>.selectedValue(): Flow<String> =\n    this.map {\n        val select = it.target.unsafeCast<HTMLSelectElement>()\n        select.options[select.selectedIndex].unsafeCast<HTMLOptionElement>().value\n    }\n\n/**\n * Extracts the [HTMLOptionElement.text] from the selected [HTMLOptionElement].\n */\nfun Listener<*, HTMLSelectElement>.selectedText(): Flow<String> =\n    this.map {\n        val select = it.target.unsafeCast<HTMLSelectElement>()\n        select.options[select.selectedIndex].unsafeCast<HTMLOptionElement>().text\n    }",null,null,"package dev.fritz2.core\n\nimport dev.fritz2.core.Scope.Key\n\n/**\n * Marks a class that it has [Scope] which can be transferred for adding/receiving additional information.\n *\n * The concept of the [Scope] is to provide a consistent mechanism to pass arbitrary data down the DOM tree from\n * a hierarchical higher node to \"unknown\" consumer nodes down the tree. This is very important for all kind of\n * dev.fritz2.headless.components (not necessarily fritz2's dev.fritz2.headless.components!), that should adapt to its context. Some higher node places some\n * information tagged by a unique key into the scope and passes this further down to its children, which themselves\n * just passes this scope further down, optionally adding or manipulating the scope for their children on their own.\n * Somewhere down the tree a node can evaluate the scope passed to him and look out for some key it want to react to.\n * If the key is present it can then apply its value or just behave in some specific way different to its default.\n * If there is no key, the node just applies its default behaviour.\n *\n * To give a practical example:\n * Imagine some button component, which normally uses the \"primary\" color as background. This works fine for most of\n * the time. But now imagine a buttons-bar on the bottom edge of a modal for example to provide the typical buttons\n * like \"ok\", \"cancel\", \"yes\", \"no\" or alike. This bar uses the primary color as background too, to have a high contrast\n * against the content above. The two dev.fritz2.headless.components do not work well together this way!\n * The user would have to manually apply some other color to the buttons when using them inside the bar, in order to\n * preserve a good contrast to it. To achieve this behaviour automatically, the scope comes to the rescue:\n * The buttons-bar component can define a global scope-key `buttonsBar` by using the [Scope.keyOf] function.\n * Then it can add some key-value pair to the scope like `set(buttonsBar, true)` in order\n * to signal all child nodes that they appear within the context of a buttons bar. The button component could be\n * aware of the key and implement some different behaviour concerning the color, if it detects that it is used within\n * a buttons-bar.\n *\n * The scope only changes conformal to the node hierarchy. That is the scope is empty at the top level [render] function\n * call and may be filled or changed by each child. But a change by some node is only propagated to the children of\n * that node. The children of the next siblings of the changing node are not affected and do not see those scope values!\n *\n * Example:\n * ```\n * div { // initial scope -> empty!\n *     val sizes = keyOf<String>(\"sizes\") // normally define scope-keys globally\n *     div(scope = {\n *         set(sizes, \"small\") // add some key-value to the scope\n *     }) {\n *         // all children will get this scope instance\n *         p {\n *             scope.asDataAttr() // -> { \"sizes\": \"small\" }\n *         }\n *         section {\n *             when (scope[sizes]) {\n *                 \"small\" -> div({ fontSize { \"0.8rem\" } }) { +\"small text\" }\n *                 \"normal\" -> div({ fontSize { \"1rem\" } }) { +\"normal text\" }\n *                 \"large\" -> div({ fontSize { \"1.2rem\" } }) { +\"large text\" }\n *                 else -> div { +\"no size scope available\" }\n *             }\n *         }\n *         // end of children\n *     }\n *     // next sibling -> only parent scope available, which is empty!\n *     p {\n *         scope.asDataAttr() // -> {}\n *     }\n * }\n * ```\n *\n * It is intentional that the key is not tied to some component or restricted in any other way.\n * A client should strive for a key management, that is driven by the \"producing\" node, not the \"consuming\" one!\n * That means one should prefer to encode that some specific context now exist or that some value is now available,\n * instead of setting a client node tailored rule. This enables more freedom for future usages and adaptions by other\n * consuming dev.fritz2.headless.components.\n *\n * To continue the first example: A buttons-bar component should better not inject some \"buttonsColor\" into the scope,\n * but better just some \"buttonsBar\" key without any value (Unit). As a creator you just cannot anticipate all situations\n * and future usage of the buttons-bar component. It might be possible that a client wants to put something different to a\n * button into the bar, that also should react to the context. Then a key (and value) tailored to the button does not\n * make sense anymore.\n *\n * @see Scope\n * @see [dev.fritz2.browser.Tag]\n */\ninterface WithScope {\n    val scope: Scope\n}\n\n/**\n * Contains any type of data which consists of a [Key] and a corresponding value object.\n */\nvalue class Scope(private val entries: HashMap<Key<*>, Any> = hashMapOf()) {\n\n    companion object {\n        /**\n         * Creates a [Scope.Key] for using it in [Scope].\n         */\n        inline fun <reified T: Any> keyOf(name: String? = null): Key<T> =\n            Key(name ?: T::class.simpleName ?: \"unknown\")\n    }\n\n    /**\n     * Creates a new [Scope] instance from a given one.\n     */\n    constructor(parent: Scope) : this(HashMap(parent.entries))\n\n    /**\n     * Key for setting and receiving entries in the [Scope]\n     */\n    open class Key<T: Any>(val name: String) {\n        override fun toString(): String = name\n    }\n\n    /**\n     * Sets a new key-value-pair to the [Scope].\n     */\n    internal operator fun <T: Any> set(key: Key<T>, value: T) { entries[key] = value }\n\n    /**\n     * Receives a key-value-par from the [Scope].\n     */\n    operator fun <T: Any> get(key: Key<T>): T? = entries[key]?.unsafeCast<T>()\n\n    /**\n     * Returns all containing [Key]s from the [Scope].\n     */\n    val keys: Set<Key<*>> get() = entries.keys\n\n    /**\n     * Gives the number of stored key-value-pairs.\n     */\n    val size: Int get() = entries.size\n\n    /**\n     * Checks if the [Scope] contains the given key.\n     */\n    fun <T: Any> contains(key: Key<T>) = entries.contains(key)\n\n    /**\n     * Removes the specified key and its corresponding value from the [Scope].\n     *\n     * @return the previous value associated with the key, or null if the key was not present in the [Scope].\n     */\n    fun <T: Any> remove(key: Key<T>) = entries.remove(key)\n\n    /**\n     * Formats the [Scope] to a valid JSON string for printing or using it inside Javascript.\n     *\n     * Be aware that this is just a key-value formatting, where each payload data is just encoded as [String].\n     * So there is no magical serialization for primitives or complex types embedded!\n     *\n     * Examples:\n     * ```\n     * // primitive types:\n     * {\n     *   \"boolean\": \"true\"\n     *   \"integer\": \"42\"\n     * }\n     *\n     * // complex type\n     * data class User(val name: String, val active: Boolean)\n     * val key: keyOf<User>(\"user\")\n     * val user = User(\"Chris\", true)\n     * // as JSON\n     * {\n     *   \"user\" : \"User(name=Chris, active=true)\"\n     * }\n     *\n     * ```\n     */\n    override fun toString(): String = buildString {\n        append(\"{ \")\n        var count = 0\n        for ((k, v) in entries) {\n            if (++count > 1) append(\", \")\n            append(\"\\\"\")\n            append(k.name)\n            append(\"\\\" : \\\"\")\n            append(v)\n            append(\"\\\"\")\n        }\n        append(\" }\")\n    }\n\n    /**\n     * Returns an Iterator over the entries in the [Scope].\n     */\n    operator fun iterator() = entries.toMap().iterator()\n}\n\n/**\n * Context for setting new entries to a [Scope] object.\n */\n@HtmlTagMarker\nclass ScopeContext(private var current: Scope) {\n    val scope get() = current\n\n    /**\n     * Sets a new key-value-pair to the [Scope].\n     */\n    fun <T: Any> set(key: Key<T>, value: T) {\n        current = Scope(current)\n        current[key] = value\n    }\n}\n\noperator fun (ScopeContext.() -> Unit).plus(plus: ScopeContext.() -> Unit): ScopeContext.() -> Unit = {\n    this@plus.invoke(this)\n    plus.invoke(this)\n}\n\noperator fun (ScopeContext.() -> Unit).plus(scope: Scope): ScopeContext.() -> Unit = {\n    this@plus.invoke(this)\n    scope.keys.map { it.unsafeCast<Key<Any>>() }\n        .forEach { key -> scope[key]?.let { set(key, it) } }\n}\n\noperator fun Scope.plus(scope: ScopeContext.() -> Unit): ScopeContext.() -> Unit = {\n    keys.map { it.unsafeCast<Key<Any>>() }\n        .forEach { key -> get(key)?.let { set(key, it) } }\n    scope.invoke(this)\n}","package dev.fritz2.core\n\nimport kotlinx.coroutines.flow.Flow\n\n/**\n * Implementation of Myer's diff algorithm on two [List]s creating a [Flow] of [Patch]es.\n */\nobject Myer {\n\n    /**\n     * diffs to versions of a [List] by providing an [IdProvider].\n     * The definition of an id to identify the same object in both [List]s makes it possible to detect,\n     * if an object is moved from one position to another.\n     * Also, this method does not emit a [Patch] if values within an element change.\n     *\n     * @param oldList old version of the [List]\n     * @param newList new version of the [List]\n     * @return a [List] of [Patch]es needed to transform the old list into the new one\n     */\n    fun <T, I> diff(oldList: List<T>, newList: List<T>, idProvider: IdProvider<T, I>?): List<Patch<T>> {\n        val isSame = if (idProvider != null) { a: T, b: T -> idProvider(a) == idProvider(b) } else { a: T, b: T -> a == b }\n        val trace = shortestEdit(oldList, newList, isSame)\n        return buildList {\n            backtrack<T>(trace, oldList, newList, isSame)\n        }\n    }\n\n    private inline fun <T> MutableList<Patch<T>>.backtrack(\n        trace: List<CircularArray>,\n        oldList: List<T>,\n        newList: List<T>,\n        isSame: (a: T, b: T) -> Boolean\n    ) {\n        var x = oldList.size\n        var y = newList.size\n\n        var lastPatch: Patch<T>? = null\n        for ((d, v) in trace.withIndex().reversed()) {\n            val k = x - y\n\n            val prevK = if (k == -d || (k != d && v.get(k - 1) < v.get(k + 1))) {\n                k + 1\n            } else {\n                k - 1\n            }\n\n            val prevX = v.get(prevK)\n            val prevY = prevX - prevK\n\n            while (x > prevX && y > prevY) {\n                x -= 1\n                y -= 1\n            }\n\n            if (d > 0) {\n                if (prevX < x) {\n                    val element = oldList[prevX]\n\n                    // try to combine\n                    if (lastPatch != null) {\n                        // combine adjacent deletes\n                        if (lastPatch is Patch.Delete && lastPatch.start == prevX + 1) {\n                            lastPatch = Patch.Delete(prevX, lastPatch.count + 1)\n                        }\n                        // combine directly following insert and delete of same element as move\n                        else if (lastPatch is Patch.Insert && isSame(lastPatch.element, element)) {\n                            lastPatch = Patch.Move(prevX, lastPatch.index) // - 1)\n                        } else {\n                            add(lastPatch)\n                            lastPatch = Patch.Delete(prevX, 1)\n                        }\n                    }\n                    //nothing there to combine\n                    else {\n                        lastPatch = Patch.Delete(prevX, 1)\n                    }\n\n                } else if (prevY < y) {\n                    val element = newList[prevY]\n                    val index = x\n\n                    // try to combine\n                    if (lastPatch != null) {\n                        // combine adjacent inserts\n                        if (lastPatch is Patch.Insert && lastPatch.index == index) {\n                            //turn oder of elements!\n                            lastPatch = Patch.InsertMany(listOf(element, lastPatch.element), lastPatch.index)\n                        } else if (lastPatch is Patch.InsertMany && lastPatch.index == index) {\n                            //turn oder of elements!\n                            lastPatch = Patch.InsertMany(buildList {\n                                add(element)\n                                addAll((lastPatch as Patch.InsertMany<T>).elements)\n                            }, lastPatch.index)\n                        }\n                        // combine directly following insert and delete of same element as move\n                        else if (lastPatch is Patch.Delete && lastPatch.count == 1 && isSame(\n                                oldList[lastPatch.start],\n                                element\n                            )\n                        ) {\n                            lastPatch = Patch.Move(lastPatch.start, index)\n                        } else {\n                            add(lastPatch)\n                            lastPatch = Patch.Insert(element, x)\n                        }\n                    }\n                    //nothing there to combine\n                    else {\n                        lastPatch = Patch.Insert(element, x)\n                    }\n                }\n            }\n\n            x = prevX\n            y = prevY\n        }\n\n        if (lastPatch != null) add(lastPatch)\n    }\n\n    private inline fun <T> shortestEdit(\n        oldList: List<T>,\n        newList: List<T>,\n        isSame: (a: T, b: T) -> Boolean\n    ): List<CircularArray> {\n        val max = oldList.size + newList.size\n\n        //init array\n        val v = CircularArray(max)\n        v.set(1, 0)\n\n        return buildList {\n            outerLoop@ for (d in 0..max) {\n                add(v.copyOf())\n                for (k in -d..d step 2) {\n                    //walk right or down?\n                    var x = if ((k == -d) || (k != d && v.get(k - 1) < v.get(k + 1))) {\n                        v.get(k + 1)\n                    } else {\n                        v.get(k - 1) + 1\n                    }\n\n                    var y = x - k\n                    //walk diagonal is possible as far as possible\n                    while (x < oldList.size && y < newList.size && isSame(oldList[x], newList[y])) {\n                        x += 1\n                        y += 1\n                    }\n                    v.set(k, x)\n\n                    if (x >= oldList.size && y >= newList.size) break@outerLoop\n                }\n            }\n        }\n\n    }\n}\n\ninternal class CircularArray(private val max: Int, private val buffer: IntArray = IntArray(2 * max + 1)) {\n    fun get(index: Int) = buffer[index + max]\n    fun set(index: Int, value: Int) = buffer.set(index + max, value)\n\n    fun copyOf(): CircularArray = CircularArray(max, buffer.copyOf())\n\n    override fun toString(): String {\n        return buffer.toString()\n    }\n}\n","package dev.fritz2.core\n\nimport kotlinx.coroutines.Job\n\n/**\n * A [Patch] describes the changes made to a [List].\n *\n * Pay attention that the sealed implementations should not be data classes - each generated patch must be applied in\n * every case even though it might \"equal\" the preceding one. (Imagine deleting the first item of a list at least\n * twice!) Using data classes patches could quite easily become equal and then might be dropped by [mountSimple]!\n * Thus, it is intentional to implement those as regular classes.\n */\nsealed class Patch<out T> {\n    /**\n     * A [Patch] saying, that a new element has been inserted\n     *\n     * @param element the new element that has been inserted\n     * @param index the element has been inserted at this index\n     */\n    class Insert<T>(val element: T, val index: Int) : Patch<T>() {\n        /**\n         * maps the new element\n         *\n         * @param mapping defines, how to map the value of the patch\n         */\n        override fun <R> map(parentJob: Job, mapping: (T, Job) -> R): Patch<R> =\n            Insert(mapping(element, Job(parentJob)), index)\n    }\n\n    /**\n     * A [Patch] saying, that a several element have been inserted\n     *\n     * @param elements the new elements that have been inserted\n     * @param index the elements have been inserted at this index\n     */\n    class InsertMany<T>(val elements: List<T>, val index: Int) : Patch<T>() {\n        /**\n         * maps each of the new elements\n         *\n         * @param mapping defines, how to map the values of the patch\n         */\n        override fun <R> map(parentJob: Job, mapping: (T, Job) -> R): Patch<R> = InsertMany(elements.map {\n            mapping(it, Job(parentJob))\n        }, index)\n    }\n\n    /**\n     * A [Patch] saying, that one or more elements have been deleted\n     *\n     * @param start the index of the first element, that has been deleted\n     * @param count the number of elements, that have to be deleted\n     */\n    class Delete<T>(val start: Int, val count: Int = 1) : Patch<T>() {\n        /**\n         * nothing to be mapped here...\n         */\n        override fun <R> map(parentJob: Job, mapping: (T, Job) -> R): Patch<R> = this.unsafeCast<Patch<R>>()\n    }\n\n    /**\n     * A [Patch] saying, that an element has been moved from one position to another.\n     * This is only used on mounts with a corresponding [IdProvider].\n     *\n     * @param from old index of the element\n     * @param to new index of the element\n     */\n    class Move<T>(val from: Int, val to: Int) : Patch<T>() {\n        /**\n         * nothing to be mapped here...\n         */\n        override fun <R> map(parentJob: Job, mapping: (T, Job) -> R): Patch<R> = this.unsafeCast<Patch<R>>()\n    }\n\n    /**\n     * a convenience-method, to map the values encapsulated in a [Patch]\n     *\n     * @param mapping defines, how to map the values of the patch\n     */\n    abstract fun <R> map(parentJob: Job, mapping: (T, Job) -> R): Patch<R>\n}\n","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport dev.fritz2.core.Keys.NamedKeys\nimport org.w3c.dom.events.KeyboardEvent\n\n/**\n * This interface models the modifier shortcuts, that enable combination of shortcuts like \"STRG + F\" or alike.\n *\n * If offers default implementation for concatenating modifiers with \"real\" shortcuts or just Strings to offer a\n * beautiful readable shortcut combination:\n * ```\n * // Start with modifier shortcut and append just a String\n * Keys.Control + \"K\"\n * // or other way round\n * Shortcut(\"K\") + Keys.Control\n * ```\n *\n * @see Shortcut\n * @see Keys\n */\ninterface ModifierShortcut {\n    val ctrl: Boolean\n    val alt: Boolean\n    val shift: Boolean\n    val meta: Boolean\n\n    /**\n     * This operator function enables the concatenation with a [Shortcut]:\n     * ```\n     * Keys.Alt + Shortcut(\"K\")\n     * ```\n     *\n     * @see ModifierShortcut\n     */\n    operator fun plus(other: Shortcut): Shortcut = Shortcut(\n        other.key,\n        ctrl || other.ctrl,\n        alt || other.alt,\n        shift || other.shift,\n        meta || other.meta,\n    )\n\n    /**\n     * This operator function enables the concatenation with simply a [String] to enable a nice readable keyboard\n     * combination:\n     * ```\n     * Keys.Shift + \"F\"\n     * ```\n     *\n     * Be aware that the [Shortcut.key] property is *case sensitive* just likte the [KeyboardEvent.key] property.\n     * So in order to match a shortcut with a capital key of an event, you must the [Shortcut.shift] flag to `true`.\n     * ```\n     * // A capital \"K\" should be matched, but would fail here:\n     * keydowns.map { shortcutOf(it) == Shortcut(\"K\") } // would emit `false`!\n     * // Instead this will work:\n     * keydowns.map { shortcutOf(it) == Shortcut(\"K\", shift = true) }\n     * // or with this operator an better readbility:\n     * keydowns.map { shortcutOf(it) == Keys.Shift + \"K\" }\n     * ```\n     *\n     * @see ModifierShortcut\n     */\n    operator fun plus(other: String): Shortcut = Shortcut(\n        key = other,\n        ctrl,\n        alt,\n        shift,\n        meta\n    )\n}\n\n/**\n * Enables combination of [ModifierShortcut]s like \"STRG + ALT + F\":\n * ```\n * Keys.Control + Keys.Alt + \"F\"\n * ```\n *\n * @param other the modifier shortcut to concatenate\n */\noperator fun ModifierShortcut.plus(other: ModifierShortcut): ModifierShortcut = object : ModifierShortcut {\n    override val ctrl = this@plus.ctrl || other.ctrl\n    override val alt = this@plus.alt || other.alt\n    override val shift = this@plus.shift || other.shift\n    override val meta = this@plus.meta || other.meta\n}\n\n/**\n * [Shortcut] represents a grouping type upon the \"key\" and the modifier key properties of a [KeyboardEvent].\n * More info [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)\n *\n * A shortcut can be easily constructed by a [KeyboardEvent] which makes this abstraction so feasible to use with the\n * keyboard event handling like:\n * ```\n * div {\n *     // raw usage (prefer next example!)\n *     keydowns.map { Shortcut(it) } handledBy { /* use object for further processing */ }\n *\n *     // use factory function to create a Shortcut object\n *     keydowns.map { shortcutOf(it) } handledBy { /* use object for further processing */ }\n *\n *     // combine with `filter` functions is a common pattern:\n *     keydowns.filter { shortcutOf(it) == Keys.Control + \"k\") handledBy {\n *         // only if combination was pressed and with access to the original event too!\n *         // all other key events will be ignored\n *     }\n * }\n * ```\n *\n * This class enables by its implementation of [ModifierShortcut] the concatenation with other modifiers, but it\n * prevents the meaningless combination of shortcuts:\n * ```\n * // this works:\n * Shortcut(\"F\") + Keys.Alt + Keys.Shift\n * // this won't work:\n * Shortcut(\"F\") + Shortcut(\"P\")\n *\n * // Ths first example could also be constructed by an appropriate constructor call:\n * Shortcut(\"F\", alt = true, shift = true)\n * ```\n *\n * Be aware that the [Shortcut.key] property is *case sensitive* just likte the [KeyboardEvent.key] property.\n * So in order to match a shortcut with a capital key of an event, you must the [Shortcut.shift] flag to `true`.\n * ```\n * // A capital \"K\" should be matched, but would fail here:\n * keydowns.map { shortcutOf(it) == Shortcut(\"K\") } // would emit `false`!\n * // Instead this will work:\n * keydowns.map { shortcutOf(it) == Shortcut(\"K\", shift = true) }\n * // or with this operator an better readbility:\n * keydowns.map { shortcutOf(it) == Keys.Shift + \"K\" }\n * ```\n * On the other hand there will be no matching for a lowercase key with `shift` property set to `true` either!\n *\n * @see ModifierShortcut\n * @see Keys\n */\ndata class Shortcut(\n    val key: String,\n    override val ctrl: Boolean = false,\n    override val alt: Boolean = false,\n    override val shift: Boolean = false,\n    override val meta: Boolean = false\n) : ModifierShortcut {\n    constructor(event: KeyboardEvent) : this(event.key, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey)\n\n    /**\n     * This operator function enables the concatenation with additional modifier shortcuts:\n     * ```\n     * Shortcut(\"F\") + Keys.Alt\n     * // or even\n     * Shortcut(\"F\") + Keys.Alt + Keys.Shift\n     * // will already result in a `Shortcut`\n     * ```\n     *\n     * @see ModifierShortcut\n     */\n    operator fun plus(other: ModifierShortcut): Shortcut = copy(\n        ctrl = ctrl || other.ctrl,\n        alt = alt || other.alt,\n        shift = shift || other.shift,\n        meta = meta || other.meta\n    )\n}\n\n/**\n * The function generates a [Shortcut] object out of a [String].\n *\n * @param key the [String] that should be taken as [Shortcut.key] property\n */\nfun shortcutOf(key: String) = Shortcut(key)\n\n/**\n * The function generates a [Shortcut] object out of a [KeyboardEvent].\n *\n * @param event the event to convert into a [Shortcut]\n */\nfun shortcutOf(event: KeyboardEvent) = Shortcut(event)\n\n/**\n * This object offers expressive access to predefined [Shortcut]s and [ModifierShortcut]s taken from the\n * [specification](https://www.w3.org/TR/uievents-key/#named-key-attribute-values) extended with `Space` as\n * symbol for simple space.\n *\n * This enables a beautiful definition of shortcuts:\n * ```\n * // define a commonly used combination\n * val searchKey = Keys.Shift + Keys.Alt + \"F\"\n *\n * // react only to a set of Keys e.g. to enable keyboard navigation of some component\n * div {\n *     keydowns.filter { setOf(Keys.Space, Keys.Enter).contains(shortcutOf(it)) }.map { } handledBy selectItem\n * }\n * ```\n *\n * In some cases, you need to check, whether an event contains a named-key as key property. There is a [Set] with all\n * named-keys ready for this: [NamedKeys]\n */\nobject Keys {\n    val Alt = object : ModifierShortcut {\n        override val ctrl = false\n        override val alt = true\n        override val shift = false\n        override val meta = false\n    }\n    val Control = object : ModifierShortcut {\n        override val ctrl = true\n        override val alt = false\n        override val shift = false\n        override val meta = false\n    }\n    val Meta = object : ModifierShortcut {\n        override val ctrl = false\n        override val alt = false\n        override val shift = false\n        override val meta = true\n    }\n    val Shift = object : ModifierShortcut {\n        override val ctrl = false\n        override val alt = false\n        override val shift = true\n        override val meta = false\n    }\n\n    val AVRInput = Shortcut(\"AVRInput\")\n    val AVRPower = Shortcut(\"AVRPower\")\n    val Accept = Shortcut(\"Accept\")\n    val Again = Shortcut(\"Again\")\n    val AllCandidates = Shortcut(\"AllCandidates\")\n    val Alphanumeric = Shortcut(\"Alphanumeric\")\n    val AltGraph = Shortcut(\"AltGraph\")\n    val AppSwitch = Shortcut(\"AppSwitch\")\n    val ArrowDown = Shortcut(\"ArrowDown\")\n    val ArrowLeft = Shortcut(\"ArrowLeft\")\n    val ArrowRight = Shortcut(\"ArrowRight\")\n    val ArrowUp = Shortcut(\"ArrowUp\")\n    val Attn = Shortcut(\"Attn\")\n    val AudioBalanceLeft = Shortcut(\"AudioBalanceLeft\")\n    val AudioBalanceRight = Shortcut(\"AudioBalanceRight\")\n    val AudioBassBoostDown = Shortcut(\"AudioBassBoostDown\")\n    val AudioBassBoostToggle = Shortcut(\"AudioBassBoostToggle\")\n    val AudioBassBoostUp = Shortcut(\"AudioBassBoostUp\")\n    val AudioFaderFront = Shortcut(\"AudioFaderFront\")\n    val AudioFaderRear = Shortcut(\"AudioFaderRear\")\n    val AudioSurroundModeNext = Shortcut(\"AudioSurroundModeNext\")\n    val AudioTrebleDown = Shortcut(\"AudioTrebleDown\")\n    val AudioTrebleUp = Shortcut(\"AudioTrebleUp\")\n    val AudioVolumeDown = Shortcut(\"AudioVolumeDown\")\n    val AudioVolumeMute = Shortcut(\"AudioVolumeMute\")\n    val AudioVolumeUp = Shortcut(\"AudioVolumeUp\")\n    val Backspace = Shortcut(\"Backspace\")\n    val BrightnessDown = Shortcut(\"BrightnessDown\")\n    val BrightnessUp = Shortcut(\"BrightnessUp\")\n    val BrowserBack = Shortcut(\"BrowserBack\")\n    val BrowserFavorites = Shortcut(\"BrowserFavorites\")\n    val BrowserForward = Shortcut(\"BrowserForward\")\n    val BrowserHome = Shortcut(\"BrowserHome\")\n    val BrowserRefresh = Shortcut(\"BrowserRefresh\")\n    val BrowserSearch = Shortcut(\"BrowserSearch\")\n    val BrowserStop = Shortcut(\"BrowserStop\")\n    val Call = Shortcut(\"Call\")\n    val Camera = Shortcut(\"Camera\")\n    val CameraFocus = Shortcut(\"CameraFocus\")\n    val Cancel = Shortcut(\"Cancel\")\n    val CapsLock = Shortcut(\"CapsLock\")\n    val ChannelDown = Shortcut(\"ChannelDown\")\n    val ChannelUp = Shortcut(\"ChannelUp\")\n    val Clear = Shortcut(\"Clear\")\n    val Close = Shortcut(\"Close\")\n    val ClosedCaptionToggle = Shortcut(\"ClosedCaptionToggle\")\n    val CodeInput = Shortcut(\"CodeInput\")\n    val ColorF0Red = Shortcut(\"ColorF0Red\")\n    val ColorF1Green = Shortcut(\"ColorF1Green\")\n    val ColorF2Yellow = Shortcut(\"ColorF2Yellow\")\n    val ColorF3Blue = Shortcut(\"ColorF3Blue\")\n    val ColorF4Grey = Shortcut(\"ColorF4Grey\")\n    val ColorF5Brown = Shortcut(\"ColorF5Brown\")\n    val Compose = Shortcut(\"Compose\")\n    val ContextMenu = Shortcut(\"ContextMenu\")\n    val Convert = Shortcut(\"Convert\")\n    val Copy = Shortcut(\"Copy\")\n    val CrSel = Shortcut(\"CrSel\")\n    val Cut = Shortcut(\"Cut\")\n    val DVR = Shortcut(\"DVR\")\n    val Dead = Shortcut(\"Dead\")\n    val Delete = Shortcut(\"Delete\")\n    val Dimmer = Shortcut(\"Dimmer\")\n    val DisplaySwap = Shortcut(\"DisplaySwap\")\n    val Eisu = Shortcut(\"Eisu\")\n    val Eject = Shortcut(\"Eject\")\n    val End = Shortcut(\"End\")\n    val EndCall = Shortcut(\"EndCall\")\n    val Enter = Shortcut(\"Enter\")\n    val EraseEof = Shortcut(\"EraseEof\")\n    val Escape = Shortcut(\"Escape\")\n    val ExSel = Shortcut(\"ExSel\")\n    val Execute = Shortcut(\"Execute\")\n    val Exit = Shortcut(\"Exit\")\n    val F1 = Shortcut(\"F1\")\n    val F10 = Shortcut(\"F10\")\n    val F11 = Shortcut(\"F11\")\n    val F12 = Shortcut(\"F12\")\n    val F2 = Shortcut(\"F2\")\n    val F3 = Shortcut(\"F3\")\n    val F4 = Shortcut(\"F4\")\n    val F5 = Shortcut(\"F5\")\n    val F6 = Shortcut(\"F6\")\n    val F7 = Shortcut(\"F7\")\n    val F8 = Shortcut(\"F8\")\n    val F9 = Shortcut(\"F9\")\n    val FavoriteClear0 = Shortcut(\"FavoriteClear0\")\n    val FavoriteClear1 = Shortcut(\"FavoriteClear1\")\n    val FavoriteClear2 = Shortcut(\"FavoriteClear2\")\n    val FavoriteClear3 = Shortcut(\"FavoriteClear3\")\n    val FavoriteRecall0 = Shortcut(\"FavoriteRecall0\")\n    val FavoriteRecall1 = Shortcut(\"FavoriteRecall1\")\n    val FavoriteRecall2 = Shortcut(\"FavoriteRecall2\")\n    val FavoriteRecall3 = Shortcut(\"FavoriteRecall3\")\n    val FavoriteStore0 = Shortcut(\"FavoriteStore0\")\n    val FavoriteStore1 = Shortcut(\"FavoriteStore1\")\n    val FavoriteStore2 = Shortcut(\"FavoriteStore2\")\n    val FavoriteStore3 = Shortcut(\"FavoriteStore3\")\n    val FinalMode = Shortcut(\"FinalMode\")\n    val Find = Shortcut(\"Find\")\n    val Fn = Shortcut(\"Fn\")\n    val FnLock = Shortcut(\"FnLock\")\n    val GoBack = Shortcut(\"GoBack\")\n    val GoHome = Shortcut(\"GoHome\")\n    val GroupFirst = Shortcut(\"GroupFirst\")\n    val GroupLast = Shortcut(\"GroupLast\")\n    val GroupNext = Shortcut(\"GroupNext\")\n    val GroupPrevious = Shortcut(\"GroupPrevious\")\n    val Guide = Shortcut(\"Guide\")\n    val GuideNextDay = Shortcut(\"GuideNextDay\")\n    val GuidePreviousDay = Shortcut(\"GuidePreviousDay\")\n    val HangulMode = Shortcut(\"HangulMode\")\n    val HanjaMode = Shortcut(\"HanjaMode\")\n    val Hankaku = Shortcut(\"Hankaku\")\n    val HeadsetHook = Shortcut(\"HeadsetHook\")\n    val Help = Shortcut(\"Help\")\n    val Hibernate = Shortcut(\"Hibernate\")\n    val Hiragana = Shortcut(\"Hiragana\")\n    val HiraganaKatakana = Shortcut(\"HiraganaKatakana\")\n    val Home = Shortcut(\"Home\")\n    val Hyper = Shortcut(\"Hyper\")\n    val Info = Shortcut(\"Info\")\n    val Insert = Shortcut(\"Insert\")\n    val InstantReplay = Shortcut(\"InstantReplay\")\n    val JunjaMode = Shortcut(\"JunjaMode\")\n    val KanaMode = Shortcut(\"KanaMode\")\n    val KanjiMode = Shortcut(\"KanjiMode\")\n    val Katakana = Shortcut(\"Katakana\")\n    val Key11 = Shortcut(\"Key11\")\n    val Key12 = Shortcut(\"Key12\")\n    val LastNumberRedial = Shortcut(\"LastNumberRedial\")\n    val LaunchApplication1 = Shortcut(\"LaunchApplication1\")\n    val LaunchApplication2 = Shortcut(\"LaunchApplication2\")\n    val LaunchCalendar = Shortcut(\"LaunchCalendar\")\n    val LaunchContacts = Shortcut(\"LaunchContacts\")\n    val LaunchMail = Shortcut(\"LaunchMail\")\n    val LaunchMediaPlayer = Shortcut(\"LaunchMediaPlayer\")\n    val LaunchMusicPlayer = Shortcut(\"LaunchMusicPlayer\")\n    val LaunchPhone = Shortcut(\"LaunchPhone\")\n    val LaunchScreenSaver = Shortcut(\"LaunchScreenSaver\")\n    val LaunchSpreadsheet = Shortcut(\"LaunchSpreadsheet\")\n    val LaunchWebBrowser = Shortcut(\"LaunchWebBrowser\")\n    val LaunchWebCam = Shortcut(\"LaunchWebCam\")\n    val LaunchWordProcessor = Shortcut(\"LaunchWordProcessor\")\n    val Link = Shortcut(\"Link\")\n    val ListProgram = Shortcut(\"ListProgram\")\n    val LiveContent = Shortcut(\"LiveContent\")\n    val Lock = Shortcut(\"Lock\")\n    val LogOff = Shortcut(\"LogOff\")\n    val MailForward = Shortcut(\"MailForward\")\n    val MailReply = Shortcut(\"MailReply\")\n    val MailSend = Shortcut(\"MailSend\")\n    val MannerMode = Shortcut(\"MannerMode\")\n    val MediaApps = Shortcut(\"MediaApps\")\n    val MediaAudioTrack = Shortcut(\"MediaAudioTrack\")\n    val MediaClose = Shortcut(\"MediaClose\")\n    val MediaFastForward = Shortcut(\"MediaFastForward\")\n    val MediaLast = Shortcut(\"MediaLast\")\n    val MediaNextTrack = Shortcut(\"MediaNextTrack\")\n    val MediaPause = Shortcut(\"MediaPause\")\n    val MediaPlay = Shortcut(\"MediaPlay\")\n    val MediaPlayPause = Shortcut(\"MediaPlayPause\")\n    val MediaPreviousTrack = Shortcut(\"MediaPreviousTrack\")\n    val MediaRecord = Shortcut(\"MediaRecord\")\n    val MediaRewind = Shortcut(\"MediaRewind\")\n    val MediaSkipBackward = Shortcut(\"MediaSkipBackward\")\n    val MediaSkipForward = Shortcut(\"MediaSkipForward\")\n    val MediaStepBackward = Shortcut(\"MediaStepBackward\")\n    val MediaStepForward = Shortcut(\"MediaStepForward\")\n    val MediaStop = Shortcut(\"MediaStop\")\n    val MediaTopMenu = Shortcut(\"MediaTopMenu\")\n    val MediaTrackNext = Shortcut(\"MediaTrackNext\")\n    val MediaTrackPrevious = Shortcut(\"MediaTrackPrevious\")\n    val MicrophoneToggle = Shortcut(\"MicrophoneToggle\")\n    val MicrophoneVolumeDown = Shortcut(\"MicrophoneVolumeDown\")\n    val MicrophoneVolumeMute = Shortcut(\"MicrophoneVolumeMute\")\n    val MicrophoneVolumeUp = Shortcut(\"MicrophoneVolumeUp\")\n    val ModeChange = Shortcut(\"ModeChange\")\n    val NavigateIn = Shortcut(\"NavigateIn\")\n    val NavigateNext = Shortcut(\"NavigateNext\")\n    val NavigateOut = Shortcut(\"NavigateOut\")\n    val NavigatePrevious = Shortcut(\"NavigatePrevious\")\n    val New = Shortcut(\"New\")\n    val NextCandidate = Shortcut(\"NextCandidate\")\n    val NextFavoriteChannel = Shortcut(\"NextFavoriteChannel\")\n    val NextUserProfile = Shortcut(\"NextUserProfile\")\n    val NonConvert = Shortcut(\"NonConvert\")\n    val Notification = Shortcut(\"Notification\")\n    val NumLock = Shortcut(\"NumLock\")\n    val OnDemand = Shortcut(\"OnDemand\")\n    val Open = Shortcut(\"Open\")\n    val PageDown = Shortcut(\"PageDown\")\n    val PageUp = Shortcut(\"PageUp\")\n    val Pairing = Shortcut(\"Pairing\")\n    val Paste = Shortcut(\"Paste\")\n    val Pause = Shortcut(\"Pause\")\n    val PinPDown = Shortcut(\"PinPDown\")\n    val PinPMove = Shortcut(\"PinPMove\")\n    val PinPToggle = Shortcut(\"PinPToggle\")\n    val PinPUp = Shortcut(\"PinPUp\")\n    val PlaySpeedDown = Shortcut(\"PlaySpeedDown\")\n    val PlaySpeedReset = Shortcut(\"PlaySpeedReset\")\n    val PlaySpeedUp = Shortcut(\"PlaySpeedUp\")\n    val Power = Shortcut(\"Power\")\n    val PowerOff = Shortcut(\"PowerOff\")\n    val PreviousCandidate = Shortcut(\"PreviousCandidate\")\n    val Print = Shortcut(\"Print\")\n    val PrintScreen = Shortcut(\"PrintScreen\")\n    val Process = Shortcut(\"Process\")\n    val Props = Shortcut(\"Props\")\n    val RandomToggle = Shortcut(\"RandomToggle\")\n    val RcLowBattery = Shortcut(\"RcLowBattery\")\n    val RecordSpeedNext = Shortcut(\"RecordSpeedNext\")\n    val Redo = Shortcut(\"Redo\")\n    val RfBypass = Shortcut(\"RfBypass\")\n    val Romaji = Shortcut(\"Romaji\")\n    val STBInput = Shortcut(\"STBInput\")\n    val STBPower = Shortcut(\"STBPower\")\n    val Save = Shortcut(\"Save\")\n    val ScanChannelsToggle = Shortcut(\"ScanChannelsToggle\")\n    val ScreenModeNext = Shortcut(\"ScreenModeNext\")\n    val ScrollLock = Shortcut(\"ScrollLock\")\n    val Select = Shortcut(\"Select\")\n    val Settings = Shortcut(\"Settings\")\n    val SingleCandidate = Shortcut(\"SingleCandidate\")\n    val Soft1 = Shortcut(\"Soft1\")\n    val Soft2 = Shortcut(\"Soft2\")\n    val Soft3 = Shortcut(\"Soft3\")\n    val Soft4 = Shortcut(\"Soft4\")\n    val Space = Shortcut(\" \")\n    val SpeechCorrectionList = Shortcut(\"SpeechCorrectionList\")\n    val SpeechInputToggle = Shortcut(\"SpeechInputToggle\")\n    val SpellCheck = Shortcut(\"SpellCheck\")\n    val SplitScreenToggle = Shortcut(\"SplitScreenToggle\")\n    val Standby = Shortcut(\"Standby\")\n    val Subtitle = Shortcut(\"Subtitle\")\n    val Super = Shortcut(\"Super\")\n    val Symbol = Shortcut(\"Symbol\")\n    val SymbolLock = Shortcut(\"SymbolLock\")\n    val TV = Shortcut(\"TV\")\n    val TV3DMode = Shortcut(\"TV3DMode\")\n    val TVAntennaCable = Shortcut(\"TVAntennaCable\")\n    val TVAudioDescription = Shortcut(\"TVAudioDescription\")\n    val TVAudioDescriptionMixDown = Shortcut(\"TVAudioDescriptionMixDown\")\n    val TVAudioDescriptionMixUp = Shortcut(\"TVAudioDescriptionMixUp\")\n    val TVContentsMenu = Shortcut(\"TVContentsMenu\")\n    val TVDataService = Shortcut(\"TVDataService\")\n    val TVInput = Shortcut(\"TVInput\")\n    val TVInputComponent1 = Shortcut(\"TVInputComponent1\")\n    val TVInputComponent2 = Shortcut(\"TVInputComponent2\")\n    val TVInputComposite1 = Shortcut(\"TVInputComposite1\")\n    val TVInputComposite2 = Shortcut(\"TVInputComposite2\")\n    val TVInputHDMI1 = Shortcut(\"TVInputHDMI1\")\n    val TVInputHDMI2 = Shortcut(\"TVInputHDMI2\")\n    val TVInputHDMI3 = Shortcut(\"TVInputHDMI3\")\n    val TVInputHDMI4 = Shortcut(\"TVInputHDMI4\")\n    val TVInputVGA1 = Shortcut(\"TVInputVGA1\")\n    val TVMediaContext = Shortcut(\"TVMediaContext\")\n    val TVNetwork = Shortcut(\"TVNetwork\")\n    val TVNumberEntry = Shortcut(\"TVNumberEntry\")\n    val TVPower = Shortcut(\"TVPower\")\n    val TVRadioService = Shortcut(\"TVRadioService\")\n    val TVSatellite = Shortcut(\"TVSatellite\")\n    val TVSatelliteBS = Shortcut(\"TVSatelliteBS\")\n    val TVSatelliteCS = Shortcut(\"TVSatelliteCS\")\n    val TVSatelliteToggle = Shortcut(\"TVSatelliteToggle\")\n    val TVTerrestrialAnalog = Shortcut(\"TVTerrestrialAnalog\")\n    val TVTerrestrialDigital = Shortcut(\"TVTerrestrialDigital\")\n    val TVTimer = Shortcut(\"TVTimer\")\n    val Tab = Shortcut(\"Tab\")\n    val Teletext = Shortcut(\"Teletext\")\n    val Undo = Shortcut(\"Undo\")\n    val Unidentified = Shortcut(\"Unidentified\")\n    val VideoModeNext = Shortcut(\"VideoModeNext\")\n    val VoiceDial = Shortcut(\"VoiceDial\")\n    val WakeUp = Shortcut(\"WakeUp\")\n    val Wink = Shortcut(\"Wink\")\n    val Zenkaku = Shortcut(\"Zenkaku\")\n    val ZenkakuHankaku = Shortcut(\"ZenkakuHankaku\")\n    val ZoomIn = Shortcut(\"ZoomIn\")\n    val ZoomOut = Shortcut(\"ZoomOut\")\n    val ZoomToggle = Shortcut(\"ZoomToggle\")\n\n    val NamedKeys = setOf(\n        // modifiers\n        \"Alt\",\n        \"Control\",\n        \"Meta\",\n        \"Shift\",\n        // rest\n        \"AVRInput\",\n        \"AVRPower\",\n        \"Accept\",\n        \"Again\",\n        \"AllCandidates\",\n        \"Alphanumeric\",\n        \"AltGraph\",\n        \"AppSwitch\",\n        \"ArrowDown\",\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"ArrowUp\",\n        \"Attn\",\n        \"AudioBalanceLeft\",\n        \"AudioBalanceRight\",\n        \"AudioBassBoostDown\",\n        \"AudioBassBoostToggle\",\n        \"AudioBassBoostUp\",\n        \"AudioFaderFront\",\n        \"AudioFaderRear\",\n        \"AudioSurroundModeNext\",\n        \"AudioTrebleDown\",\n        \"AudioTrebleUp\",\n        \"AudioVolumeDown\",\n        \"AudioVolumeMute\",\n        \"AudioVolumeUp\",\n        \"Backspace\",\n        \"BrightnessDown\",\n        \"BrightnessUp\",\n        \"BrowserBack\",\n        \"BrowserFavorites\",\n        \"BrowserForward\",\n        \"BrowserHome\",\n        \"BrowserRefresh\",\n        \"BrowserSearch\",\n        \"BrowserStop\",\n        \"Call\",\n        \"Camera\",\n        \"CameraFocus\",\n        \"Cancel\",\n        \"CapsLock\",\n        \"ChannelDown\",\n        \"ChannelUp\",\n        \"Clear\",\n        \"Close\",\n        \"ClosedCaptionToggle\",\n        \"CodeInput\",\n        \"ColorF0Red\",\n        \"ColorF1Green\",\n        \"ColorF2Yellow\",\n        \"ColorF3Blue\",\n        \"ColorF4Grey\",\n        \"ColorF5Brown\",\n        \"Compose\",\n        \"ContextMenu\",\n        \"Convert\",\n        \"Copy\",\n        \"CrSel\",\n        \"Cut\",\n        \"DVR\",\n        \"Dead\",\n        \"Delete\",\n        \"Dimmer\",\n        \"DisplaySwap\",\n        \"Eisu\",\n        \"Eject\",\n        \"End\",\n        \"EndCall\",\n        \"Enter\",\n        \"EraseEof\",\n        \"Escape\",\n        \"ExSel\",\n        \"Execute\",\n        \"Exit\",\n        \"F1\",\n        \"F10\",\n        \"F11\",\n        \"F12\",\n        \"F2\",\n        \"F3\",\n        \"F4\",\n        \"F5\",\n        \"F6\",\n        \"F7\",\n        \"F8\",\n        \"F9\",\n        \"FavoriteClear0\",\n        \"FavoriteClear1\",\n        \"FavoriteClear2\",\n        \"FavoriteClear3\",\n        \"FavoriteRecall0\",\n        \"FavoriteRecall1\",\n        \"FavoriteRecall2\",\n        \"FavoriteRecall3\",\n        \"FavoriteStore0\",\n        \"FavoriteStore1\",\n        \"FavoriteStore2\",\n        \"FavoriteStore3\",\n        \"FinalMode\",\n        \"Find\",\n        \"Fn\",\n        \"FnLock\",\n        \"GoBack\",\n        \"GoHome\",\n        \"GroupFirst\",\n        \"GroupLast\",\n        \"GroupNext\",\n        \"GroupPrevious\",\n        \"Guide\",\n        \"GuideNextDay\",\n        \"GuidePreviousDay\",\n        \"HangulMode\",\n        \"HanjaMode\",\n        \"Hankaku\",\n        \"HeadsetHook\",\n        \"Help\",\n        \"Hibernate\",\n        \"Hiragana\",\n        \"HiraganaKatakana\",\n        \"Home\",\n        \"Hyper\",\n        \"Info\",\n        \"Insert\",\n        \"InstantReplay\",\n        \"JunjaMode\",\n        \"KanaMode\",\n        \"KanjiMode\",\n        \"Katakana\",\n        \"Key11\",\n        \"Key12\",\n        \"LastNumberRedial\",\n        \"LaunchApplication1\",\n        \"LaunchApplication2\",\n        \"LaunchCalendar\",\n        \"LaunchContacts\",\n        \"LaunchMail\",\n        \"LaunchMediaPlayer\",\n        \"LaunchMusicPlayer\",\n        \"LaunchPhone\",\n        \"LaunchScreenSaver\",\n        \"LaunchSpreadsheet\",\n        \"LaunchWebBrowser\",\n        \"LaunchWebCam\",\n        \"LaunchWordProcessor\",\n        \"Link\",\n        \"ListProgram\",\n        \"LiveContent\",\n        \"Lock\",\n        \"LogOff\",\n        \"MailForward\",\n        \"MailReply\",\n        \"MailSend\",\n        \"MannerMode\",\n        \"MediaApps\",\n        \"MediaAudioTrack\",\n        \"MediaClose\",\n        \"MediaFastForward\",\n        \"MediaLast\",\n        \"MediaNextTrack\",\n        \"MediaPause\",\n        \"MediaPlay\",\n        \"MediaPlayPause\",\n        \"MediaPreviousTrack\",\n        \"MediaRecord\",\n        \"MediaRewind\",\n        \"MediaSkipBackward\",\n        \"MediaSkipForward\",\n        \"MediaStepBackward\",\n        \"MediaStepForward\",\n        \"MediaStop\",\n        \"MediaTopMenu\",\n        \"MediaTrackNext\",\n        \"MediaTrackPrevious\",\n        \"MicrophoneToggle\",\n        \"MicrophoneVolumeDown\",\n        \"MicrophoneVolumeMute\",\n        \"MicrophoneVolumeUp\",\n        \"ModeChange\",\n        \"NavigateIn\",\n        \"NavigateNext\",\n        \"NavigateOut\",\n        \"NavigatePrevious\",\n        \"New\",\n        \"NextCandidate\",\n        \"NextFavoriteChannel\",\n        \"NextUserProfile\",\n        \"NonConvert\",\n        \"Notification\",\n        \"NumLock\",\n        \"OnDemand\",\n        \"Open\",\n        \"PageDown\",\n        \"PageUp\",\n        \"Pairing\",\n        \"Paste\",\n        \"Pause\",\n        \"PinPDown\",\n        \"PinPMove\",\n        \"PinPToggle\",\n        \"PinPUp\",\n        \"PlaySpeedDown\",\n        \"PlaySpeedReset\",\n        \"PlaySpeedUp\",\n        \"Power\",\n        \"PowerOff\",\n        \"PreviousCandidate\",\n        \"Print\",\n        \"PrintScreen\",\n        \"Process\",\n        \"Props\",\n        \"RandomToggle\",\n        \"RcLowBattery\",\n        \"RecordSpeedNext\",\n        \"Redo\",\n        \"RfBypass\",\n        \"Romaji\",\n        \"STBInput\",\n        \"STBPower\",\n        \"Save\",\n        \"ScanChannelsToggle\",\n        \"ScreenModeNext\",\n        \"ScrollLock\",\n        \"Select\",\n        \"Settings\",\n        \"SingleCandidate\",\n        \"Soft1\",\n        \"Soft2\",\n        \"Soft3\",\n        \"Soft4\",\n        \" \",\n        \"SpeechCorrectionList\",\n        \"SpeechInputToggle\",\n        \"SpellCheck\",\n        \"SplitScreenToggle\",\n        \"Standby\",\n        \"Subtitle\",\n        \"Super\",\n        \"Symbol\",\n        \"SymbolLock\",\n        \"TV\",\n        \"TV3DMode\",\n        \"TVAntennaCable\",\n        \"TVAudioDescription\",\n        \"TVAudioDescriptionMixDown\",\n        \"TVAudioDescriptionMixUp\",\n        \"TVContentsMenu\",\n        \"TVDataService\",\n        \"TVInput\",\n        \"TVInputComponent1\",\n        \"TVInputComponent2\",\n        \"TVInputComposite1\",\n        \"TVInputComposite2\",\n        \"TVInputHDMI1\",\n        \"TVInputHDMI2\",\n        \"TVInputHDMI3\",\n        \"TVInputHDMI4\",\n        \"TVInputVGA1\",\n        \"TVMediaContext\",\n        \"TVNetwork\",\n        \"TVNumberEntry\",\n        \"TVPower\",\n        \"TVRadioService\",\n        \"TVSatellite\",\n        \"TVSatelliteBS\",\n        \"TVSatelliteCS\",\n        \"TVSatelliteToggle\",\n        \"TVTerrestrialAnalog\",\n        \"TVTerrestrialDigital\",\n        \"TVTimer\",\n        \"Tab\",\n        \"Teletext\",\n        \"Undo\",\n        \"Unidentified\",\n        \"VideoModeNext\",\n        \"VoiceDial\",\n        \"WakeUp\",\n        \"Wink\",\n        \"Zenkaku\",\n        \"ZenkakuHankaku\",\n        \"ZoomIn\",\n        \"ZoomOut\",\n        \"ZoomToggle\"\n    )\n}",null,"package dev.fritz2.core\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport kotlinx.coroutines.flow.map\n\n/**\n * A [Store] that is derived from a parent [Store] mapping its data in both ways by a given [Lens].\n */\nclass SubStore<P, D>(\n    val parent: Store<P>,\n    private val lens: Lens<P, D>\n) : Store<D> {\n\n    /**\n     * [Job] used as parent job on all coroutines started in [Handler]s in the scope of this [Store]\n     */\n    override val job: Job = parent.job\n\n    /**\n     * defines how to infer the id of the sub-part from the parent's id.\n     */\n    override val id: String by lazy { \"${parent.id}.${lens.id}\".trimEnd('.') }\n\n    /**\n     * defines how to infer the id of the sub-part from the parent's id.\n     */\n    override val path: String by lazy { \"${parent.path}.${lens.id}\".trimEnd('.') }\n\n    /**\n     * represents the current value of the [Store]\n     */\n    override val current: D\n        get() = lens.get(parent.current)\n\n    /**\n     * Since a [SubStore] is just a view on a [parent] [Store] holding the real value,\n     * it forwards the [Update] to it, using it's [Lens] to transform it.\n     */\n    override suspend fun enqueue(update: Update<D>) {\n        parent.enqueue { lens.apply(it, update) }\n    }\n\n    /**\n     * a simple [SimpleHandler] that just takes the given action-value as the new value for the [Store].\n     */\n    override val update = handle<D> { _, newValue -> newValue }\n\n    /**\n     * the current value of the [Store] is derived from the data of it's parent using the given [Lens].\n     */\n    override val data: Flow<D> = parent.data.map {\n        lens.get(it)\n    }.distinctUntilChanged()\n\n    override fun errorHandler(cause: Throwable) {\n        parent.errorHandler(cause)\n    }\n\n}\n\n/**\n * Creates a new [Store] containing the element for the given [element] and [idProvider] from the original [Store]'s [List].\n *\n * @param element current instance of the entity to focus on\n * @param idProvider to identify the same entity (i.e. when it's content changed)\n */\nfun <D, I> Store<List<D>>.mapByElement(element: D, idProvider: IdProvider<D, I>): Store<D> =\n    SubStore(this, lensForElement(element, idProvider))\n\n/**\n * Creates a new [Store] containing the element for the given [index] from the original [Store]'s [List]\n *\n * @param index position in the list to point to\n */\nfun <D> Store<List<D>>.mapByIndex(index: Int): Store<D> =\n    SubStore(this, lensForElement(index))\n\n/**\n * Creates a new [Store] containing the corresponding value for the given [key] from the original [Store]'s [Map].\n *\n * @param key in the map to point to\n */\nfun <K, V> Store<Map<K, V>>.mapByKey(key: K): Store<V> =\n    SubStore(this, lensForElement(key))\n\n/**\n * on a [Store] of nullable data this creates a [Store] with a nullable parent and non-nullable value.\n * It can be called using a [Lens] on a non-nullable parent (that can be created by using the @[Lenses]-annotation),\n * but you have to ensure, that the resulting [Store] is never used, when it's parent's value is null.\n * Otherwise, a [NullPointerException] is thrown.\n *\n * @param lens [Lens] to use to create the [Store]\n */\nfun <P, T> Store<P?>.map(lens: Lens<P & Any, T>): Store<T> =\n    map(lens.withNullParent())\n\n/**\n * Creates a new [Store] from a _nullable_ parent store that either contains the original value or a given\n * [default] value if the original value was `null`.\n *\n * When updating the value of the resulting [Store] to this [default] value,\n * null is used instead updating the parent. When this [Store]'s value would be null according to it's parent's\n * value, the [default] value will be used instead.\n *\n * @param default value to be used instead of `null`\n */\nfun <T> Store<T?>.mapNull(default: T): Store<T> =\n    map(mapToNonNullLens(default))\n\n/**\n * Creates a new [Store] from a _non-nullable_ parent store that either contains the original value or `null` if its\n * value matches the given [placeholder].\n *\n * When updating the value of the resulting [Store] to `null`, the [placeholder] is used instead.\n * When the resulting [Store]'s value would be the [placeholder], `null` will be used instead.\n *\n * @param placeholder value to be mapped to `null`\n */\nfun <T> Store<T>.mapNullable(placeholder: T): Store<T?> =\n    map(mapToNullableLens(placeholder))",null,null,"package dev.fritz2.routing\n\nimport dev.fritz2.core.Store\nimport dev.fritz2.core.Update\nimport dev.fritz2.core.lensForElement\nimport kotlinx.browser.window\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport org.w3c.dom.events.Event\n\n/**\n * Creates a new simple [String] based [Router]\n *\n * @param default default route\n * @param job Job to be used by the [Router]\n */\nfun routerOf(default: String = \"\", job: Job = Job()): Router<String> = Router(StringRoute(default), job)\n\n/**\n * Creates a new [Map] based [Router]\n *\n * @param default default route\n * @param job Job to be used by the [Router]\n */\nfun routerOf(default: Map<String, String> = emptyMap(), job: Job = Job()) = MapRouter(default, job)\n\n/**\n * Creates a new type based [Router].\n * Therefore, the given type must implement the [Route] interface.\n *\n * @param default default route\n * @param job Job to be used by the [Router]\n */\nfun <T> routerOf(default: Route<T>, job: Job = Job()): Router<T> = Router(default, job)\n\n/**\n * Router register the event-listener for hashchange-event and\n * handles route-changes. Therefore, it uses a [Route] object\n * which can [Route.serialize] and [Route.deserialize] the given type.\n *\n * @param T type to marshal and unmarshal\n * @property defaultRoute default route to use when page is called and no hash is set\n * @param job Job to be used by the [Router]\n */\nopen class Router<T>(\n    private val defaultRoute: Route<T>,\n    override val job: Job\n) : Store<T> {\n\n    override val id: String = \"\"\n\n    override val path: String = \"\"\n\n    private val state: MutableStateFlow<T> = MutableStateFlow(defaultRoute.default)\n\n    private val prefix = \"#\"\n\n    private val mutex = Mutex()\n\n    override val data: Flow<T> = state.asStateFlow()\n\n    override val current: T\n        get() = state.value\n\n    override val update = this.handle<T> { _, newValue -> newValue }\n\n    /**\n     * Navigates to the new given route provided as [T].\n     */\n    open val navTo = this.handle<T> { _, newValue -> newValue }\n\n    override suspend fun enqueue(update: Update<T>) {\n        mutex.withLock {\n            val newRoute = update(state.value)\n            state.value = newRoute\n            window.location.hash = prefix + defaultRoute.serialize(newRoute)\n        }\n    }\n\n    init {\n        if (window.location.hash.removePrefix(prefix).isNotBlank()) {\n            state.value = defaultRoute.deserialize(window.location.hash.removePrefix(prefix))\n        }\n        val listener: (Event) -> Unit = {\n            it.preventDefault()\n            if (window.location.hash.removePrefix(prefix).isNotBlank()) {\n                state.value = defaultRoute.deserialize(window.location.hash.removePrefix(prefix))\n            } else {\n                state.value = defaultRoute.default\n            }\n        }\n        window.addEventListener(\"hashchange\", listener)\n    }\n}\n\n/**\n * Represents the current [Route] as [Map] of [String]s.\n *\n * @param defaultRoute default [Route] to start with.\n * @param job Job to be used by the [Router]\n */\nopen class MapRouter(defaultRoute: Map<String, String> = emptyMap(), job: Job) :\n    Router<Map<String, String>>(MapRoute(defaultRoute), job) {\n\n    /**\n     * Selects with the given [key] a [Pair] of the value\n     * and all routing parameters as [Map].\n     *\n     * @param key for getting the value from the parameter [Map]\n     * @return [Flow] of the resulting [Pair]\n     */\n    open fun select(key: String): Flow<Pair<String?, Map<String, String>>> = this.data.map { m -> m[key] to m }\n\n    /**\n     * Returns the value for the given [key] from the routing parameters.\n     *\n     * @param key for getting the value from the parameter [Map]\n     * @param orElse if [key] is not in [Map]\n     * @return [Flow] of [String] with the value\n     */\n    open fun select(key: String, orElse: String): Flow<String> = this.data.map { m -> m[key] ?: orElse }\n\n    /**\n     * Creates a new [Store] containing the corresponding value for the given [key].\n     *\n     * @param key for getting the value from the parameter [Map]\n     * @return [Store] containing the corresponding value\n     */\n    open fun mapByKey(key: String): Store<String> = this.map(lensForElement(key))\n}\n\n/**\n * A Route is an abstraction for routes\n * which needed for routing\n *\n * @param T type to de-/serialize from\n */\ninterface Route<T> {\n    /**\n     * Gives the default value when initialising the routing\n     */\n    val default: T\n\n    /**\n     * Deserializes the *window.location.hash* to the\n     * given type [T] after the hashchange-event is fired.\n     */\n    fun deserialize(hash: String): T\n\n    /**\n     * Serializes a given object of type [T] to [String]\n     * for setting it to the *window.location.hash*\n     */\n    fun serialize(route: T): String\n}\n\n/**\n * [StringRoute] is a simple [Route] which\n * serializes and deserializes nothing.\n *\n * @param default [String] to use when no explicit *window.location.hash* was set before\n */\nopen class StringRoute(override val default: String = \"\") : Route<String> {\n    override fun deserialize(hash: String): String = decodeURIComponent(hash)\n    override fun serialize(route: String): String = encodeURIComponent(route)\n}\n\n/**\n * [MapRoute] serializes and deserializes a [Map] to and from *window.location.hash*.\n * It is like using url parameters with pairs of key and value.\n * At the start of the route is only a **#** instead of **?**.\n *\n * @param default [Map] to use when no explicit *window.location.hash* was set before\n */\nopen class MapRoute(override val default: Map<String, String> = emptyMap()) :\n    Route<Map<String, String>> {\n\n    private val assignment = \"=\"\n    private val divider = \"&\"\n\n    override fun deserialize(hash: String): Map<String, String> =\n        hash.split(divider).filter { s -> s.isNotBlank() }.asReversed().associate(::extractPair)\n\n    override fun serialize(route: Map<String, String>): String =\n        route.map { (key, value) -> \"$key$assignment${encodeURIComponent(value)}\" }\n            .joinToString(separator = divider)\n\n    private fun extractPair(param: String): Pair<String, String> {\n        val equalsPos = param.indexOf(assignment)\n        return if (equalsPos > 0) {\n            val key = param.substring(0, equalsPos)\n            val value = decodeURIComponent(param.substring(equalsPos + 1))\n            key to value\n        } else param to \"true\"\n    }\n}\n\nexternal fun decodeURIComponent(encodedURI: String): String\n\nexternal fun encodeURIComponent(decodedURI: String): String",null,null,null,null,"// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!\npackage dev.fritz2.examples.todomvc\n\nimport dev.fritz2.core.Lens\nimport dev.fritz2.core.lensOf\nimport kotlin.Boolean\nimport kotlin.String\n\npublic fun ToDo.Companion.id(): Lens<ToDo, String> = lensOf(\n    \"id\",\n    { it.id },\n    { p, v -> p.copy(id = v)}\n  )\n\npublic fun <PARENT> Lens<PARENT, ToDo>.id(): Lens<PARENT, String> = this + ToDo.id()\n\npublic fun ToDo.Companion.text(): Lens<ToDo, String> = lensOf(\n    \"text\",\n    { it.text },\n    { p, v -> p.copy(text = v)}\n  )\n\npublic fun <PARENT> Lens<PARENT, ToDo>.text(): Lens<PARENT, String> = this + ToDo.text()\n\npublic fun ToDo.Companion.completed(): Lens<ToDo, Boolean> = lensOf(\n    \"completed\",\n    { it.completed },\n    { p, v -> p.copy(completed = v)}\n  )\n\npublic fun <PARENT> Lens<PARENT, ToDo>.completed(): Lens<PARENT, Boolean> = this + ToDo.completed()\n","package dev.fritz2.examples.todomvc\n\nimport dev.fritz2.core.Id\nimport dev.fritz2.core.Lenses\n\n@Lenses\ndata class ToDo(\n    val id: String = Id.next(),\n    val text: String,\n    val completed: Boolean = false\n) {\n    companion object {\n        fun deserialize(source: String): ToDo {\n            val split = source.split(';')\n            return ToDo(split[0], split[1], split[2].toBoolean())\n        }\n\n        fun serialize(item: ToDo): String {\n            return \"${item.id};${item.text};${item.completed}\"\n        }\n    }\n}\n","package dev.fritz2.examples.todomvc\n\nimport dev.fritz2.core.*\nimport dev.fritz2.routing.routerOf\nimport kotlinx.browser.localStorage\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.get\n\ndata class Filter(val text: String, val function: (List<ToDo>) -> List<ToDo>)\n\nval filters = mapOf(\n    \"all\" to Filter(\"All\") { it },\n    \"active\" to Filter(\"Active\") { toDos -> toDos.filter { !it.completed } },\n    \"completed\" to Filter(\"Completed\") { toDos -> toDos.filter { it.completed } }\n)\n\nconst val persistencePrefix = \"todos\"\n\nval router = routerOf(\"all\")\n\n@ExperimentalStdlibApi\nobject ToDoListStore : RootStore<List<ToDo>>(emptyList(), id = persistencePrefix, job = Job()) {\n\n    private val query = handle {\n        buildList {\n            for (index in 0 until localStorage.length) {\n                val key = localStorage.key(index)\n                if (key != null && key.startsWith(persistencePrefix)) {\n                    add(ToDo.deserialize(localStorage[key]!!))\n                }\n            }\n        }\n    }\n\n    val save = handle<ToDo> { toDos, new ->\n        if (new.text.isNotBlank()) {\n            localStorage.setItem(\"${persistencePrefix}.${new.id}\", ToDo.serialize(new))\n            var inList = false\n            val updatedList = toDos.map {\n                if (it.id == new.id) {\n                    inList = true\n                    new\n                } else it\n            }\n            if (inList) updatedList else toDos + new\n        } else delete(toDos, new.id)\n    }\n\n    val remove = handle<String> { toDos, id ->\n        delete(toDos, id)\n    }\n\n    private fun delete(entities: List<ToDo>, id: String): List<ToDo> {\n        localStorage.removeItem(\"${persistencePrefix}.$id\")\n        return entities.filterNot { it.id == id }\n    }\n\n    val toggleAll = handle { toDos, toggle: Boolean ->\n        val toUpdate = toDos.mapNotNull {\n            if (it.completed != toggle) it.copy(completed = toggle) else null\n        }\n\n        val updated = (toDos + toUpdate).groupBy{ it.id }\n            .filterValues { it.size > 1 }.mapValues { (id, entities) ->\n                val entity = entities.last()\n                localStorage.setItem(\n                    \"${persistencePrefix}.$id\",\n                    ToDo.serialize(entity)\n                )\n                entity\n            }\n\n        toDos.map { updated[it.id] ?: it }\n    }\n\n    val clearCompleted = handle { toDos ->\n        toDos.partition(ToDo::completed).let { (completed, active) ->\n            completed.map(ToDo::id).forEach {\n                localStorage.removeItem(\"${persistencePrefix}.$it\")\n            }\n            active\n        }\n    }\n\n    val count = data.map { todos -> todos.count { !it.completed } }.distinctUntilChanged()\n    val empty = data.map { it.isEmpty() }.distinctUntilChanged()\n    val allChecked = data.map { todos -> todos.isNotEmpty() && todos.all { it.completed } }.distinctUntilChanged()\n\n    init {\n        query()\n    }\n}\n\nfun RenderContext.filter(text: String, route: String) {\n    li {\n        a {\n            className(router.data.map { if (it == route) \"selected\" else \"\" })\n            href(\"#$route\")\n            +text\n        }\n    }\n}\n\n@ExperimentalStdlibApi\n@ExperimentalCoroutinesApi\nfun main() {\n\n    fun RenderContext.inputHeader() {\n        header {\n            h1 { +\"todos\" }\n            input(\"new-todo\") {\n                placeholder(\"What needs to be done?\")\n                autofocus(true)\n\n                changes.values().map { domNode.value = \"\"; ToDo(text = it.trim()) } handledBy ToDoListStore.save\n            }\n        }\n    }\n\n    fun RenderContext.mainSection() {\n        section(\"main\") {\n            input(\"toggle-all\", id = \"toggle-all\") {\n                type(\"checkbox\")\n                checked(ToDoListStore.allChecked)\n\n                changes.states() handledBy ToDoListStore.toggleAll\n            }\n            label {\n                `for`(\"toggle-all\")\n                +\"Mark all as complete\"\n            }\n            ul(\"todo-list\") {\n                ToDoListStore.data.combine(router.data) { all, route ->\n                    filters[route]?.function?.invoke(all) ?: all\n                }.renderEach(ToDo::id) { toDo ->\n                    val toDoStore = ToDoListStore.mapByElement(toDo, ToDo::id)\n                    toDoStore.data.drop(1) handledBy ToDoListStore.save\n                    val textStore = toDoStore.map(ToDo.text())\n                    val completedStore = toDoStore.map(ToDo.completed())\n\n                    val editingStore = storeOf(false)\n\n                    li {\n                        attr(\"data-id\", toDoStore.id)\n                        classMap(toDoStore.data.combine(editingStore.data) { toDo, isEditing ->\n                            mapOf(\n                                \"completed\" to toDo.completed,\n                                \"editing\" to isEditing\n                            )\n                        })\n                        div(\"view\") {\n                            input(\"toggle\") {\n                                type(\"checkbox\")\n                                checked(completedStore.data)\n\n                                changes.states() handledBy completedStore.update\n                            }\n                            label {\n                                textStore.data.renderText()\n\n                                dblclicks.map { true } handledBy editingStore.update\n                            }\n                            button(\"destroy\") {\n                                clicks.map { toDo.id } handledBy ToDoListStore.remove\n                            }\n                        }\n                        input(\"edit\") {\n                            value(textStore.data)\n                            changes.values() handledBy textStore.update\n\n                            editingStore.data handledBy { isEditing ->\n                                if (isEditing) {\n                                    domNode.focus()\n                                    domNode.select()\n                                }\n                            }\n                            merge(\n                                blurs.map { false },\n                                keyups.filter { shortcutOf(it) == Keys.Enter }.map { false }\n                            ) handledBy editingStore.update\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    fun RenderContext.appFooter() {\n        footer(\"footer\") {\n            className(ToDoListStore.empty.map { if (it) \"hidden\" else \"\" })\n\n            span(\"todo-count\") {\n                strong {\n                    ToDoListStore.count.map {\n                        \"$it item${if (it != 1) \"s\" else \"\"} left\"\n                    }\n                }\n            }\n\n            ul(\"filters\") {\n                filters.forEach { filter(it.value.text, it.key) }\n            }\n            button(\"clear-completed\") {\n                +\"Clear completed\"\n\n                clicks handledBy ToDoListStore.clearCompleted\n            }\n        }\n    }\n\n    render(\"#todoapp\") {\n        inputHeader()\n        mainSection()\n        appFooter()\n    }\n}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(988);\n"],"names":["root","factory","exports","module","define","amd","globalThis","parent","mapper","$completion","cause","printErrorIgnoreLensException","<this>","handler","idProvider","into","batch","content","$idProvider","$content","upstream","createPatches","clear","domNode","target","mountPoints","onEach","$batch","$target","it","MainScope","parentJob","launch","mountPatches$slambda","$mountPoints","$this$launch","mountPatches","$this$mountPatches","upstreamValues","acc","new","baseClass","id","scope","HtmlTag","execute","$execute","flow","job","$executeJob","executeJob","launchIn","$this$catch","d","lens","SubStore","this","name","value","trueValue","setAttribute","removeAttribute","toCharArray","message","$element","toString","checked","defaultChecked","defaultValue","$trueValue","$this_launch","classes","element","joinToString","$scope","$targetElement","MountPointImpl","Job","$mountPoint","process","collector","console","error","$it","$this$withContext","WithJob$handledBy$o$collect$slambda","<init>","events","$selector","$this_callbackFlow","$eventName","e","$listener","$capture","removeEventListener","values$o$collect$slambda","states$o$collect$slambda","Mutex","mountScope","payload","key","mountPoint","beforeUnmount","from","to","itemToMove","childNodes","item","child","index","length","appendChild","insertBefore","mountPatches$slambda$slambda$slambda","Key","a","b","max","buffer","Patch","elements","start","count","$this_mountPatches","newJob","BuildContext","RenderContext$renderEach$lambda$o$collect$slambda","entries","current","event","ctrlKey","altKey","shiftKey","metaKey","ctrl","alt","shift","meta","Shortcut","setOf","$d","fritz2","initialData","MutableStateFlow","Channel","$this$flow","RootStore$data$slambda","$this$transformLatest","RootStore$update$slambda","newValue","SubStore$data$o$collect$slambda","$update","lazy","trimEnd","distinctUntilChanged","$name","Tag$classMap$o$collect$slambda","$flowArray","HtmlTag$classesStateFlow$delegate$lambda$slambda$o$collect$slambda","$this$combineInternal","<get-classesStateFlow>","receiver","tagName","className","AnnexContext","update","defaultRoute","asStateFlow","Router$navTo$slambda","removePrefix","window","location","hash","listener","preventDefault","addEventListener","default","CollectionLensGetException","CollectionLensSetException","v","equals","withContext","$this$callbackFlow","awaitClose","t","DomLifecycleListener","document","createDocumentFragment","move","nextSibling","cancelChildren","removeChild","append","awaitAnimationFrame","cancel","mapLatest","collect","oldList","newList","isSame","CircularArray","k","x","y","trace","lastPatch","reversed","withIndex","prevK","prevX","prevY","Delete","Move","InsertMany","listOf","Insert","mapping","old","Pair","result","h","emptyFlow","createTextNode","joinClasses","parentElement","flowArray","initial","stateIn","buildClasses","eventName","capture","selector","newRoute","decodeURIComponent","route","encodeURIComponent","values","Listener","callbackFlow","OnlyOnceFlow","flowOnceOf","lensForElement","override","querySelector","targetElement","body","css","getElementById","sheet","head","getOrCreateGlobalStylesheet","insertRule","MountTargetNotFoundException","RootStore","Router","StringRoute","text","completed","function","ToDoListStore$count$o$collect$slambda","ToDoListStore$empty$o$collect$slambda","ToDoListStore$allChecked$o$collect$slambda","delete","entities","localStorage","removeItem","emptyList","ToDoListStore$save$slambda","toDos","ToDoListStore$remove$slambda","ToDoListStore$toggleAll$slambda","toggle","ToDoListStore$clearCompleted$slambda","$route","$text","$this$li","$this$a","href","filter$lambda$lambda$o$collect$slambda","$this$render","$this$header","$this$h1","$this$input","placeholder","autofocus","$this_input","main$inputHeader$lambda$lambda$o$collect$slambda","$this$section","type","states","$this$label","$this$ul","combine","all","$this$renderEach","toDo","toDoStore","mapByElement","drop","$toDoStore","$editingStore","$completedStore","$textStore","$toDo","textStore","completedStore","editingStore","storeOf","isEditing","$this$div","$this$button","merge","main$mainSection$lambda$lambda$lambda$lambda$lambda$lambda$o$collect$slambda","main$mainSection$lambda$lambda$lambda$lambda$lambda$o$collect$slambda","$this$footer","main$appFooter$lambda$o$collect$slambda","$this$span","$this$strong","main$appFooter$lambda$lambda$lambda$o$collect$slambda","filter","Filter","mapOf","routerOf","source","split","ToDo","toBoolean","todos","startsWith","setItem","inList","toUpdate","answer","list","entry","entity","last","updated","first","second","active","focus","select","shortcutOf","render","log","LN2","O","len","relativeStart","end","relativeEnd","finalValue","TypedArray","asUint","searchString","position","context","operation","separator","prefix","postfix","limit","truncated","transform","initialCapacity","loadFactor","destination","minimumValue","maximumValue","KotlinNothingValueException_init_$Init$","other","ordinal","low","high","interfaces","maxSize","masks","i","currentSize","imask","iid","iidImask","numberIndex","intArray","numberWithSettledBit","activeBit","capacity","mask","array","initValue","$array","obj","code","startIndex","endIndex","ia","descriptor","proto","o","typeOf","shiftNumber","MASK","bigNumber","hashCode","signum","chunk","hashCodeMap","symbol","cachedHashCode","str","obj1","obj2","instance","constructorFunction","constructor","this_","errorInfo","thisNeg","otherNeg","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","numBits","radix","radixLong","div","rem","digitsPerTime","radixToPower","remDiv","digits","twoPwr32","kind","defaultConstructor","associatedObjectKey","associatedObjects","suspendArity","ctor","metadata","endInclusive","iface","possibleActiveBit","parentProto","propName","fromIndex","toIndex","newSize","collection","iterator","expectedSize","destinationOffset","rangeSize","subrange","ArrayList_init_$Init$","rangeCheck","internalMap","HashMap_init_$Init$","original","backing","$entryIterator","backingMap","map","HashSet_init_$Init$","computeHashSize","computeShift","hashSize","InternalHashMap_init_$Init$","<get-capacity>","<get-hashSize>","registerModification","ensureExtraCapacity","n","shouldCompact","extraCapacity","spareCapacity","gaps","ensureCapacity","minCapacity","src","dst","srcLen","dstLen","arr","newHashSize","allocateValuesArray","curValuesArray","newValuesArray","compact","updateHashArray","j","valuesArray","rehash","putRehash","probesLeft","findKey","addKey","tentativeMaxProbeDistance","probeDistance","putIndex","removeEntryAt","removeHashAt","removedHash","hole","patchAttemptsLeft","putEntry","oldValue","keysArray","presenceArray","hashArray","maxProbeDistance","LinkedHashMap_init_$Init$","LinkedHashSet_init_$Init$","resultContinuation","completion","$receiver","$completion$1","Exception_init_$Init$","IllegalStateException_init_$Init$","UnsupportedOperationException_init_$Init$","RuntimeException_init_$Init$","NoSuchElementException_init_$Init$","NullPointerException_init_$Init$","ConcurrentModificationException_init_$Init$","NoWhenBranchMatchedException_init_$Init$","ClassCastException_init_$Init$","seed","seed1","seed2","jClass","givenSimpleName","isInstanceFunction","jClasses","kClass","StringBuilder_init_$Init$","uppercase","char","ch","diff","needle","bottom","top","middle","ignoreCase","n1","n2","min","thisChar","otherChar","thisOffset","otherOffset","implFindEntry","ArrayDeque_init_$Init$","copyElements","newCapacity","newElements","positiveMod","negativeMod","incremented","decremented","nullifyNonEmpty","internalFromIndex","internalToIndex","isVarargs","iteratorFactory","exceptionalState","$block","removed","interceptor","left","size","cur","contains","baseKey","safeCast","step","c","mod","until","z","w","addend","thisUpper","otherUpper","range","string","indices","calcNext","match","input","getNextMatch","initializer","exception","that","CancellationException_init_$Init$","IllegalArgumentException_init_$Init$","IndexOutOfBoundsException_init_$Init$","Error_init_$Init$","ArithmeticException_init_$Init$","UninitializedPropertyAccessException_init_$Init$","approx","res","approxDouble","approx2","log2","delta","approxRes","approxRem","bitCount","l","modified","iter","insertionRangeCheck","offset","increaseLength","amount","previous","sb","putAllEntries","contentEquals","currentResult","currentException","outcome","intercepted","arity","$arity","oldCapacity","otherIterator","ourValue","internalLastIndex","internalIndex","decrementedInternalIndex","decrementedHead","tail","copyCollectionElements","oldElement","reference","dest","collectionSize","removeRangeShiftPreceding","copyFromIndex","copyToIndex","copyCount","segmentLength","newHead","removeRangeShiftSucceeding","nextNotReady","block","next","newLeft","containsAll","bits","rnd","v0","rangeStart","rangeEnd","m","argument","pairs","random","midPoint","reverseIndex","tmp","getter","setter","paramCount","superType","delimiters","delimiter","currentOffset","nextIndex","isLimited","$delimiters","$ignoreCase","$this$$receiver","currentIndex","chars","charAtIndex","isNegative","firstChar","limitForMaxRadix","limitBeforeMul","digit","startFound","suppressed","event1","event2","event3","event4","<set-?>","expect","onBufferOverflow","parentContext","initParentJob","newContext","coroutine","uCont","handle","delegate","<get-parentHandle>","isReusable","callSegmentOnCancellation","segment","ex","installParentHandle","invokeOnCancellationImpl","multipleHandlersError","state","dispatchResume","mode","tryResume","undispatched","dispatcher","eventLoop","resumedState","proposedUpdate","resumeMode","onCancellation","idempotent","alreadyResumedError","detachChildIfNonResuable","cancelHandler","idempotentResume","cancelCause","handled","continuation","originalException","thrownException","unconfined","invokeImmediately","JobNode$invoke$ref","JobNode$invoke$ref$lambda","isActive","<set-exceptionsHolder>","<get-exceptionsHolder>","allocateList","finalizeFinishingState","wasCancelling","proposedException","exceptions","finalCause","getFinalRootCause","addSuppressedExceptions","rootCause","seenExceptions","unwrappedCause","unwrapped","finalException","finalState","completeStateFinalization","notifyCancelling","cancelParent","isCancellation","startInternal","promoteEmptyToNodeList","promoteSingleToNodeList","createCauseException","getOrPromoteCancellingList","tryMakeCancelling","cancelling","tryMakeCompleting","tryMakeCompletingSlowPath","notifyRootCause","finishing","anotherChild","tryFinalizeSimpleState","tryWaitForChild","stateString","isCompleting","childJob","handlesException","cont","yieldContext","setElementLazy","prev","channel","pointers","onClosedHasNext","hasNextOnNoWaiterSuspend","r","cancellable","updCellResult","onClosedHasNextNoWaiterSuspend","<get-bufferEndCounter>","<get-isRendezvousOrUnlimited>","onClosedSend","sendOnNoWaiterSuspend","s","sendersAndCloseStatusCur","closed","onClosedSendOnNoWaiterSuspend","updateCellSend","waiter","updateCellSendSlow","bufferOrRendezvousSend","curSenders","BufferedChannel$onCancellationImplDoNotCall$ref","BufferedChannel$onCancellationImplDoNotCall$ref$lambda","onCancellationImplDoNotCall","receiveCatchingOnNoWaiterSuspend","onClosedReceiveCatchingOnNoWaiterSuspend","updateCellReceive","senders","updateCellReceiveSlow","helpExpandBuffer","trySelectResult","expandBuffer","updateCellExpandBuffer","updateCellExpandBufferSlow","incCompletedExpandBufferAttempts","nAttempts","incCompletedExpandBufferAttempts$default","<get-receiveException>","completeCloseOrCancel","completeClose","sendersCur","lastSegment","closeLinkedList","lastBufferedCellGlobalIndex","markAllEmptyCellsAsClosed","globalIndex","cancelSuspendedReceiveRequests","sendersCounter","suspendedReceivers","completeCancel","removeUnprocessedElements","onUndeliveredElement","undeliveredElementException","suspendedSenders","sender","isClosed","isClosedForReceive","isCellNonEmpty","findSegmentSend","startFrom","updateSendersCounterIfLower","curCounter","findSegmentReceive","updateReceiversCounterIfLower","findSegmentBufferEnd","currentBufferEndCounter","moveSegmentBufferEndToSpecifiedOrLast","BufferedChannel$onCancellationChannelResultImplDoNotCall$ref","BufferedChannel$onCancellationChannelResultImplDoNotCall$ref$lambda","onCancellationChannelResultImplDoNotCall","$select","firstSegment","counter","pauseEB","closeStatus","createSegment$ref$lambda","holder","_channel","trySendImpl","isSendOp","trySendDropLatest","onCompletion","awaitClose$lambda","$value","consume","<get-head>","<get-replaySize>","<get-totalSize>","<get-bufferEndIndex>","<get-queueEndIndex>","tryEmitLocked","tryEmitNoCollectorsLocked","dropOldestLocked","correctCollectorIndexesOnDropOldest","enqueueLocked","curSize","curBuffer","growBuffer","newBuffer","updateBufferLocked","newReplayIndex","newMinCollectorIndex","newBufferEndIndex","newQueueEndIndex","cleanupTailLocked","tryTakeValue","slot","resumes","oldIndex","getPeekedValueLockedAt","resume","tryPeekLocked","awaitValue","findSlotsToResumeLocked","resumesIn","resumeCount","replay","bufferCapacity","$started","$this_flow","$subscriptionCount","initialState","initialValue","$collector","collectWithContextUndispatched","emitContext","countOrElement","$downstream","downstream","flows","arrayFactory","$this$flowScope","$resultChannel","$i","$flows","$nonClosed","$arrayFactory","$transform","owner","$previousFlow","$this_coroutineScope","ChannelLimitedFlowMerge$collectTo$slambda","currentContext","collectElement","collectJob","emissionParentJob","keySelector","areEquivalent","$previousKey","$action","$fromDownstream","$skipped","$count","extraBufferCapacity","launchSharing$slambda$slambda","$upstream","$shared","$initialValue","onEach$o$collect$slambda","$accumulator","$operation","$initial","$flow","action","$predicate","$result","<get-nextOrClosed>","<get-aliveSegmentLeft>","<get-aliveSegmentRight>","createNewSegment","newTail","propertyName","minValue","maxValue","parsed","findClause","clauseObject","trySelectInternalResult","token","holdsLockImpl","curOwner","$owner","locked","decPermits","p","coerceAvailablePermitsAtMaximum","addAcquireToQueue","curTail","enqIdx","tryResumeNextFromQueue","curHead","deqIdx","cellState","permits","acquiredPermits","combined","addedContext","collectContext","forbiddenElementsBitmask","fatalCompletion","trySuspend","takenState","cancelLater","dispatched","cancellationCause","caller","$onCancellation","upd","tryResumeImpl","dc","actualCompletion","task","queue","eh","continueCompleting","lastChild","waitChild","waitChildAgain","$this$sequence","onCancelling","node","joinInternal","joinSuspend","cancelMakeCompleting","makeCancelling","causeExceptionCache","causeException","addedBeforeCompletion","latestState","main","immediate","isSender","shouldSendSuspend","curSendersAndCloseStatus","globalCellIndex","ebCompleted","ebCompletedAndBit","pauseExpandBuffers","markCancellationStarted","closedByThisOperation","markCancelled","markClosed","invokeCloseHandler","closeHandler","minElem","cellStateString","cancelEmitter","emitter","emitted","emitSuspend","newBufferSize0","maxResumeCount","curEmitterIndex","newBufferSize1","subscriptionCount","updateState","expectedState","newState","curSequence","curSlots","oldState","slots","$this$coroutineScope","newOverflow","sum","props","coroutineContext","fromDownstream","predicate","fatalException","reason","internalResult","trySelectInternal","curState","clause","lockSuspend","contWithOwner","tryLockImpl","timeout","ts","expected","permissionsBitmask","forbiddenElementsBit","oldContext","started","config","defaultExtraCapacity","shared","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}